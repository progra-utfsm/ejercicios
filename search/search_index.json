{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#ejercicios-programacion-utfsm","title":"Ejercicios Programaci\u00f3n UTFSM","text":"<p>Selecci\u00f3n de ejercicios de programaci\u00f3n   ...</p> <p>Utilice la navegaci\u00f3n que est\u00e1 en la parte superior izquierda para moverse entre contenidos.</p> <p>En desarrollo...</p>"},{"location":"#material-de-clase","title":"Material de clase","text":"<p>Puede acceder al material revisado en clases en este enlace.</p>"},{"location":"#contacto","title":"Contacto","text":"<p>Si encuentra alg\u00fan error, tiene una sugerencia y/o comentario por favor notificarlo a daniel.sanmartinr@usm.cl</p>"},{"location":"archivos/consulta-medica/","title":"Consulta m\u00e9dica","text":"<p>Una consulta m\u00e9dica tiene un archivo <code>pacientes.txt</code> con los datos personales de sus pacientes.  Cada l\u00ednea del archivo tiene el rut, el nombre y la edad de un paciente, separados por un s\u00edmbolo <code>:</code>. </p> <p>As\u00ed se ve el archivo:</p> <code>pacientes.txt</code> <pre><code>12067539-7:Anastasia L\u00f3pez:32\n15007265-4:Andr\u00e9s Morales:26\n8509454-8:Pablo Mu\u00f1oz:45\n7752666-8:Ignacio Navarro:49\n8015253-1:Alejandro Pacheco:51\n9217890-0:Patricio Pimienta:39\n9487280-4:Ignacio Rosas:42\n12393241-2:Ignacio Rubio:33\n11426761-9:Romina P\u00e9rez:35\n15690109-1:Francisco Ruiz:26\n6092377-9:Alfonso San Mart\u00edn:65\n9023365-3:Manuel Toledo:38\n10985778-5:Jes\u00fas Vald\u00e9s:38\n13314970-8:Abel V\u00e1zquez:30\n7295601-k:Edison Mu\u00f1oz:60\n5106360-0:Andrea Vega:71\n8654231-5:Andr\u00e9s Zambrano:55\n10105321-0:Antonio Almarza:31\n13087677-3:Jorge \u00c1lvarez:28\n9184011-1:Laura Andrade:47\n12028339-1:Jorge Argando\u00f1a:29\n10523653-0:Camila Avaria:40\n12187197-1:Felipe \u00c1vila:36\n5935556-2:Aquiles Barriga:80\n14350739-4:Eduardo Bello:29\n6951420-0:Cora Ben\u00edtez:68\n11370775-5:Hugo Berger:31\n11111756-k:Crist\u00f3bal B\u00f3rquez:34\n</code></pre> <p>Adem\u00e1s, cada vez que alguien se atiende en la consulta, la visita es registrada en el archivo <code>atenciones.txt</code>,  agregando una l\u00ednea que tiene el rut del paciente, la fecha de la visita (en formato <code>dia-mes-a\u00f1o</code>) y el precio  de la atenci\u00f3n, tambi\u00e9n separados por <code>:</code>. El archivo se ve as\u00ed:</p> <code>atenciones.txt</code> <pre><code>8015253-1:4-5-2010:69580\n12393241-2:6-5-2010:57274\n10985778-5:8-5-2010:73206\n8015253-1:10-5-2010:30796\n8015253-1:12-5-2010:47048\n12028339-1:12-5-2010:47927\n11426761-9:13-5-2010:39117\n10985778-5:15-5-2010:86209\n7752666-8:18-5-2010:41916\n8015253-1:18-5-2010:74101\n12187197-1:20-5-2010:38909\n8654231-5:20-5-2010:75018\n8654231-5:22-5-2010:64944\n5106360-0:24-5-2010:53341\n8015253-1:27-5-2010:76047\n9217890-0:30-5-2010:57726\n7752666-8:1-6-2010:54987\n8509454-8:2-6-2010:76483\n6092377-9:2-6-2010:62106\n11370775-5:3-6-2010:67035\n11370775-5:7-6-2010:47299\n8509454-8:7-6-2010:73254\n8509454-8:10-6-2010:82955\n11111756-k:10-6-2010:56520\n7752666-8:10-6-2010:40820\n12028339-1:12-6-2010:79237\n11111756-k:13-6-2010:69094\n5935556-2:14-6-2010:73174\n11111756-k:21-6-2010:70417\n11426761-9:22-6-2010:80217\n12067539-7:25-6-2010:31555\n11370775-5:26-6-2010:75796\n10523653-0:26-6-2010:34585\n6951420-0:28-6-2010:45433\n5106360-0:1-7-2010:48445\n8654231-5:4-7-2010:76458\n</code></pre> <p>Note que las fechas est\u00e1n ordenadas de menos a m\u00e1s reciente, ya que las nuevas l\u00edneas siempre se van agregando al final.</p> <ol> <li>Escriba la funci\u00f3n <code>costo_total_paciente(rut)</code> que entregue el costo total de las atenciones del paciente con el rut dado:     <pre><code>&gt;&gt;&gt; costo_total_paciente('8015253-1')\n297572\n&gt;&gt;&gt; costo_total_paciente('14350739-4')\n0\n</code></pre></li> <li>Escriba la funci\u00f3n <code>pacientes_dia(dia, mes, a\u00f1o)</code> que entregue una lista con los nombres de los pacientes que se atendieron el d\u00eda se\u00f1alado:     <pre><code>&gt;&gt;&gt; pacientes_dia(2, 6, 2010)\n['Pablo Mu\u00f1oz', 'Alfonso San Mart\u00edn']\n&gt;&gt;&gt; pacientes_dia(23, 6, 2010)\n[]\n</code></pre></li> <li> <p>Escriba la funci\u00f3n <code>separar_pacientes()</code> que construya dos nuevos archivos:</p> <ul> <li><code>jovenes.txt</code>, con los datos de los pacientes menores de 30 a\u00f1os;</li> <li><code>mayores.txt</code>, con los datos de todos los pacientes mayores de 60 a\u00f1os.</li> </ul> <p>Por ejemplo, el archivo <code>jovenes.txt</code> debe verse as\u00ed: <pre><code>15007265-4:Andr\u00e9s Morales:26\n15690109-1:Francisco Ruiz:26\n13087677-3:Jorge \u00c1lvarez:28\n12028339-1:Jorge Argando\u00f1a:29\n14350739-4:Eduardo Bello:29\n</code></pre> 4. Escribir una funci\u00f3n <code>ganancias_por_mes()</code> que construya un nuevo archivo llamado <code>ganancias.txt</code> que tenga el total de ganancias por cada mes en el siguiente formato: <pre><code>5-2010:933159\n6-2010:1120967\n7-2010:124903\n</code></pre></p> </li> </ol> Soluci\u00f3n <pre><code># Pregunta 1\ndef costo_total_paciente(rut):\n    atenciones = open(\"atenciones.txt\")\n    costo = 0 # Variable para guardar el costo\n    for linea in atenciones:\n        datos = linea.strip().split(\":\") # Separamos los datos\n        if rut == datos[0]: # Si es el rut que se consulta\n            costo += int(datos[2]) # Sumamos el costo\n    atenciones.close()\n    return costo\n\n# Pregunta 2\ndef pacientes_dia(dia, mes, a\u00f1o):\n    pacientes = open(\"pacientes.txt\")\n    atenciones = open(\"atenciones.txt\")\n    ruts = []\n    nombres = []\n    # Recorremos las atenciones para obtener los ruts \n    for linea in atenciones: \n        datos = linea.strip().split(\":\")\n        fecha = datos[1].split(\"-\") # Separamos las fechas\n        # Comparamos si corresponde a la fecha\n        if int(fecha[0]) == dia and int(fecha[1]) == mes and int(fecha[2]) == a\u00f1o:\n            if datos[0] not in ruts:\n                ruts.append(datos[0]) # Guardamos el rut\n    # Recorremos los pacientes \n    for linea in pacientes: \n        datos = linea.strip().split(\":\")\n        # Revisamos si el rut del paciente esta en la estructura donde guardamos los ruts\n        if datos[0] in ruts: \n            nombres.append(datos[1])\n    # Cierre de archivos\n    pacientes.close()\n    atenciones.close()\n    return nombres\n\n# Pregunta 3\ndef separar_pacientes():\n    # Abrir archivos\n    pacientes = open(\"pacientes.txt\")\n    jovenes = open(\"jovenes.txt\", \"w\")\n    mayores = open(\"mayores.txt\", \"w\")\n    for linea in pacientes: # Leer lineas del archivo\n        datos = linea.split(\":\")\n        # Filtrar segun edad\n        if int(datos[2]) &lt; 30:\n            jovenes.write(linea)\n        elif int(datos[2]) &gt; 60:\n            mayores.write(linea)\n    # Cierre de archivos\n    pacientes.close()\n    jovenes.close()\n    mayores.close()\n\n# Pregunta 4\ndef ganancias_por_mes():\n    atenciones = open(\"atenciones.txt\")\n    ganancias = dict() # Diccionario para guardar informacion\n    for linea in atenciones: # Recorremos las lineas del archivo\n        datos = linea.split(\":\") # Separamos los datos\n        fecha = datos[1].split(\"-\") # Separamos la fecha\n        mes_a\u00f1o = \"-\".join(fecha[1:]) # Solo nos quedamos con mes-a\u00f1o\n        if mes_a\u00f1o not in ganancias: # Guardamos los montos en cada mes-a\u00f1o\n            ganancias[mes_a\u00f1o] = 0\n        ganancias[mes_a\u00f1o] += int(datos[2])\n    atenciones.close()\n    # Ordenemos la informacion por fecha utilizando una lista de tuplas\n    lista = [] # [((a\u00f1o, mes), ganancia), ...] asi podemos ordenar la estructura rapidamente\n    for mes_a\u00f1o in ganancias:\n        fecha = mes_a\u00f1o.split(\"-\") # Separamos mes y a\u00f1o\n        tupla = ((int(fecha[1]), int(fecha[0])), ganancias[mes_a\u00f1o]) # Creamos la lista de tuplas\n        lista.append(tupla)\n    lista.sort() # Ordenara de forma ascendente por la fecha\n    gan = open(\"ganancias.txt\", \"w\")\n    # Guardamos la informacion en el archivo\n    for fecha, ganancia in lista:\n        a\u00f1o, mes = fecha\n        gan.write(\"{}-{}:{}\\n\".format(mes, a\u00f1o, ganancia))\n    gan.close()\n\n# Pruebas\nprint(costo_total_paciente('8015253-1'))\nprint(costo_total_paciente('14350739-4'))\nprint(pacientes_dia(2, 6, 2010))\nprint(pacientes_dia(23, 6, 2010))\nseparar_pacientes()\nganancias_por_mes()\n</code></pre>"},{"location":"archivos/donantes/","title":"Donantes","text":"<p>Una instituci\u00f3n de beneficiencia tiene un registro de las personas que han hecho donaciones en un archivo de  registros llamado <code>donantes.txt</code>.</p> <p>El archivo est\u00e1 ordenado por rut de menor a mayor. Para simplificar, vamos a suponer que los ruts tienen  cinco d\u00edgitos, y no incluyen el d\u00edgito despu\u00e9s de la raya.</p> <p>Por ejemplo, el contenido del archivo puede ser el siguiente:</p> Rut Nombre Monto 15274 Fulana de Tal 200 15891 Jean Dupont 150 16443 Erika Mustermann 400 16504 Perico Los Palotes 80 17004 Jan Kowalski 200 <p>Los problemas son los siguientes:</p> <ol> <li>Escribir una funci\u00f3n que cree el archivo con los datos de la tabla.</li> <li>Escribir una funci\u00f3n que muestre los datos del archivo.</li> <li>Escribir una funci\u00f3n que pida al usuario ingresar un rut, y muestre como salida el monto donado por esa persona.</li> <li>Escribir una funci\u00f3n que pida al usuario ingresar un rut, y elimine del archivo al donante con ese rut.</li> <li>Escribir un programa que pida al usuario ingresar los datos de un donante, y los agregue al archivo.</li> </ol> Soluci\u00f3n <pre><code>def crear_donantes(nombre_archivo):\n    archivo = open(nombre_archivo, \"w\")\n    archivo.write(\"15274,Fulana de Tal,200\\n\")\n    archivo.write(\"15891,Jean Dupont,150\\n\")\n    archivo.write(\"16443,Erika Mustermann,400\\n\")\n    archivo.write(\"16504,Perico Los Palotes,80\\n\")\n    archivo.write(\"17004,Jan Kowalski,200\\n\")\n    archivo.close()\n\ndef mostrar(nombre_archivo):\n    archivo = open(nombre_archivo)\n    for linea in archivo:\n        print(linea) # Mostramos cada linea del archivo\n    archivo.close()\n\ndef monto(rut):\n    archivo = open(\"donantes.txt\")\n    monto = 0 \n    for linea in archivo:\n        datos = linea.strip().split(\",\")\n        if datos[0] == rut: # Si el rut es el que buscamos\n            archivo.close() # Cerramos el archivo\n            monto = int(datos[-1]) # Guardamos el monto\n            return monto # Retornamos el monto\n    # Si no encontramos el rut\n    archivo.close() # Es necesario cerrar el archivo de todas maneras\n    return monto # Retornamos 0 en este caso\n\ndef eliminar(rut):\n    archivo = open(\"donantes.txt\")\n    lineas = list() # Lista para guardar los datos\n\n    # Primero hay que leer el archivo\n    for linea in archivo:\n        datos = linea.strip().split(\",\")\n        if datos[0] != rut: # Si no es el rut solicitado \n            lineas.append(linea) # Guardamos la linea completa\n    archivo.close()\n\n    # Ahora sobreescribimos el archivo pero sin la info que nos pidieron eliminar\n    archivo = open(\"donantes.txt\", \"w\")\n    for l in lineas:\n        archivo.write(l) # Guardamos las lineas que no contengan el rut solicitado\n    archivo.close()\n\ndef agregar(rut, nombre, monto):\n    info = list()\n    info.append((rut, nombre, monto)) # Agregamos al nuevo donante\n    # Leer el archivo\n    archivo = open(\"donantes.txt\")\n    for linea in archivo: # Leer cada linea\n        datos = linea.strip().split(\",\") \n        # Agregamos a los otros donantes en una lista de tuplas\n        info.append((int(datos[0]), datos[1], datos[2])) \n    archivo.close()\n    info.sort() # Ordenamos la lista por RUT\n\n    archivo = open(\"donantes.txt\", \"w\")\n    for rut, nombre, monto in info: # Recorremos la lista con informacion\n        archivo.write(\"{0},{1},{2}\\n\".format(rut, nombre, monto)) # Escribimos en el nuevo archivo\n    archivo.close()\n\n\n# Pruebas\ncrear_donantes(\"donantes.txt\") # Pregunta 1\nmostrar(\"donantes.txt\") # Pregunta 2\nprint(monto('16504')) # Pregunta 3\neliminar('16504') # Pregunta 4\n# Pregunta 5\nrut = int(input(\"Ingresar rut: \"))\nnombre = input(\"Ingresar nombre: \")\nmonto = input(\"Ingresar monto: \")\nagregar(rut, nombre, monto)\n</code></pre>"},{"location":"ciclos/ejemplos/","title":"Ejemplos","text":""},{"location":"ciclos/ejemplos/#operadores-de-incremento","title":"Operadores de incremento","text":"<ul> <li><code>+=</code></li> <li><code>-=</code></li> <li><code>*=</code></li> <li><code>/=</code></li> <li><code>//=</code></li> <li><code>%=</code></li> </ul> <p>Utilizar <code>a += b</code> es equivalente a escribir <code>a = a + b</code>. El uso de los otros operadores es an\u00e1logo, por ejemplo, <code>a *= b</code>       equivale a <code>a = a * b</code>... </p>"},{"location":"ciclos/ejemplos/#que-realizan-los-siguientes-codigos","title":"\u00bfQu\u00e9 realizan los siguientes c\u00f3digos?","text":""},{"location":"ciclos/ejemplos/#cuantas-veces-se-ejecuta-este-ciclo","title":"\u00bfCu\u00e1ntas veces se ejecuta este ciclo?","text":"<pre><code>i = 0\nwhile i &lt; n:\n    print(i)\n</code></pre> Soluci\u00f3n <p>Es un ciclo infinito ya que no se modifica <code>i</code>.</p>"},{"location":"ciclos/ejemplos/#que-realiza-este-ciclo","title":"\u00bfQu\u00e9 realiza este ciclo?","text":"<pre><code>i = 0\nwhile i &lt; n:\n    print(i)\n    i += 1\n</code></pre> Soluci\u00f3n <p>Se ejecuta <code>n</code> veces, desde <code>0</code> hasta <code>n-1</code>.</p>"},{"location":"ciclos/ejemplos/#que-realiza-este-ciclo_1","title":"\u00bfQu\u00e9 realiza este ciclo?","text":"<pre><code>i = 1\nwhile i &lt;= n:\n    print(i)\n    i += 1\n</code></pre> Soluci\u00f3n <p>Tambi\u00e9n se ejecuta <code>n</code> veces, pero desde <code>1</code> hasta <code>n</code>.</p>"},{"location":"ciclos/ejemplos/#cuantas-veces-se-ejecuta-el-siguiente-ciclo-para-que-sirve","title":"\u00bfCu\u00e1ntas veces se ejecuta el siguiente ciclo?, \u00bfPara qu\u00e9 sirve?","text":"<pre><code>n = int(input('n: '))\nwhile n &lt;= 0:\n    n = int(input('n: '))\n</code></pre> Soluci\u00f3n <p>Se ejecutar\u00e1 tantas veces como se ingresen valores negativos. Sirve para asegurar el ingreso de \\(n \\geq 0\\). </p>"},{"location":"ciclos/ejemplos/#que-problema-tiene-como-lo-arreglamos","title":"\u00bfQu\u00e9 problema tiene? \u00bfC\u00f3mo lo arreglamos?","text":"<p>El siguiente ciclo intenta imprimir todos los n\u00fameros impares entre \\(1\\) y \\(100\\):</p> <pre><code>i = 1\nwhile i != 100:\n    print(i)\n    i += 2\n</code></pre> Soluci\u00f3n <p>El problema es que se salta la condici\u00f3n del <code>while</code>. Se puede arreglar utilizando <code>while i &lt;= 100</code>.</p>"},{"location":"ciclos/ejemplos/#que-problema-tiene-el-siguiente-programa","title":"\u00bfQu\u00e9 problema tiene el siguiente programa?","text":"<pre><code># Programa que suma 5 n\u00fameros\ni = 1\nwhile i &lt;= 5:\n    suma = 0\n    num = int(input('Ingrese un n\u00famero: '))\n    i += 1\n    suma += num\nprint(suma)\n</code></pre> Soluci\u00f3n <p>El problema es la inicializaci\u00f3n de <code>suma</code>, ya que se inicia en <code>0</code> en cada iteraci\u00f3n.</p>"},{"location":"ciclos/ejemplos/#que-problema-tiene-el-siguiente-programa_1","title":"\u00bfQu\u00e9 problema tiene el siguiente programa?","text":"<pre><code># Programa que cuenta cu\u00e1ntos n\u00fameros pares se ingresan\ni = 1\ncontador = 0\nwhile i &lt;= 50:\n    num = int(input('Ingrese un n\u00famero: '))\n    if num % 2 == 0:\n        contador += 1\ni += 1\n</code></pre> Soluci\u00f3n <p>El problema es que el incremento est\u00e1 fuera del ciclo.</p>"},{"location":"ciclos/ejemplos/#que-problema-tiene-el-siguiente-codigo","title":"\u00bfQu\u00e9 problema tiene el siguiente c\u00f3digo?","text":"<pre><code>n = int(input('n: '))\ni = 1\nwhile i &lt;= n:\n    linea = str(i) + ': '\n    while j &lt;= n:\n        linea = linea + str(i * j) + ' '\n        n += 1\n    print(linea)\n</code></pre> <p>Este programa deber\u00eda imprimir una tabla cuadrada con los m\u00faltiplos hasta el n\u00famero ingresado como entrada, por ejemplo:</p> <pre><code>n: 5\n1: 1 2 3 4 5\n2: 2 4 6 8 10\n3: 3 6 9 12 15\n4: 4 8 12 16 20\n5: 5 10 15 20 25\n</code></pre> Soluci\u00f3n <pre><code>n = int(input('n: '))\ni = 1\nwhile i &lt;= n:\n    j = 1 # FALTABA\n    linea = str(i) + ': '\n    while j &lt;= n:\n        linea = linea + str(i * j) + ' '\n        j += 1 # CORREGIDO: confund\u00eda n con j\n    print(linea)\n    i += 1 # FALTABA\n</code></pre>"},{"location":"ciclos/exponencial/","title":"Aproximaci\u00f3n exponencial","text":"<p>Realice un programa que aproxime la funci\u00f3n \\(e^x\\) utilizando Series de Taylor:</p> \\[\\begin{equation}     e^x \\approx \\sum_{n=0}^N \\dfrac{x^n}{n!}, \\quad \\forall x\\in \\mathbb{R}, n \\in \\mathbb{N}_0, \\end{equation}\\] <p>donde \\(x\\) y \\(N\\) son entradas del programa.</p>"},{"location":"ciclos/exponencial/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese N: 10\nIngrese x: 1\nValor aproximacion: 2.7182818011463845\n</code></pre> <pre><code>Ingrese N: 100\nIngrese x: 1\nValor aproximacion: 2.7182818284590455\n</code></pre> <pre><code>Ingrese N: 100\nIngrese x: 2\nValor aproximacion: 7.389056098930649\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nN = int(input(\"Ingrese N: \"))\nx = float(input(\"Ingrese x: \"))\n\n# C\u00e1lculo de aproximaci\u00f3n\nn = 0\nexp = 0\nwhile n &lt;= N:\n    factorial = 1\n    i = 1\n    while i &lt;= n:\n        factorial *= i\n        i += 1\n    exp += (x ** n) / factorial\n    n += 1\n\n# Salida con el resultado\nprint(\"Valor aproximacion:\", exp)\n</code></pre>"},{"location":"ciclos/fizzbuzz/","title":"Fizzbuzz","text":"<p>La famosa serie FizzBuzz para un n\u00famero natural \\(N\\) es una sucesi\u00f3n desde \\(1\\) hasta \\(N\\) donde:</p> <ul> <li>Los n\u00fameros que sean m\u00faltiplos de 3 se cambian por Fizz.</li> <li>Los n\u00fameros que sean m\u00faltiplos de 5 se cambian por Buzz.</li> <li>Los n\u00fameros que sean m\u00faltiplos de 3 y 5 se cambian por FizzBuzz. Escriba un programa que lea \\(N\\) e imprima la serie FizzBuzz. </li> </ul>"},{"location":"ciclos/fizzbuzz/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese n: 15\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n</code></pre> Soluci\u00f3n <pre><code>n = int(input('Ingrese n: '))\ni = 1\nwhile i &lt;= n:\n   if i % 3 == 0 and i % 5 == 0:\n      print('FizzBuzz')\n   elif i % 3 == 0:\n      print('Fizz')\n   elif i % 5 == 0:\n      print('Buzz')\n   else:\n      print(i)\n   i += 1\n</code></pre>"},{"location":"ciclos/integrales/","title":"Integraci\u00f3n Num\u00e9rica","text":"<p>Utilizando la interpretaci\u00f3n geom\u00e9trica de la Integraci\u00f3n de Riemann, definida como el \u00e1rea bajo la curva de la funci\u00f3n, es posible aproximar una integral definida utilizando una sumatoria de \u00e1reas de rect\u00e1ngulos de la siguiente forma:</p> \\[     \\int_{a}^{b} f(x)\\,dx \\approx \\sum_{i=0}^{N-1}f(x_i)\\Delta x \\approx \\sum_{i=1}^{N}f(x_i)\\Delta x, \\] <p>donde \\(x_i\\) corresponden a los puntos dentro del intervalo \\([a, b]\\) donde se define la integral y \\(\\Delta x = (b - a)/N\\) el ancho de cada rect\u00e1ngulo. Es decir, se calcula el \u00e1rea de cada rect\u00e1ngulo como \\(f(x_i)\\,\\Delta x\\) y luego se suman. Un esquema de la idea se presenta a continuaci\u00f3n</p> <p></p> <p>Se puede notar que entre mayor sea el valor de \\(N\\) el c\u00e1lculo de la integral se hace de forma m\u00e1s precisa.</p>"},{"location":"ciclos/integrales/#ejercicios","title":"Ejercicios","text":""},{"location":"ciclos/integrales/#parte-1","title":"Parte 1","text":"<p>Utilizando la informaci\u00f3n entregada anteriormente desarrolle un programa en Python que calcule el valor de la integral definida para las siguientes funciones:</p> <ul> <li>\\(f(x)=\\sin(x) + x^2\\)</li> <li>\\(f(x)=x^5 + x^2 + e^{x}\\)</li> <li>\\(f(x)=\\sin(x) / x\\)</li> </ul> <p>donde \\(a\\), \\(b\\) y \\(N\\) deben ser ingresados por el usuario.</p> Soluci\u00f3n <pre><code>from math import sin\n\nN = int(input(\"Ingrese N: \"))\na = float(input(\"Ingrese a: \"))\nb = float(input(\"Ingrese b: \"))\n\ndx = (b - a) / N\nx = a\nintegral = 0\nwhile x &lt; b:\n    integral += (sin(x) + x ** 2) * dx\n    x += dx\n\nprint(integral)\n\nx = a + dx\nintegral = 0\nwhile x &lt;= b:\n    integral += (sin(x) + x ** 2) * dx\n    x += dx\n\nprint(integral)\n</code></pre>"},{"location":"ciclos/integrales/#parte-2","title":"Parte 2","text":"<p>Extienda la misma idea pero para aproximar la siguiente integral doble:</p> \\[ \\int_{a}^{b}\\int_{c}^{d} f(x,y)\\,dy\\,dx \\approx \\sum_{i=0}^{N_x-1}\\sum_{j=0}^{N_y-1}f(x_i, y_j)\\Delta y \\Delta x,\\quad \\Delta x = \\frac{b - a}{N_x}, \\quad \\Delta y = \\frac{d - c}{N_y}. \\] <p>Pruebe su programa calculando la siguiente integral doble </p> \\[\\int_{0}^{1}\\int_{0}^{1} -(x^2 + y^2)\\,dy\\,dx\\] <p>sabiendo que el resultado es \\(-2/3\\).</p> <p>Pruebe otras funciones y verifique con la siguiente aplicaci\u00f3n: Wolfram Alpha</p> Soluci\u00f3n <pre><code>Nx = int(input(\"Ingrese Nx: \"))\nNy = int(input(\"Ingrese Ny: \"))\na = float(input(\"Ingrese a: \"))\nb = float(input(\"Ingrese b: \"))\nc = float(input(\"Ingrese c: \"))\nd = float(input(\"Ingrese d: \"))\n\ndx = (b - a) / Nx\ndy = (d - c) / Ny\nx = a\nintegral = 0\nwhile x &lt; b:\n    y = c\n    while y &lt; d:\n        integral += -(x ** 2 + y ** 2) * dy * dx\n        y += dy\n    x += dx\n\nprint(integral)\n\nintegral = 0\nx = a + dx\nwhile x &lt;= b:\n    y = c + dy\n    while y &lt;= d:\n        integral += -(x ** 2 + y ** 2) * dy * dx\n        y += dy\n    x += dx\n\nprint(integral)\n</code></pre>"},{"location":"ciclos/pirata/","title":"Pirata","text":"<p>Un pirata escondi\u00f3 su valioso tesoro en alg\u00fan punto \\((a,b)\\) del mapa cartesiano (con \\(a\\), \\(b\\) n\u00fameros enteros entre \\(0\\) y \\(100\\)). Dise\u00f1e un programa que genere un punto \\(a\\), \\(b\\) dentro del intervalo \\([0,100]\\) de manera aleatoria y pregunte el escondite del tesoro. Se debe adivinar la posici\u00f3n del tesoro solicitando una posici\u00f3n \\((x, y)\\). Si el lugar ingresado coincide con la ubicaci\u00f3n del tesoro se muestra la frase <code>\"Tesoro encontrado\"</code> y el algoritmo termina. En caso contrario, se imprime a qu\u00e9 distancia del tesoro se encuentra el punto ingresado y se vuelve a leer otro posible lugar. Lea el valor de cada coordenada por separado.</p>"},{"location":"ciclos/pirata/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese x: 50 \nIngrese y: 50 \nTesoro a 26.93 \nIngrese x: 20 \nIngrese y: 60 \nTesoro a 5.0 \nIngrese x: 20 \nIngrese y: 55 \nTesoro a 7.07 \nIngrese x: 25 \nIngrese y: 60 \nTesoro encontrado\n</code></pre> <p>Nota: No se base en los valores el ejemplo ya que los valores \\(a\\), \\(b\\) son aleatorios y cambian en cada ejecuci\u00f3n.</p> Soluci\u00f3n <pre><code>from random import randint\nfrom math import sqrt\n# Posicion del tesoro\na = randint(0, 100)\nb = randint(0, 100)\nencontrado = False # Variable \nwhile not encontrado:\n    # Intento de adivinar\n    x = int(input('Ingrese x: '))\n    y = int(input('Ingrese y: '))\n    # Verificar\n    if x == a and y == b:\n        encontrado = True\n    else:\n        # Calculo de distancia\n        d = round(sqrt((a - x) ** 2 + (b - y) ** 2), 2)\n        print('Tesoro a', d)\n# Luego de terminar el ciclo, el tesoro fue encontrado\nprint('Tesoro encontrado')\n</code></pre>"},{"location":"ciclos/poligono/","title":"Pol\u00edgono","text":"<p>Desarrolle un programa que calcule el per\u00edmetro de un pol\u00edgono. Se debe comenzar preguntando cu\u00e1ntos puntos tiene la figura. Luego, el programa leer\u00e1 \\(x\\) e \\(y\\) de los \\(n\\) puntos \\((x_1, y_1), (x_2, y_2), ... , (x_n,y_n)\\) y mostrar\u00e1 el per\u00edmetro.</p>"},{"location":"ciclos/poligono/#ejemplo","title":"Ejemplo","text":"<pre><code>N\u00famero de puntos: 2 \nx: 0\ny: 0\nx: 10\ny: 0\nPer\u00edmetro: 10.0\n</code></pre> Soluci\u00f3n <pre><code>from math import sqrt\n\nn = int(input('lados: '))\nprint('Punto 1')\nx1 = float(input('x: '))\ny1 = float(input('y: '))\nx0 = x1\ny0 = y1\nperimetro = 0\ni = 2\nwhile i &lt;= n:\n   print('Punto', i)\n   x2 = float(input('x: '))\n   y2 = float(input('y: '))\n   d = sqrt((x2-x1)**2 + (y2-y1)**2)\n   perimetro += d\n   x1 = x2\n   y1 = y2\n   i += 1\nd = sqrt((x1-x0)**2 + (y1-y0)**2)\nperimetro += d\nprint('Per\u00edmetro:', perimetro)\n</code></pre>"},{"location":"ciclos/primos/","title":"N\u00fameros primos","text":"<p>Desarrolle un programa que indique si un n\u00famero \\(n\\) es primo o compuesto.</p>"},{"location":"ciclos/primos/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese un n\u00famero: 10\n10 es compuesto\n</code></pre> <pre><code>Ingrese un n\u00famero: 7\n7 es primo\n</code></pre> Soluci\u00f3n <pre><code>n = int(input(\"Ingrese un n\u00famero: \"))\nes_primo = True\nd = 2\nwhile (d &lt;= n // 2) and es_primo:\n    if n % d == 0:\n        es_primo = False\n    d += 1\nif es_primo:\n    print(n, \"es primo\")\nelse:\n    print(n, \"es compuesto\")\n</code></pre>"},{"location":"ciclos/rango/","title":"Rango","text":"<p>En estad\u00edstica descriptiva, se define el rango de un conjunto de datos reales como la diferencia entre el mayor y el menor de los datos.</p> <p>Por ejemplo, si los datos son: \\([5.96, 6.74, 7.43, 4.99, 7.20, 0.56, 2.80]\\) entonces el rango es \\(7.43 - 0.56 = 6.87\\). Escriba un programa que:</p> <ul> <li>pregunte al usuario cu\u00e1ntos datos ser\u00e1n ingresados,</li> <li>pida al usuario ingresar los datos uno por uno, y</li> <li>entregue como resultado el rango de los datos.</li> </ul> <p>Suponga que todos los datos ingresados son v\u00e1lidos.</p>"},{"location":"ciclos/rango/#ejemplo","title":"Ejemplo","text":"<pre><code>Cuantos valores ingresara? 7\nValor 1: 5.96 \nValor 2: 6.74 \nValor 3: 7.43 \nValor 4: 4.99 \nValor 5: 7.20\nValor 6: 0.56 \nValor 7: 2.80\nEl rango es 6.87\n</code></pre> Soluci\u00f3n <pre><code># Numero de valores\nn = int(input(\"Cuantos valores ingresara? \"))\ni = 1\n\n# Variables para buscar menor y mayor\nmayor = float(\"-inf\") # Comenzar con un numero muy peque\u00f1o\nmenor = float(\"inf\") # Comenzar con un numero muy grande\n\n# Ingresar valores\nwhile i &lt;= n:\n    v = float(input(\"Valor \" + str(i) + \": \"))\n    if v &gt; mayor:\n        mayor = v\n    if v &lt; menor:\n        menor = v\n    i += 1\n\n# Calcular rango y dejar con dos decimales\nrango = round(mayor - menor, 2)\nprint(\"El rango es\", rango)\n</code></pre>"},{"location":"ciclos/robot/","title":"Robot","text":"<p>Un robot ha sido dise\u00f1ado para moverse a lo largo de una cuadr\u00edcula, recibiendo como entrada alguna de las letras N, S, E, O, que le ordenan moverse un metro hacia el norte, sur, este, oeste, respectivamente. La letra F le pone fin al movimiento del robot. Escriba un programa que simule el movimiento el robot, leyendo letras ingresadas una por una. Al finalizar el movimiento, debe imprimir la distancia recorrida y la distancia de la ruta \u00f3ptima (camino m\u00e1s corto posible para llegar al mismo destino).</p> <p>Suponga que la cuadr\u00edcula se encuentra sobre un plano cartesiano, y el robot inicia mirando en direcci\u00f3n N.</p>"},{"location":"ciclos/robot/#ejemplo","title":"Ejemplo","text":"<pre><code>Movimiento: N\nMovimiento: E\nMovimiento: E\nMovimiento: E\nMovimiento: S\nMovimiento: S\nMovimiento: O\nMovimiento: O\nMovimiento: F\nDistancia recorrida: 8 [m] \nDistancia \u00f3ptima: 2 [m]\n</code></pre> Soluci\u00f3n <pre><code># Posicion inicial \nx = 0\ny = 0\n# Distancia recorrida por el robot\ndist = 0\n# Variable para mantener los movimientos\nmov = '' # Se inicializa vacia\n# Mientras no se ingrese el caracter de detencion\nwhile mov != 'F':\n    # Entrada de movimientos\n    mov = input('Movimiento: ')\n    if mov =='N':\n        y += 1\n        dist += 1\n    elif mov == 'S':\n        y -= 1\n        dist += 1\n    elif mov == 'O':\n        x -= 1\n        dist += 1\n    elif mov == 'E':\n        x += 1\n        dist += 1\n# Utilizamos la distancia de Manhattan ya que nos movemos en una cuadr\u00edcula\n# Se obtiene con la posicion final con respecto al origen\noptima = abs(x) + abs(y)\n# Distancias\nprint('Distancia recorrida:', dist, '[m]')\nprint('Distancia \u00f3ptima:', optima, '[m]')\n</code></pre>"},{"location":"ciclos/ruteos/","title":"Ruteos","text":""},{"location":"ciclos/ruteos/#ejercicio-1","title":"Ejercicio 1","text":"<p>Se cuenta con un programa que suma los gastos en que una persona incurri\u00f3 durante un viaje (cuando se pod\u00eda viajar). Como no se sabe de antemano la cantidad de gastos, el programa termina cuando se ingresa un \\(0\\) (o un valor negativo).</p> <p>(a) Rutear el siguiente programa, para \\(100\\), \\(500\\), \\(200\\), \\(0\\).</p> <pre><code>total = 0\ngasto = int(input('Ingrese un gasto (0 para terminar): '))\nwhile gasto &gt; 0:\n    total += gasto\n    gasto = int(input('Ingrese un gasto (0 para terminar): '))\nprint('Total de gastos:', total)\n</code></pre> <p>(b) Analizar la siguiente forma alternativa de implementar la soluci\u00f3n, que usa un flag.</p> <pre><code>total = 0\ncontinuar = True\nwhile continuar:\n    gasto = int(input('Ingrese un gasto (0 para terminar): '))\n    if gasto &lt;= 0:\n        continuar = False\n    else:\n        total += gasto\nprint('Total de gastos:', total)\n</code></pre>"},{"location":"ciclos/ruteos/#ejercicio-2","title":"Ejercicio 2","text":"<p>Rutear el siguiente programa, para \\(n = 30\\). Cada vez que se ejecuta <code>randint</code>, inventar un n\u00famero en el rango apropiado.</p> <pre><code>from random import randint\nn = int(input('n: '))\ncont = 0\nwhile n &gt; 0:\n    t = randint(1,n)\n    print(t)    \n    n -= t\n    cont += 1\nprint(cont, 'terminos')\n</code></pre>"},{"location":"ciclos/serie/","title":"Serie","text":"<p>Escriba un programa que lea un n\u00famero n e imprima los primeros n t\u00e9rminos de la siguiente serie: \\(1, 2, 4, 7, 11, ...\\) que comienza en \\(1\\) y se forma sumando \\(1\\), luego \\(2\\), luego \\(3\\), luego \\(4\\), y as\u00ed sucesivamente.</p>"},{"location":"ciclos/serie/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese n: 9\n1\n2\n4\n7\n11\n16\n22\n29\n37\n</code></pre> Soluci\u00f3n <pre><code>n = int(input('Ingrese n: '))\ni = 1\nt = 1\nwhile i &lt;= n:\n   print(t)\n   t += i\n   i += 1\n</code></pre>"},{"location":"ciclos/van/","title":"Valor Actual Neto","text":"<p>En finanzas, el valor actual neto (\\(VAN\\)) es un indicador de cuan rentable ser\u00e1 un proyecto. Se calcula sumando los flujos de dinero de cada mes divididos por \\((1 + r)^n\\), donde \\(n\\) es el n\u00famero del mes y \\(r\\) es la tasa de descuento mensual, y restando la inversi\u00f3n inicial.</p> <p>Por ejemplo, en un proyecto en que la inversi\u00f3n iniciales \\(\\$900\\), los flujos de dinero estimados para los primeros cuatro meses son \\(\\$550\\), \\(\\$230\\), \\(\\$341\\) y \\(\\$190\\), y la tasa de descuento mensual es de \\(4\\%\\), el valor actual neto es:</p> \\[\\begin{equation}     VAN = -900 + \\dfrac{550}{(1 + 0.04)^1} + \\dfrac{230}{(1 + 0.04)^2}          + \\dfrac{341}{(1 + 0.04)^3} + \\dfrac{190}{(1 + 0.04)^4} \\end{equation}\\] <p>Si el \\(VAN\\) da negativo, entonces no es conveniente comenzar el proyecto.</p> <p>Escriba un programa que pida al usuario ingresar la inversi\u00f3n inicial y el porcentaje de tasa de descuento. A continuaci\u00f3n, debe preguntar el flujo de dinero estimado para cada mes y mostrar cu\u00e1l es la parte entera del \\(VAN\\) hasta ese momento. El programa debe terminar apenas el \\(VAN\\) comience a dar positivo.</p> <p>Suponga que todos los datos ingresados son v\u00e1lidos.</p>"},{"location":"ciclos/van/#ejemplo","title":"Ejemplo","text":"<pre><code>Inversion inicial: 900 \n% tasa de descuento: 4\nFlujo mes 1: 550 \nVAN: -371\nFlujo mes 2: 230 \nVAN: -158\nFlujo mes 3: 341 \nVAN: 144\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\ninv = int(input(\"Inversion inicial: \")) # Inversion inicial\ntasa = float(input(\"% tasa de descuento: \")) # Tasa\nr = tasa / 100 # % a decimal\nvan = -inv \nn = 1 \nwhile van &lt; 0:\n    # Entrada de flujo de dinero\n    flujo = int(input(\"Flujo mes \" + str(n) + \": \"))\n    # Calculo de formular\n    van += flujo / (1 + r) ** n \n    # Aumentar el numero de mes\n    n += 1 \n    # Salida de datos\n    print(\"VAN: \", int(van)) # VAN calculado. Se redondea y transforma en entero\n</code></pre>"},{"location":"condicionales/","title":"Ejercicios Condicionales","text":""},{"location":"condicionales/#objetivos-de-aprendizaje","title":"Objetivos de aprendizaje","text":"<ul> <li>En el contexto de un problema, expresar una condici\u00f3n l\u00f3gica que modele una situaci\u00f3n particular, a partir de comparaciones y operadores l\u00f3gicos.</li> <li>Organizar la l\u00f3gica de decisiones de un programa en Python en torno a decisiones simples (un camino), dobles, en cascada o anidadas, seg\u00fan sea necesario.</li> <li>Ser capaz de dar seguimiento (ruteo) a un programa o algoritmo que comprenda decisiones.</li> <li>Resolver problemas en Python a trav\u00e9s de algoritmos que deban tomar decisiones simples o dobles, expresando adecuadamente la condici\u00f3n que permite decidir.</li> </ul>"},{"location":"condicionales/ajedrez/","title":"Ajedrez","text":"<p>Un tablero de ajedrez es una grilla de ocho filas y ocho columnas, numeradas de \\(1\\) a \\(8\\). Dos de las piezas del juego de ajedrez son el alfil y la torre. El alfil se desplaza en diagonal, mientras que la torre se desplaza horizontal o verticalmente. Una pieza puede ser capturada por otra si est\u00e1 en una casilla a la cual otra puede desplazarse:</p> <p></p> <p>Escriba un programa que reciba como entrada las posiciones en el tablero de un alfil y de la torre, e indique cu\u00e1l pieza captura a la otra. Suponga que todos los datos ingresados son v\u00e1lidos.</p>"},{"location":"condicionales/ajedrez/#ejemplos","title":"Ejemplos","text":"<pre><code>Fila alfil: 7\nColumna alfil: 6\nFila torre: 4\nColumna torre: 3\nAlfil captura\n</code></pre> <pre><code>Fila alfil: 3\nColumna alfil: 4\nFila torre: 7\nColumna torre: 4\nTorre captura\n</code></pre> <pre><code>Fila alfil: 3\nColumna alfil: 3\nFila torre: 8\nColumna torre: 5\nNinugna captura\n</code></pre> Soluci\u00f3n <pre><code># Entrada de posici\u00f3n de piezas de ajedrez\nfila_alfil = int(input(\"Fila alfil: \"))\ncolumna_alfil = int(input(\"Columna alfil: \"))\nfila_torre = int(input(\"Fila torre: \"))\ncolumna_torre = int(input(\"Columna torre: \"))\n# Comprobar si el alfil come a la torre\nif abs(fila_alfil - fila_torre) == abs(columna_alfil - columna_torre):\n    print(\"Alfil captura\")\nelif fila_alfil == fila_torre or columna_alfil == columna_torre:\n    print(\"Torre captura\")\nelse:\n    print(\"Ninugna captura\")\n</code></pre>"},{"location":"condicionales/calculadora/","title":"Calculadora","text":"<p>Escriba un programa que simule una calculadora b\u00e1sica, este puede realizar operaci\u00f3n de suma, resta, multiplicaci\u00f3n y divisi\u00f3n. El programa debe recibir como entrada \\(2\\) n\u00fameros enteros y un operador, que puede ser <code>+</code>, <code>-</code>, <code>*</code> o <code>/</code>. La salida del programa debe ser el resultado de la operaci\u00f3n.</p>"},{"location":"condicionales/calculadora/#ejemplos","title":"Ejemplos","text":"<pre><code>Operando: 3\nOperador: +\nOperando: 2\n3 + 2 = 5\n</code></pre> <pre><code>Operando: 6\nOperador: -\nOperando: 7\n6 - 7 = -1\n</code></pre> <pre><code>Operando: 4\nOperador: *\nOperando: 5\n4 * 5 = 20\n</code></pre> <pre><code>Operando: 10\nOperador: /\nOperando: 4\n10 / 4 = 2.5\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos  \na = int(input(\"Operando: \")) # Primer n\u00famero real\no = input(\"Operador: \") # Operador tipo texto\nb = int(input(\"Operando: \")) # Segundo n\u00famero real\n\n# Obtener resultado segun el operador\nif o == \"+\":\n    res = a + b\nelif o == \"-\":\n    res = a - b\nelif o == \"*\":\n    res = a * b\nelse:\n    res = a / b\n\n# Resultado\nprint(a, o, b, \"=\", res)\n</code></pre>"},{"location":"condicionales/circulo/","title":"C\u00edrculo","text":"<p>Dada las coordenadas del centro y el radio de un c\u00edrculo, adem\u00e1s de las coordenadas de un punto, queremos saber d\u00f3nde est\u00e1 el punto respecto al c\u00edrculo. \u00bfEl punto est\u00e1 al interior, exterior o justo en la circunferencia?</p> <p></p> <p>Desarrolle un programa para resolver el problema planteado.</p> Soluci\u00f3n <pre><code>from math import sqrt\n\n# Entrada de datos\nprint('C\u00edrculo:')\nxc = float(input('x: '))\nyc = float(input('y: '))\nr = float(input('radio: '))\nprint('Punto:')\nxp = float(input('x: '))\nyp = float(input('y: '))\n\n# C\u00e1lculo distancia\nd = sqrt((xc - xp) ** 2 + (yc - yp) ** 2)\n\n# Posici\u00f3n del punto\nif d &lt; r:\n   print('El punto est\u00e1 dentro del c\u00edrculo')\nelif d &gt; r:\n   print('El punto est\u00e1 fuera del c\u00edrculo')\nelse:\n   print('El punto est\u00e1 justo sobre el per\u00edmetro del c\u00edrculo')\n</code></pre>"},{"location":"condicionales/ecuacion/","title":"Ecuaci\u00f3n de primer grado","text":"<p>Necesitamos un programa para resolver una ecuaci\u00f3n de primer grado de la forma:</p> \\[\\begin{equation}     ax + b = 0. \\end{equation}\\] <p>El programa recibe como entrada los valores reales \\(a\\) y \\(b\\), y debe validar si tiene soluci\u00f3n, es decir \\(a \\neq 0\\).</p> Soluci\u00f3n <pre><code># Entrada de datos\na = float(input('a: '))\nb = float(input('b: '))\n\nif a != 0: # Si la ecuaci\u00f3n tiene soluci\u00f3n \n   x = -b / a\n   print('x =', x)\nelse: # Si a == 0\n   print('a debe ser distinto de cero')\n</code></pre>"},{"location":"condicionales/ejemplos/","title":"Ejemplos varios","text":"<ol> <li> <p>Escriba una condici\u00f3n l\u00f3gica para la siguiente expresi\u00f3n: \"Yo tengo horas de atenci\u00f3n a estudiantes los lunes y los mi\u00e9rcoles, siempre que no sea feriado, pero por superstici\u00f3n tambi\u00e9n atiendo todos los martes 13\"</p> Soluci\u00f3n <pre><code>a = ( (dia == 'Lunes' or dia == 'Mi\u00e9rcoles') and not feriado ) or (dia == 'Martes' and fecha == 13)\n</code></pre> </li> <li> <p>Dado el siguiente programa:     <pre><code>n = int(input())\nif n &lt; 0:\n    n = abs(n)\nprint(n)\n</code></pre>     \u00bfCu\u00e1ntas veces en total se ejecuta la instrucci\u00f3n <code>n = abs(n)</code> en \\(10\\) ejecuciones distintas con las siguientes entradas: <code>5 -2 0 0 -3 -1 7 0 2 -2</code>? En el mismo escenario, \u00bfcu\u00e1ntas veces se ejecuta la instrucci\u00f3n <code>print(n)</code>?</p> Soluci\u00f3n <p>\\(4\\) y \\(10\\)</p> </li> <li> <p>El siguiente programa que determina el nivel de estudios de una persona a partir de su edad:     <pre><code>if edad &lt; 6:\n    print('Preescolar')\nelif edad &lt; 18:\n    print('Escolar')\nelif edad &lt; 25:\n    print('Universitario')\nelse:\n    print('Postgrado')\n</code></pre>     \u00bfQu\u00e9 condici\u00f3n debe cumplirse para que imprima Escolar? \u00bfY para que llegue al else?</p> Soluci\u00f3n <ul> <li>Entre \\(6\\) y \\(17\\)</li> <li>Mayor o igual a \\(25\\).</li> </ul> <p>\u00bfEs equivalente este c\u00f3digo?</p> <pre><code>if edad &lt; 6:\n    print('Preescolar')\nif edad &lt; 18:\n    print('Escolar')\nif edad &lt; 25:\n    print('Universitario')\nelse:\n    print('Postgrado')\n</code></pre> Soluci\u00f3n <p>No, por ejemplo \u00bfqu\u00e9 ocurre con \\(5\\)?</p> </li> <li> <p>Haga el ruteo del siguiente programa para las entradas que se indican.     <pre><code>dd = int(input('Ingrese d\u00eda: '))\nmm = int(input('Ingrese mes: '))\naaaa = int(input('Ingrese a\u00f1o: '))\n\nesBisiesto = (aaaa % 4 == 0)\nesBisiesto = esBisiesto and (aaaa%100 != 0 or aaaa % 400 == 0)\n\na\u00f1oOk = aaaa &gt;= 1800\nmesOk = (mm &gt; 0 and mm &lt;= 12)\ndiaOk = (dd &gt; 0 and dd &lt;= 31)\nif mm == 4 or mm == 6 or mm == 9 or mm == 11:\n    diaOk = diaOk and (dd &lt;= 30)\nif mm == 2:\n    if esBisiesto:\n        diaOk = diaOk and (dd &lt;= 29)\n    else:\n        diaOk = diaOk and (dd &lt;= 28)\nif a\u00f1oOk and mesOk and diaOk:\n    print('Fecha correcta')\nelse:\n    print('Fecha incorrecta')\n</code></pre>     Entradas:</p> <ol> <li><code>29 2 2020</code></li> <li><code>31 6 2020</code></li> <li><code>31 7 2020</code></li> </ol> </li> </ol>"},{"location":"condicionales/expresiones/","title":"Expresiones booleanas","text":""},{"location":"condicionales/expresiones/#ejemplos-de-transcripcion","title":"Ejemplos de transcripci\u00f3n","text":"<ol> <li>\"Ir\u00e9 en bicicleta a comprar si no est\u00e1 lloviendo y si el negocio est\u00e1 a menos de 5 km\"     <pre><code>clima != \"Lluvia\" and distancia &lt; 5\n</code></pre></li> <li>\"Hago deporte si es martes o jueves\"     <pre><code>dia == \"Martes\" or dia == \"Jueves\"\n</code></pre></li> </ol>"},{"location":"condicionales/expresiones/#leyes-de-morgan","title":"Leyes de Morgan","text":"<p>Lenguaje natural</p> <ul> <li>La negaci\u00f3n de la conjunci\u00f3n es la disyunci\u00f3n de las negaciones.</li> <li>La negaci\u00f3n de la disyunci\u00f3n es la conjunci\u00f3n de las negaciones.</li> </ul> <p>Formalmente</p> <ul> <li>\\(\\neg (a \\land b) \\iff (\\neg a) \\lor (\\neg b)\\)</li> <li>\\(\\neg (a \\lor b) \\iff (\\neg a) \\land (\\neg b)\\)</li> </ul> <p><code>Python</code></p> <p><pre><code>    not (a and b) == (not a) or (not b)\n</code></pre> <pre><code>    not (a or b) == (not a) and (not b)\n</code></pre></p>"},{"location":"condicionales/expresiones/#ejemplos","title":"Ejemplos","text":"<ol> <li>Para ser presidente de Chile se debe ser chileno por nacimiento y mayor de \\(35\\): <pre><code>nacionalidad == \"chilena\" and edad &gt; 35\n</code></pre></li> </ol> <p>\u00bfCu\u00e1ndo no se puede ser presidente de Chile?</p> <code>Python</code> <pre><code>not (nacionalidad == \"chilena\") or not (edad &gt; 35)\nnacionalidad != \"chilena\" or edad &lt;= 35\n</code></pre> <ol> <li>Dejo de comer cuando ya no tengo comida en el plato o cuando no tengo hambre <pre><code>plato != 'comida' or not hambre\n</code></pre></li> </ol> <p>\u00bfCu\u00e1ndo sigo comiendo?</p> <code>Python</code> <pre><code>not (plato != 'comida') and not (not hambre)\nplato == \"comida\" and hambre\n</code></pre>"},{"location":"condicionales/expresiones/#propiedades","title":"Propiedades","text":"<p>Los operadores <code>and</code> y <code>or</code> tienen las mismas propiedades de asociatividad y distributividad que los operadores aritm\u00e9ticos <code>*</code> y <code>+</code>.</p>"},{"location":"condicionales/expresiones/#ejemplo","title":"Ejemplo","text":"<p>\"Hago deporte si es martes o jueves y hay sol\"</p> <p><pre><code>(dia == \"Martes\" or dia == \"Jueves\") and clima == \"Sol\"\n</code></pre> es equivalente a  <pre><code>(dia == \"Martes\" and clima == \"Sol\") or (dia == \"Jueves\" and clima == \"Sol\")\n</code></pre></p>"},{"location":"condicionales/horas_extra/","title":"Pago de horas extra","text":"<p>Dada la cantidad de horas trabajadas en una semana por una persona, se debe calcular el monto que se le debe pagar por concepto de horas extra, es decir, por las horas trabajadas por sobre las \\(44\\) obligatorias.</p> <p>Se debe leer tambi\u00e9n la categor\u00eda del empleado (un entero entre \\(1\\) y \\(5\\)), pues dependiendo de la categor\u00eda es el monto a pagar por cada hora extra. Los de categor\u00eda \\(1\\) reciben \\(\\$ 5.000\\) por hora extra, los de categor\u00eda \\(2\\) reciben \\(\\$8.000\\) y los de categor\u00eda \\(3\\) reciben \\(\\$10.000\\). Los de categor\u00eda \\(4\\) y \\(5\\) no tienen derecho al pago por sus horas extra.</p> <p>El m\u00e1ximo n\u00famero de horas extra que se pueden pagar en una semana es \\(10\\). Si se trabajan m\u00e1s, no se recibe pago alguno.</p> Soluci\u00f3n <pre><code># Calcula el monto a pagar por concepto de horas extra\ncat = int(input('Categor\u00eda del empleado (1-5): '))\nhoras = int(input('Horas totales trabajadas en la semana: '))\nextra = horas - 44\nif extra &gt; 0: # Si hay horas extra\n    if cat &lt; 4:\n        if extra &gt; 10: # Limitar el maximo numero de horas extra a 10\n            extra = 10\n        # Verificar categor\u00eda    \n        if cat == 1:\n            monto = 5000 * extra\n        elif cat == 2:\n            monto = 8000 * extra\n        else:\n            monto = 10000 * extra\n        print('A pagar: $', monto)\n    else:\n        print('Por su categor\u00eda, no tiene derecho al pago de horas extra')\nelse:\n    print('No trabaj\u00f3 horas extra esta semana')\n</code></pre>"},{"location":"condicionales/llamadas/","title":"Costo llamadas internacionales","text":"<p>El costo de las llamadas telef\u00f3nicas internacionales depende de la zona geogr\u00e1fica en la que se encuentra el pa\u00eds de destino y del n\u00famero de minutos que se hablaron. Adem\u00e1s, las llamadas que se inician en horario nocturno tienen un descuento del \\(20\\%\\).</p> C\u00f3digo de zona Zona Precio por minuto \\(12\\) Am\u00e9rica del Norte \\(2\\) \\(15\\) Am\u00e9rica Central \\(2.2\\) \\(18\\) Am\u00e9rica del Sur \\(4.5\\) \\(19\\) Europa \\(3.5\\) \\(23\\) Asia \\(6\\) \\(25\\) \u00c1frica \\(6\\) \\(29\\) Ocean\u00eda \\(5\\) <p>Escriba un programa que lea como entrada la zona de una llamada, el horario (d\u00eda o noche) y la cantidad de minutos, e indique el costo total de la llamada. Debe validarse que la zona, el horario y la cantidad de minutos sean v\u00e1lidos. De lo contrario, termina con error.</p> Soluci\u00f3n <pre><code># Entrada de c\u00f3digo de zona\nzona = int(input('C\u00f3digo de zona: ')) \n\n# Verificaci\u00f3n de zona\nif zona == 12:\n    costo_minuto = 2\nelif zona == 15:\n    costo_minuto = 2.2\nelif zona == 18:\n    costo_minuto = 4.5\nelif zona == 19:\n    costo_minuto = 3.5\nelif zona == 23:\n    costo_minuto = 6\nelif zona == 25:\n    costo_minuto = 6\nelif zona == 29:\n    costo_minuto = 5\nelse:\n    print('Zona inv\u00e1lida')\n    costo_minuto = 0\n\n# Si hay minutos para cobrar\nif costo_minuto &gt; 0:\n    # Entrada de horario\n    horario = input('Horario de la llamada (dia/noche): ')\n    if horario != 'dia' and horario != 'noche': # Verificaci\u00f3n de horario\n        print('Horario inv\u00e1lido')\n    else:\n        # Entrada de cantidad de minutos\n        minutos = int(input('Cantidad de minutos: '))\n        if minutos &lt;= 0:\n            print('Minutos debe ser positivo')\n        else:\n            total = minutos * costo_minuto\n            if horario == 'noche': # Aplicaci\u00f3n del descuento\n                total = total * 0.8\n            print('Costo total:', total)\n</code></pre>"},{"location":"condicionales/mayor/","title":"Mayor","text":"<p>Determinar el mayor de \\(3\\) n\u00fameros enteros ingresados como entrada.</p> Soluci\u00f3n <pre><code># Programa que determina el mayor entre 3 n\u00fameros enteros\na = int(input('a: '))\nb = int(input('b: '))\nc = int(input('c: '))\n\nif a &gt; b:\n   if a &gt; c:\n      print(a)\n   else:\n      print(c)\nelse:\n   if b &gt; c:\n      print(b)\n   else:\n      print(c)\n\n# El siguiente c\u00f3digo quiso hacer lo mismo de otra manera\n# Tiene un error, \u00bfcu\u00e1l es?, \u00bfc\u00f3mo lo arregar\u00edas?\nif a &gt; b and a &gt; c:\n   print(a)\nelif b &gt; a and b &gt; c:\n   print(b)\nelse:\n   print(c)\n</code></pre>"},{"location":"condicionales/tablas/","title":"Tablas de verdad","text":""},{"location":"condicionales/tablas/#or","title":"<code>or</code>","text":"<p>Disyunci\u00f3n l\u00f3gica (\\(\\lor\\))</p> <code>a</code> <code>b</code> <code>a or b</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code>"},{"location":"condicionales/tablas/#and","title":"<code>and</code>","text":"<p>Conjunci\u00f3n l\u00f3gica (\\(\\land\\))</p> <code>a</code> <code>b</code> <code>a and b</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>False</code> <code>False</code>"},{"location":"condicionales/tablas/#not","title":"<code>not</code>","text":"<p>Negaci\u00f3n (\\(\\neg\\))</p> <code>a</code> <code>not a</code> <code>True</code> <code>False</code> <code>False</code> <code>True</code>"},{"location":"condicionales/tenis/","title":"Tenis","text":"<p>El joven periodista Solarrabietas debe relatar un partido de tenis, pero no conoce las reglas del deporte. En particular, no ha logrado aprender c\u00f3mo saber si un set ya termin\u00f3, y qui\u00e9n lo gan\u00f3.</p> <p>Un partido de tenis se divide en sets. Para ganar un set, un jugador debe ganar \\(6\\) juegos, pero adem\u00e1s debe haber ganado por lo menos dos juegos m\u00e1s que su rival. Si el set est\u00e1 empatado a \\(5\\) juegos, el ganador es el primero que llegue a \\(7\\). Si el set est\u00e1 empatado a \\(6\\) juegos, el set se define en un \u00faltimo juego, en cuyo caso el resultado final es \\(7\\)-\\(6\\).</p> <p>Sabiendo que el jugador A ha ganado \\(m\\) juegos, y el jugador B, \\(n\\) juegos, al periodista le gustar\u00eda saber:</p> <ul> <li>si A gan\u00f3 el set, o</li> <li>si B gan\u00f3 el set, o</li> <li>si el set todav\u00eda no termina, o</li> <li>si el resultado es inv\u00e1lido (por ejemplo, \\(8\\)-\\(6\\) o \\(7\\)-\\(3\\)).</li> </ul> <p>Desarrolle un programa que solucione el problema de Solarrabietas:</p> <pre><code>Juegos ganados por A: 4\nJuegos ganados por B: 5\nAun no termina\n</code></pre> <pre><code>Juegos ganados por A: 5\nJuegos ganados por B: 7\nGano B\n</code></pre> <pre><code>Juegos ganados por A: 5\nJuegos ganados por B: 6\nAun no termina\n</code></pre> <pre><code>Juegos ganados por A: 3\nJuegos ganados por B: 7\nInvalido\n</code></pre> <pre><code>Juegos ganados por A: 6\nJuegos ganados por B: 4\nGano A\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nm = int(input(\"Juegos ganados por A: \"))\nn = int(input(\"Juegos ganados por B: \"))\n\n# Condiciones\nif (m == 6 and n &lt; 5) or (m == 7 and n &gt;= 5 and n &lt; 7): # Casos en que gana A\n    print(\"Gano A\")\nelif (n == 6 and m &lt; 5) or (n == 7 and m &gt;= 5 and m &lt; 7): # Casos en que gana B\n    print(\"Gano B\")\nelif (m &lt; 7 and n &lt; 7): # Si todavia nadie gana, y los valores son v\u00e1lidos, el juego sigue\n    print(\"Aun no termina\") \nelse: # Otro resultado ser\u00eda inv\u00e1lido\n    print(\"Invalido\")\n</code></pre>"},{"location":"condicionales/tiro/","title":"Tiro al blanco","text":"<p>En un juego de video hay que dispararle a un tablero de tiro al blanco que se encuentra dado por cuatro \u00e1reas cuadradas conc\u00e9ntricas separadas por una distancia \\(d\\) (igual para todas las \u00e1reas). Suponga que el tiro al blanco se encuentra en un plano cartesiano de dos dimensiones cuyo centro \\((0,0)\\) es el centro mismo del tiro al blanco. Si las \u00e1reas conc\u00e9ntricas se enumeran desde la mas interna hasta la mas externa de \\(1\\) a \\(4\\), realice un programa en Python que retorne el n\u00famero del \u00e1rea en la cual ha ca\u00eddo el disparo. El usuario debe ingresar la distancia \\(d\\) y el punto \\((x,y)\\).</p> <p></p>"},{"location":"condicionales/tiro/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese la distancia: 5\nIngrese  x: 3\nIngrese  y: 4\n\u00c1rea 1\n</code></pre> <pre><code>Ingrese la distancia: 1\nIngrese  x: 6\nIngrese  y: 6\nFuera del \u00e1rea\n</code></pre> Soluci\u00f3n <pre><code># Entrada\nd = int(input(\"Ingrese la distancia: \"))\nx = int(input(\"Ingrese  x: \"))\ny = int(input(\"Ingrese  y: \"))\n# Comprobar el cuadrante en el que se encuentra el punto\nif abs(x) &lt;= d and abs(y) &lt;= d: # if x &gt;= -d and x &lt;= d and y &gt;= -d and y= &lt; d:\n    print(\"\u00c1rea 1\")\nelif abs(x) &lt;= 2 * d and abs(y) &lt;= 2 * d: # elif x &gt;= -2 * d and x &lt;= 2 * d and y &gt;= -2 * d and y &lt;= 2 * d:\n    print(\"\u00c1rea 2\")\nelif abs(x) &lt;= 3 * d and abs(y) &lt;= 3 * d: # elif x &gt;= -3 * d and x &lt;= 3 * d and y &gt;= -3 * d and y &lt;= 3 * d:\n    print(\"\u00c1rea 3\")\nelif abs(x) &lt;= 4 * d and abs(y) &lt;= 4 * d: # elif x &gt;= -4 * d and x &lt;= 4 * d and y &gt;= -4 * d and y &lt;= 4 * d:\n    print(\"\u00c1rea 4\")\nelse:\n    print(\"Fuera del \u00e1rea\")\n</code></pre>"},{"location":"condicionales/triangulo/","title":"Tri\u00e1ngulo","text":"<p>Dados \\(3\\) n\u00fameros reales que forman un tri\u00e1ngulo debemos indicar qu\u00e9 tipo de tri\u00e1ngulo es seg\u00fan sus lados (equil\u00e1tero, is\u00f3sceles o escaleno) y seg\u00fan sus \u00e1ngulos. Considerando \\(c\\) como el lado de mayor longitud: </p> <ul> <li>Si \\(a^2 + b^2 = c^2\\) es rect\u00e1ngulo</li> <li>Si \\(a^2 + b^2 &lt; c^2\\) es obtus\u00e1ngulo </li> <li>Si \\(a^2 + b^2 &gt; c^2\\) es acut\u00e1ngulo</li> </ul> <p>Debe validar que el tri\u00e1ngulo cumpla con la desigualdad triangular, esto es,</p> \\[\\begin{equation}     (a + b) &gt; c, \\quad (a + c) &gt; b, \\quad (b + c) &gt; a. \\end{equation}\\]"},{"location":"condicionales/triangulo/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese a: 3.9\nIngrese b: 6.0\nIngrese c: 1.2\nNo es un tri\u00e1ngulo v\u00e1lido.\n</code></pre> <pre><code>Ingrese a: 2.0\nIngrese b: 1.9\nIngrese c: 2.0\nEl tri\u00e1ngulo es is\u00f3sceles.\nAdem\u00e1s es acut\u00e1ngulo.\n</code></pre> <pre><code>Ingrese a: 3.0\nIngrese b: 5.0\nIngrese c: 4.0\nEl tri\u00e1ngulo es escaleno.\nAdem\u00e1s es rect\u00e1ngulo.\n</code></pre> <pre><code>Ingrese a: 3.14\nIngrese b: 3.14\nIngrese c: 3.14\nEl tri\u00e1ngulo es equilatero.\nAdem\u00e1s es acut\u00e1ngulo.\n</code></pre> Soluci\u00f3n <pre><code># Programa que valida un tri\u00e1ngulo y dice de qu\u00e9 tipo es\na = float(input('Ingrese a: '))\nb = float(input('Ingrese b: '))\nc = float(input('Ingrese c: '))\n\nif a + b &gt; c and a + c &gt; b and b + c &gt; a: # Cumple desigualdad triangular\n\n   # Se determina ahora el tipo de tri\u00e1ngulo de acuerdo a sus lados:\n   if a == b and b == c:\n      print('El tri\u00e1ngulo es equil\u00e1tero')\n   elif a == b or a == c or b == c:\n      print('El tri\u00e1ngulo es is\u00f3sceles')\n   else:\n      print('El tri\u00e1ngulo es escaleno')\n\n   # Se determina ahora el tipo de tri\u00e1ngulo de acuerdo a sus \u00e1ngulos:\n   # Primero se deja el lado mayor en hipotenusa y los restantes en a y b\n   if a &gt;= b and a &gt;= c:\n      temp = c\n      c = a\n      a = temp\n   elif b &gt;= a and b &gt;= c:\n      temp = c\n      c = b\n      b = temp\n\n   # Ahora se determina el tipo\n   if a ** 2 + b ** 2 == c ** 2:\n      print('Adem\u00e1s es rect\u00e1ngulo.')\n   elif a ** 2 + b ** 2 &lt; c ** 2:\n      print('Adem\u00e1s es obtus\u00e1ngulo.')\n   else:\n      print('Adem\u00e1s es acut\u00e1ngulo.')\nelse:\n   # No cumple la desigualdad triangular\n   print('No es un tri\u00e1ngulo v\u00e1lido.')\n</code></pre>"},{"location":"condicionales/triangulo_2/","title":"Tri\u00e1ngulos","text":"<p>Los tres lados \\(a\\), \\(b\\) y \\(c\\) de un tri\u00e1ngulo deben satisfacer la desigualdad triangular: En todo tri\u00e1ngulo la suma de las longitudes de dos lados cualesquiera es siempre mayor a la longitud del lado restante. Definido matem\u00e1ticamente, cualquier tri\u00e1ngulo cumple la siguiente propiedad:</p> \\[\\begin{equation}     a &lt; (b + c), \\quad b &lt; (a + c), \\quad c &lt; (a + b). \\end{equation}\\] <p>Escriba un programa que reciba como entrada los tres lados de un tri\u00e1ngulo, e indique: - si acaso el tri\u00e1ngulo es inv\u00e1lido; y - si no lo es, qu\u00e9 tipo de tri\u00e1ngulo es.</p> <pre><code>Ingrese a: 3.9\nIngrese b: 6.0\nIngrese c: 1.2\nNo es un triangulo valido.\n</code></pre> <pre><code>Ingrese a: 1.9\nIngrese b: 2\nIngrese c: 2\nEl triangulo es isoceles.\n</code></pre> <pre><code>Ingrese a: 3.0\nIngrese b: 5.0\nIngrese c: 4.0\nEl triangulo es escaleno.\n</code></pre> Soluci\u00f3n <pre><code>\n</code></pre>"},{"location":"diccionarios/autopista/","title":"Autopistas","text":"<p>Una concesionaria de autopista registra en la lista transitos las veces que cada veh\u00edculo pasa por uno de los p\u00f3rticos de cobro. Cada lista de la lista contiene la patente del veh\u00edculo seguida del n\u00famero de p\u00f3rtico. Por ejemplo:</p> <pre><code>transitos = [\n    ['BBJJ77',2], ['CCHH19',3], ['AAFF37',3], ['BBJJ77',1], \n    ['AAFF37',1], ['DDKK33',3], ['AAFF37',1], ['AAFF37',2]\n]\n</code></pre>"},{"location":"diccionarios/autopista/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escriba la funci\u00f3n <code>mayor_movilidad(transitos)</code>, que retorna una lista de listas con los tres veh\u00edculos que pasaron por m\u00e1s p\u00f3rticos. El primer elemento de cada lista es la patente y el segundo es la cantidad de p\u00f3rticos por los que paso.</p>"},{"location":"diccionarios/autopista/#ejemplo","title":"Ejemplo","text":"<pre><code>&gt;&gt;&gt; print(mayor_movilidad(transitos)) \n[['AAFF37', 4], ['BBJJ77', 2], ['DDKK33', 1]]\n</code></pre>"},{"location":"diccionarios/autopista/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escriba la funci\u00f3n <code>reportar(transitos)</code>, que retorna un diccionario que lista, ordenadamente, los autos que pasaron por cada p\u00f3rtico. La llave es el n\u00famero de p\u00f3rtico, y el valor es la lista de patentes, ordenada alfabeticamente y sin repeticiones.</p>"},{"location":"diccionarios/autopista/#ejemplo_1","title":"Ejemplo","text":"<pre><code>&gt;&gt;&gt; print(reportar(transitos))\n{2: ['AAFF37', 'BBJJ77'], 3: ['AAFF37', 'CCHH19', 'DDKK33'], 1: ['AAFF37', 'BBJJ77']}\n</code></pre> Soluci\u00f3n <pre><code>def mayor_movilidad(transitos):\n    # Conteo de patentes #\n    conteo = {} # Diccionario para realizar conteo\n    for transito in transitos: # Recorrido de la estructura\n        patente = transito[0] # Patente\n        if patente not in conteo: # Si la patente no existe \n            conteo[patente] = 0 # Creamos el contador\n        conteo[patente] += 1 # Sumamos uno cada vez que encontremos la patente\n    # Lista temporal para ordenar segun el conteo #\n    lista = [] # Estructura: [[conteo_1, patente_1], [conteo_2, patente_2], ...]\n    for patente in conteo: # Recorremos el diccionario\n        tmp = [conteo[patente], patente] # Dejamos el conteo primero para ordenar con sort\n        lista.append(tmp) # Agregamos la lista temporal\n    lista.sort() # Ordenamos ascendentemente\n    lista.reverse() # Ordenamos descendentemente\n    # Lista de salida segun el formato solicitado #\n    salida = []\n    for conteo, patente in lista[:3]: # Recorremos solo los primeros 3 que necesitamos\n        salida.append([patente, conteo]) # Volvemos al orden solicitado\n    return salida\n\n\ndef reportar(transitos):\n    reporte = {} # Diccionario a retornar\n    for transito in transitos: # Recorrido de la estructura\n        patente = transito[0]\n        portico = transito[1]\n        if portico not in reporte: # Si no existe el portico en el diccionario\n            reporte[portico] = [] # Se crea una lista vacia\n        if patente not in reporte[portico]: # Si la patente no existe en la lista\n            reporte[portico].append(patente) # Se agrega\n        reporte[portico].sort() # Ordenamos la lista de patentes en orden alfabetico\n    return reporte # Retornar diccionario\n\n# Estructura de prueba #\ntransitos = [\n    ['BBJJ77',2], \n    ['CCHH19',3], \n    ['AAFF37',3], \n    ['BBJJ77',1], \n    ['AAFF37',1], \n    ['DDKK33',3], \n    ['AAFF37',1], \n    ['AAFF37',2]\n]\n\n# Pruebas #\nprint(mayor_movilidad(transitos))\nprint(reportar(transitos))\n</code></pre>"},{"location":"diccionarios/conductores/","title":"Conductores","text":"<p>Considerando la siguiente estructura de datos:</p> <pre><code>conductores = {\n    #username: [nombre, puntaje, [marca, modelo]]\n    'azambrano': ['Andres Zambrano', 5.6, ['Hyundai', 'Elantra']],\n    'jojeda': ['Juan Ojeda', 1.1, ['Hyundai', 'Accent']],\n    #...\n}\n</code></pre> <p>a) Desarrolle la funci\u00f3n <code>agrega_conductor(conductores, nuevo_conductor)</code> donde <code>nuevo_conductor</code> corresponde a una lista con los siguientes datos <code>[username, nombre_completo, puntaje, [marca, modelo]]</code>. Por ejemplo; <pre><code>&gt;&gt;&gt; agrega_conductor(conductores,['fsoto', 'Fabiola Soto', 4.4, ['Peugeot', '308']])\nTrue\n</code></pre> La funci\u00f3n debe modificar el diccionario y retornar <code>True</code>. Si el <code>username</code> del conductor a agregar ya existe, no modifique el diccionario y s\u00f3lo retorne <code>False</code>.</p> <p>b) Desarrolle la funci\u00f3n <code>elimina_conductor(condutores, username)</code> que elimine el conductor con el <code>username</code> desde la estructura conductores. <pre><code>&gt;&gt;&gt; elimina_conductor(conductores, 'jojeda')\nTrue\n&gt;&gt;&gt; elimina_conductor(conductores, 'pmunoz')\nFalse\n</code></pre> c) Desarrolle la funci\u00f3n <code>ranking(conductores)</code> que recibe el diccionario conductores y entrega una lista de listas con los <code>usernames</code> y puntajes, ordenados de mayor a menor puntaje. Por ejemplo; <pre><code>&gt;&gt;&gt; ranking(conductores)\n[['Andres Zambrano', 5.6], ['Fabiola Soto', 4.4]]\n</code></pre></p> Soluci\u00f3n <pre><code>def agrega_conductor(conductores, nuevo_conductor):\n    username = nuevo_conductor[0]\n    nombre = nuevo_conductor[1]\n    puntaje = nuevo_conductor[2]\n    marca = nuevo_conductor[3][0]\n    modelo = nuevo_conductor[3][1]\n    if username in conductores:\n        return False\n    conductores[username] = [nombre, puntaje, [marca, modelo]]\n    return True\n\n\ndef elimina_conductor(conductores, username):\n    if username not in conductores:\n        return False\n    del conductores[username]\n    return True\n\n\ndef ranking(conductores):\n    r = []\n    for c in conductores:\n        r.append([conductores[c][1], conductores[c][0]])\n    r.sort()\n    r.reverse()\n    final = []\n    for datos in r:\n        puntaje = datos[0]\n        nombre = datos[1]\n        final.append([nombre, puntaje])\n    return final\n\n\nconductores = {\n    'azambrano': ['Andres Zambrano', 5.6, ['Hyundai', 'Elantra']],\n    'jojeda': ['Juan Ojeda', 1.1, ['Hyundai', 'Accent']],\n    # ...\n}\n\nprint(agrega_conductor(conductores,['fsoto', 'Fabiola Soto', 4.4, ['Peugeot', '308']]))\nprint(elimina_conductor(conductores, 'jojeda'))\nprint(elimina_conductor(conductores, 'pmunoz'))\nprint(ranking(conductores))\n</code></pre>"},{"location":"diccionarios/copa/","title":"Final Copa Am\u00e9rica","text":"<p>Dispone de los siguientes diccionarios:</p> <pre><code>Chile = {\n   1: 'Claudio Bravo',\n   4: 'Mauricio Isla',\n   17: 'Gary Medel',\n   18: 'Gonzalo Jaro',\n   15: 'Jean Beausejour',\n   8: 'Arturo Vidal',\n   21: 'Marcelo D\u00edaz',\n   20: 'Charles Aranguiz',\n   6: 'Jos\u00e9 Pedro Fuenzalida',\n   7: 'Alexis S\u00e1nchez',\n   11: 'Eduardo Vargas'\n}\n\nArgentina = {\n   1: 'Sergio Romero',\n   4: 'Gabriel Mercado',\n   17: 'Nicol\u00e1s Otamendi',\n   13: 'Ramiro Funes Mori',\n   16: 'Marcos Rojo     ',\n   6: 'Lucas Biglia',\n   14: 'Javier Mascherano',\n   19: '\u00c9ver Banega',\n   10: 'Lionel Messi',\n   9: 'Gonzalo Higua\u00edn',\n   7: '\u00c1ngel Di Mar\u00eda'\n}\n</code></pre> <p>Responda lo siguiente:</p> <ol> <li>Recuperar el jugador de un equipo con un n\u00famero particular</li> <li>\u00bfQu\u00e9 pasa si no est\u00e1?</li> <li>Mostrar en pantalla la alineaci\u00f3n de ambos equipos: \u201cCon el n\u00famero x, fulano\u201d</li> <li>Encontrar el n\u00famero de un jugador particular de un equipo.</li> <li>Mostrar las parejas de jugadores que usan el mismo n\u00famero</li> </ol> Soluci\u00f3n <pre><code>Chile = {\n    1: 'Claudio Bravo',\n    4: 'Mauricio Isla',\n    17: 'Gary Medel',\n    18: 'Gonzalo Jaro',\n    15: 'Jean Beausejour',\n    8: 'Arturo Vidal',\n    21: 'Marcelo D\u00edaz',\n    20: 'Charles Aranguiz',\n    6: 'Jos\u00e9 Pedro Fuenzalida',\n    7: 'Alexis S\u00e1nchez',\n    11: 'Eduardo Vargas'\n}\n\nArgentina = {\n    1: 'Sergio Romero',\n    4: 'Gabriel Mercado',\n    17: 'Nicol\u00e1s Otamendi',\n    13: 'Ramiro Funes Mori',\n    16: 'Marcos Rojo     ',\n    6: 'Lucas Biglia',\n    14: 'Javier Mascherano',\n    19: '\u00c9ver Banega',\n    10: 'Lionel Messi',\n    9: 'Gonzalo Higua\u00edn',\n    7: '\u00c1ngel Di Mar\u00eda'\n}\n\n# Preguntas #\n# 1 y 2\nnc = int(input(\"Ingrese n\u00famero para jugador chileno: \"))\nif nc in Chile:\n    print(Chile[nc])\nelse:\n    print(\"No existe jugador con el n\u00famero indicado\")\nna = int(input(\"Ingrese n\u00famero para jugador argentino: \"))\nif na in Argentina:\n    print(Argentina[na])\nelse:\n    print(\"No existe jugador con el n\u00famero indicado\")\n# 3\nprint(\"Alineaci\u00f3n Chile\")\nfor num in Chile:\n    print(\"Con el n\u00famero \" + str(num) + \", \" + Chile[num])\nprint(\"Argentina\")\nfor num in Argentina:\n    print(\"Con el n\u00famero \" + str(num) +  \", \" + Argentina[num])\n\n# 4\nequipo = input(\"Indique el equipo (Chile o Argentina): \")\njugador = input(\"Indique el nombre del jugador: \")\nif equipo == \"Chile\":\n    for n in Chile:\n        if Chile[n] == jugador:\n            print(\"El n\u00famero es:\", n)\nelif equipo == \"Argentina\":\n    for n in Argentina:\n        if Argentina[n] == jugador:\n            print(\"El n\u00famero es:\", n)\nelse:\n    print(\"Equipo inv\u00e1lido\")\n\n# 5\n# Primero recuperamos los numeros de camiseta sin repetir\nvalores = []\nfor numero in Chile:\n    valores.append(numero)\nfor numero in Argentina:\n    if numero not in valores: # Utilizamos el condicional para no repetir numeros entre equipos\n        valores.append(numero)\nvalores.sort() # Los ordenamos\n# Ahora accederemos a los numeros de camiseta\nfor v in valores:\n    # Mostramos solo las parejas que compartan numero de camiseta\n    if v in Chile and v in Argentina:\n        print(\"Con la camiseta \" + str(v) + \": \" + Chile[v] + \", \" + Argentina[v])\n</code></pre>"},{"location":"diccionarios/delitos/","title":"Delitos","text":"<p>Considerando las siguientes estructuras: <pre><code>calles = [\n    # [id_calle1, nombre_calle1], ...\n    [883345, 'La Montana'], [321333, 'Miraflores'], [5843, 'Avellaneda'],\n    [2283904, 'Del Valle'], [9430, 'Los Maitenes'], [2239102, 'Rio Tolten'],\n    [9432, 'Teniente Bello']\n]\nniveles_peligrosidad = {\n    #nivel: [id_calle1, id_calle2, id_calle3, ...]\n    2: [883345, 2283904, 5843],\n    1: [9430, 2239102,9432], \n    # ...\n}\ndelitos = [\n    { 'id_calle': 883345, 'fecha': '2015-03-23'},\n    { 'id_calle': 9432, 'fecha': '2015-02-12'},\n    { 'id_calle': 5843, 'fecha': '2015-03-21'}, \n    # ...\n]\n</code></pre> a) Desarrolle la funci\u00f3n <code>agregar_delito(delito, delitos, calles, niveles_peligrosidad)</code> que recibe la lista <code>delito</code> con los datos a agregar y las estructuras definidas anteriormente. Si la funci\u00f3n logra agregar el delito, debe retornar <code>True</code>, en caso de error debe retornar <code>False</code>. Para agregar un delito correctamente la calle debe existir y tener asociado un nivel de peligrosidad. <pre><code>&gt;&gt;&gt; agregar_delito([9430, [2016, 1, 1]], delitos, calles, niveles_peligrosidad)\nTrue\n&gt;&gt;&gt; agregar_delito([322, [2016, 3, 23]], delitos, calles, niveles_peligrosidad)\nFalse\n</code></pre> b) Desarrolle la funci\u00f3n <code>mes_mas_peligroso(a\u00f1o, delitos)</code> que recibe la lista de delitos y el a\u00f1o. Esta funci\u00f3n debe entregar el nombre del mes del a\u00f1o en el que ocurren m\u00e1s delitos. <pre><code>&gt;&gt;&gt; mes_mas_peligroso(2015, delitos)\n'Marzo'\n</code></pre></p> Soluci\u00f3n <pre><code>def agregar_delito(delito, delitos, calles, niveles_peligrosidad):\n    id_calle = delito[0]\n    fecha = delito[1]\n    a\u00f1o = fecha[0]\n    mes = fecha[1]\n    dia = fecha[2]\n    #buscamos si la calle existe\n    existe_calle = False\n    for calle in calles:\n        id = calle[0]\n        nombre = calle[1]\n        if id_calle == id:\n            existe_calle = True\n    existe_nivel = False\n    for n in niveles_peligrosidad:\n        if id_calle in niveles_peligrosidad[n]:\n            existe_nivel = True\n    if existe_calle and existe_nivel:\n        delitos.append({'id_calle': id_calle, 'fecha': str(a\u00f1o) + '-' + str(mes) + '-' + str(dia)})\n        return True\n    else:\n        return False\n\ndef mes_mas_peligroso(a\u00f1o, delitos):\n    p = {}\n    meses = {\n        1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',\n        5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto', 9: 'Septiembre',\n        10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'\n    }\n    for d in delitos:\n        if int(d['fecha'][:4]) == a\u00f1o:\n            mes = int(d['fecha'][5:7])\n            if mes not in p:\n                p[mes] = 0\n            p[mes] += 1\n    r = []\n    for i in p:\n        r.append([p[i], i])\n    r.sort()\n    r.reverse()\n    return meses[r[0][1]]\n\n\ncalles = [\n    # (id_calle1, nombre_calle1), \u2026\n    [883345, 'La Montana'], [321333, 'Miraflores'], [5843, 'Avellaneda'],\n    [2283904, 'Del Valle'], [9430, 'Los Maitenes'], [2239102, 'Rio Tolten'],\n    [9432, 'Teniente Bello']\n]\nniveles_peligrosidad = {\n    #nivel: [id_calle1, id_calle2, id_calle3, \u2026]\n    2: [883345, 2283904, 5843],\n    1: [9430, 2239102,9432], \n    # ...\n}\ndelitos = [\n    { 'id_calle': 883345, 'fecha': '2015-03-23'},\n    { 'id_calle': 9432, 'fecha': '2015-02-12'},\n    { 'id_calle': 5843, 'fecha': '2015-03-21'}, \n    # ...\n]\n\nprint(agregar_delito([9430, [2016, 1, 1]], delitos, calles, niveles_peligrosidad))\nprint(agregar_delito([322, [2016, 3, 23]], delitos, calles, niveles_peligrosidad))\nprint(mes_mas_peligroso(2015, delitos))\n</code></pre>"},{"location":"diccionarios/formula1/","title":"F\u00f3rmula 1","text":"<p>Los valores asociados con las llaves pueden ser tambi\u00e9n colecciones, como listas e incluso otros diccionarios.</p> <pre><code>F1 = {\n   'Mercedes': ['Lewis Hamilton', 'Valtteri Bottas'],\n   'Ferrari': ['Sebastian Vettel', 'Charles Leclerc'],\n   'Red Bull Racing': ['Max Verstappen', 'Alexander Albon'],\n   'McLaren': ['Carlos Sainz', 'Lando Norris'],\n   'Renault': ['Daniel Ricciardo', 'Esteban Ocon'],\n   'AlphaTauri': ['Pierre Gasly', 'Daniil Kvyat'],\n   'Racing Point': ['Sergio P\u00e9rez', 'Lance Stroll'],\n   'Alfa Romeo Racing': ['Kimi R\u00e4ikk\u00f6nen', 'Antonio Giovinazzi'],\n   'Haas F1 Team': ['Romain Grosjean', 'Kevin Magnussen'],\n   'Williams': ['George Russell', 'Nicholas Latifi']\n}\n</code></pre> <p>Realice lo siguiente:</p> <ol> <li>Imprimir los integrantes de un equipo particular.</li> <li>\u00bfC\u00f3mo saber a qu\u00e9 equipo pertenece un piloto en particular?</li> </ol> Soluci\u00f3n <pre><code>F1 = {\n   'Mercedes': ['Lewis Hamilton', 'Valtteri Bottas'],\n   'Ferrari': ['Sebastian Vettel', 'Charles Leclerc'],\n   'Red Bull Racing': ['Max Verstappen', 'Alexander Albon'],\n   'McLaren': ['Carlos Sainz', 'Lando Norris'],\n   'Renault': ['Daniel Ricciardo', 'Esteban Ocon'],\n   'AlphaTauri': ['Pierre Gasly', 'Daniil Kvyat'],\n   'Racing Point': ['Sergio P\u00e9rez', 'Lance Stroll'],\n   'Alfa Romeo Racing': ['Kimi R\u00e4ikk\u00f6nen', 'Antonio Giovinazzi'],\n   'Haas F1 Team': ['Romain Grosjean', 'Kevin Magnussen'],\n   'Williams': ['George Russell', 'Nicholas Latifi']\n}\n\n# Preguntas #\n# 1\nequipo = input(\"Ingrese el equipo: \")\nif equipo in F1:\n    print(\"Los integrantes del equipo\", equipo, \"son: \")\n    for integrante in F1[equipo]:\n        print(\"- \", integrante)\nelse:\n    print(\"El equipo no existe\")\n# 2\nintegrante = input(\"Ingrese integrante: \")\nfor equipo in F1:\n    if integrante in F1[equipo]:\n        print(integrante, \"pertenece a\", equipo)\n</code></pre>"},{"location":"diccionarios/frutas-verduras/","title":"Frutas y verduras","text":"<p>Se cuenta con un diccionario que asocia productos con una lista que contiene el precio y el stock.</p> <pre><code>verduler\u00eda = {\n   'Br\u00f3coli': [900, 10],\n   'Piment\u00f3n': [800, 5],\n   'Limones': [1500, 0],\n   'Lechuga': [700, 10],\n   'Palta': [3800, 7],\n   'Tomates': [1200, 20],\n   'Pepino': [500, 0],\n   'Zanahorias': [700, 12],\n   'Zapallo italiano': [450, 8],\n   'Papas': [950, 25],\n   'Frutillas': [3400, 2],\n   'Peras': [1500, 0],\n   'Manzanas': [1600, 4],\n   'Naranjas': [1800, 12],\n   'Pl\u00e1tanos': [1100, 3],\n   'Kiwis': [2800, 0],\n   'Mandarinas': [2200, 4]\n}\n</code></pre> <p>Realice lo siguiente:</p> <ol> <li>Determinar el precio de un producto en particular</li> <li>Agregar condici\u00f3n para validar existencia</li> <li>Determinar el stock de un producto en particular, indicando si no existe</li> <li>Determinar el producto m\u00e1s caro de la verduler\u00eda</li> <li>Suponga una lista de strings con las compras que se quieren hacer, por ejemplo: <code>compras = ['Manzanas', 'Mangos', 'Papas', 'Tomates', 'Pepino', 'Piment\u00f3n', 'Pl\u00e1tanos']</code>. Se hab\u00eda escrito un programa que procesaba la lista de compras, indicando tambi\u00e9n si alg\u00fan producto no estaba disponible en la verduler\u00eda, ya sea porque no lo venden o porque no hay stock actualmente. Al finalizar imprim\u00eda una lista con las compras efectuadas y el monto total a pagar. Reconstruya el c\u00f3digo a continuaci\u00f3n, separando los n\u00fameros con un \u00fanico espacio y utilizando guiones que anteceden a las instrucciones para denotar los niveles de indentaci\u00f3n.</li> </ol> <pre><code>compras = ['Manzanas', 'Mangos', 'Papas', 'Tomates', 'Pepino', 'Piment\u00f3n', 'Pl\u00e1tanos']\nbolsa.append(elemento)\nprint(bolsa)\nelse:\ntotal = 0\nelse:\ntotal += lista[0]\nfor elemento in compras:\nbolsa = []\nlista[1] -= 1\nprint('Negocio no vende', elemento)\nlista = verduler\u00eda[elemento]\nif elemento in verduler\u00eda:\nprint(total)\nprint('No hay', elemento)\nif lista[1] &gt; 0:\n</code></pre> Soluci\u00f3n <pre><code># Datos #\nverduler\u00eda = {\n   'Br\u00f3coli': [900, 10],\n   'Piment\u00f3n': [800, 5],\n   'Limones': [1500, 0],\n   'Lechuga': [700, 10],\n   'Palta': [3800, 7],\n   'Tomates': [1200, 20],\n   'Pepino': [500, 0],\n   'Zanahorias': [700, 12],\n   'Zapallo italiano': [450, 8],\n   'Papas': [950, 25],\n   'Frutillas': [3400, 2],\n   'Peras': [1500, 0],\n   'Manzanas': [1600, 4],\n   'Naranjas': [1800, 12],\n   'Pl\u00e1tanos': [1100, 3],\n   'Kiwis': [2800, 0],\n   'Mandarinas': [2200, 4]\n}\n\n# Preguntas #\n# 1, 2 y 3\nproducto = input(\"Ingrese nombre de producto: \")\nif producto in verduler\u00eda:\n    print(\"El precio de\", producto, \"es\", verduler\u00eda[producto][0], \"y su stock es\", verduler\u00eda[producto][1])\nelse:\n    print(\"No hay stock del producto\")\n\n# 4 \nmayor_precio = -1\nmas_caro = \"\"\nfor producto in verduler\u00eda:\n    if verduler\u00eda[producto][0] &gt; mayor_precio:\n        mayor_precio = verduler\u00eda[producto][0]\n        mas_caro = producto\nprint(\"El producto m\u00e1s caro es: \", mas_caro)\n\n# 5 \ncompras = ['Manzanas', 'Mangos', 'Papas', 'Tomates', 'Pepino', 'Piment\u00f3n', 'Pl\u00e1tanos']\ntotal = 0\nbolsa = []\nfor elemento in compras:\n    if elemento in verduler\u00eda:\n        lista = verduler\u00eda[elemento]\n        if lista[1] &gt; 0:\n            bolsa.append(elemento)\n            total += lista[0]\n            lista[1] -= 1\n        else:\n            print('No hay', elemento)\n    else:\n        print('Negocio no vende', elemento)\nprint(bolsa)\nprint(total)\n</code></pre>"},{"location":"diccionarios/notas/","title":"Notas","text":"<p>Suponga que tiene un <code>string</code> con el siguiente formato:</p> <pre><code>datos = \"nombre1 apellido1:curso1=nota1,curso2=nota2;nombre2 apellido2:curso1=nota1;...\"\n</code></pre> <p>De antemano no se sabe cu\u00e1ntos estudiantes aparecen en el texto, ni cu\u00e1ntos cursos asociados tiene cada uno, podr\u00eda incluso no tener ninguno.</p> <p>Necesitamos crear la funci\u00f3n <code>obtener_datos(notas)</code> que permita recibir un texto con ese formato y devolver un diccionario con la siguiente estructura:</p> <pre><code>{\n    'nombre1 apellido1': [\n        [nota1, curso1],\n        [nota2, curso2],\n    ],\n    'nombre2 apellido2': [\n        [nota1, curso1]\n    ],\n    #...\n}\n</code></pre> <p>La lista con las notas para cada estudiante debe estar ordenada de menor a mayor de acuerdo a sus notas.</p>"},{"location":"diccionarios/notas/#ejemplos","title":"Ejemplos","text":"<pre><code>datos = \"Carlos P\u00e9rez:c\u00e1lculo=85,f\u00edsica=92;Mar\u00eda Gonz\u00e1lez:programaci\u00f3n=74;Jos\u00e9 Ram\u00edrez:mec\u00e1nica=68,c\u00e1lculo=95,\u00e1lgebra=81;Ana Torres:termodin\u00e1mica=77,qu\u00edmica=88,electricidad=91\"\n\n&gt;&gt;&gt; obtener_notas(datos)\n{\n    'Carlos P\u00e9rez': [[85, 'c\u00e1lculo'], [92, 'f\u00edsica']], \n    'Mar\u00eda Gonz\u00e1lez': [[74, 'programaci\u00f3n']], \n    'Jos\u00e9 Ram\u00edrez': [[68, 'mec\u00e1nica'], [81, '\u00e1lgebra'], [95, 'c\u00e1lculo']], \n    'Ana Torres': [[77, 'termodin\u00e1mica'], [88, 'qu\u00edmica'], [91, 'electricidad']]\n}\n</code></pre> <pre><code>datos = \"Carlos P\u00e9rez:c\u00e1lculo=85,f\u00edsica=92;Mar\u00eda Gonz\u00e1lez:programaci\u00f3n=74;Jos\u00e9 Ram\u00edrez:mec\u00e1nica=68,c\u00e1lculo=95,\u00e1lgebra=81;Ana Torres:termodin\u00e1mica=77,qu\u00edmica=88,electricidad=91\"\n\n&gt;&gt;&gt; obtener_notas(datos)\n{\n    'Luis Mart\u00ednez': [[85, 'geograf\u00eda'], [90, 'historia']], \n    'Sof\u00eda L\u00f3pez': [[79, 'f\u00edsica'], [88, 'biolog\u00eda'], [92, 'qu\u00edmica']], \n    'Miguel S\u00e1nchez': [[95, 'matem\u00e1ticas']]\n}\n</code></pre>"},{"location":"diccionarios/numeros/","title":"N\u00fameros en diferentes idiomas","text":"<p>Como se dijo antes, los valores asociados a las llaves pueden ser colecciones, incluso diccionarios como en este caso.</p> <pre><code>numeros = {\n   'Franc\u00e9s': {1: 'un', 2: 'deux', 3: 'trois', 4: 'quatre', 5: 'cinq',\n      6: 'six', 7: 'sept', 8: 'huit', 9: 'neuf', 10: 'dix'},\n   'Portugu\u00e9s': {1: 'um', 2: 'dois', 3: 'tr\u00eas', 4: 'quatro', 5: 'cinco',\n      6: 'seis', 7: 'sete', 8: 'oito', 9: 'nove', 10: 'dez'},\n   'Ingl\u00e9s': {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n      6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten'},\n   'Espa\u00f1ol': {1: 'uno', 2: 'dos', 3: 'tres', 4: 'cuatro', 5: 'cinco',\n      6: 'seis', 7: 'siete', 8: 'ocho', 9: 'nueve', 10: 'diez'},\n   'Italiano': {1: 'uno', 2: 'due', 3: 'tre', 4: 'quattro', 5: 'cinque',\n      6: 'sei', 7: 'sette', 8: 'otto', 9: 'nove', 10: 'dieci'},\n   'Alem\u00e1n': {1: 'eins', 2: 'zwei', 3: 'drei', 4: 'vier', 5: 'f\u00fcnf',\n      6: 'sechs', 7: 'sieben', 8: 'acht', 9: 'neun', 10: 'zehn'},\n   'Mapudung\u00fan': {1: 'ki\u00f1e', 2: 'epu', 3: 'k\u00fcla', 4: 'meli', 5: 'kechu',\n      6: 'kayu', 7: 'regle', 8: 'pura', 9: 'aylla', 10: 'mari'}\n}\n</code></pre> <p>Responda:</p> <ol> <li>Determinar c\u00f3mo se dice un n\u00famero particular en un idioma en particular</li> <li>Imprimir c\u00f3mo se dice un n\u00famero en todos los idiomas registrados</li> <li>\u00bfSe puede determinar en qu\u00e9 idioma est\u00e1 un n\u00famero en particular? \u00bfQu\u00e9 cosas hay que tener en cuenta?</li> </ol> Soluci\u00f3n <pre><code># Datos #\nnumeros = {\n    'Franc\u00e9s': {1: 'un', 2: 'deux', 3: 'trois', 4: 'quatre', 5: 'cinq',\n      6: 'six', 7: 'sept', 8: 'huit', 9: 'neuf', 10: 'dix'},\n   'Portugu\u00e9s': {1: 'um', 2: 'dois', 3: 'tr\u00eas', 4: 'quatro', 5: 'cinco',\n      6: 'seis', 7: 'sete', 8: 'oito', 9: 'nove', 10: 'dez'},\n   'Ingl\u00e9s': {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n      6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten'},\n   'Espa\u00f1ol': {1: 'uno', 2: 'dos', 3: 'tres', 4: 'cuatro', 5: 'cinco',\n      6: 'seis', 7: 'siete', 8: 'ocho', 9: 'nueve', 10: 'diez'},\n   'Italiano': {1: 'uno', 2: 'due', 3: 'tre', 4: 'quattro', 5: 'cinque',\n      6: 'sei', 7: 'sette', 8: 'otto', 9: 'nove', 10: 'dieci'},\n   'Alem\u00e1n': {1: 'eins', 2: 'zwei', 3: 'drei', 4: 'vier', 5: 'f\u00fcnf',\n      6: 'sechs', 7: 'sieben', 8: 'acht', 9: 'neun', 10: 'zehn'},\n   'Mapudung\u00fan': {1: 'ki\u00f1e', 2: 'epu', 3: 'k\u00fcla', 4: 'meli', 5: 'kechu',\n      6: 'kayu', 7: 'regle', 8: 'pura', 9: 'aylla', 10: 'mari'}\n}\n\n# Preguntas #\n# 1\nnumero = int(input(\"Ingrese n\u00famero: \"))\nidioma = input(\"Ingrese idioma: \")\nif idioma in numeros:\n    if numero in numeros[idioma]:\n        print(\"El n\u00famero \" + str(numero) + \" se dice \" + numeros[idioma][numero] + \" en \" + idioma)\n    else:\n        print(\"No se registra este n\u00famero\")\nelse:\n    print(\"No se registra este idioma\")\n# 2\nnumero = int(input(\"Ingrese n\u00famero: \"))\nfor idioma in numeros:\n    if numero in numeros[idioma]:\n        print(\"En \" + idioma + \" se dice \" + numeros[idioma][numero])\n# 3\nnum_idioma = input(\"Ingrese n\u00famero en alg\u00fan idioma: \")\nfor idioma in numeros:\n    for numero in numeros[idioma]:\n        if numeros[idioma][numero] == num_idioma:\n            print(\"Est\u00e1 en idioma \" + idioma)\n</code></pre>"},{"location":"diccionarios/planetas/","title":"Planetas","text":"<p>Tiene una lista de listas con la informaci\u00f3n de algunos planetas: <code>[ distancia al sol en kms, di\u00e1metro ecuatorial en kms, per\u00edodo orbital en a\u00f1os Tierra, per\u00edodo de rotaci\u00f3n en d\u00edas Tierra, masa relativa a Tierra ]</code>.</p> <pre><code>planetas = {\n   'Mercurio': [57910000, 4880, 0.241, 58.6, 0.06],\n   'Venus': [108200000,12000, 0.72, 243, 0.82],\n   'Tierra': [149600000, 12756, 1, 1, 1],\n   'Marte': [227940000, 6794, 1.52, 1.03, 0.11],\n   'J\u00fapiter': [778833000, 142984, 5.20, 0.414, 318],\n   'Saturno': [1429400000, 120536, 9.55, 0.426, 95],\n   'Urano': [2870990000, 51118, 19.22, 0.718, 14.16],\n   'Neptuno': [4504300000, 49492, 30.66, 0.6745, 17.2]\n}\n</code></pre> <p>Realice lo siguiente:</p> <ol> <li>Imprimir los planetas en orden descendente de di\u00e1metro, es decir, del m\u00e1s grande al m\u00e1s peque\u00f1o.</li> <li>Determinar el planeta con el menor per\u00edodo de rotaci\u00f3n. </li> </ol> Soluci\u00f3n <pre><code># Datos #\nplanetas = {\n   'Mercurio': [57910000, 4880, 0.241, 58.6, 0.06],\n   'Venus': [108200000,12000, 0.72, 243, 0.82],\n   'Tierra': [149600000, 12756, 1, 1, 1],\n   'Marte': [227940000, 6794, 1.52, 1.03, 0.11],\n   'J\u00fapiter': [778833000, 142984, 5.20, 0.414, 318],\n   'Saturno': [1429400000, 120536, 9.55, 0.426, 95],\n   'Urano': [2870990000, 51118, 19.22, 0.718, 14.16],\n   'Neptuno': [4504300000, 49492, 30.66, 0.6745, 17.2]\n}\n\n# Preguntas #\n# 1\nlista = [] # Se crea una lista de lista para ordenarlos seg\u00fan el di\u00e1metro\nfor planeta in planetas:\n   datos= planetas[planeta]\n   diametro = datos[1]\n   lista.append([diametro, planeta])\nlista.sort() # Orden ascendente\nlista.reverse() # Orden descendente\n# Mostrar los planetas\nfor info in lista:\n   planeta = info[1]\n   print(planeta)\n\n# 2\nlista2 = [] # Misma idea anterior, pero guardando la informacion de rotacion\nfor planeta in planetas:\n   datos = planetas[planeta]\n   rotacion = datos[3]\n   lista2.append([rotacion, planeta])\nlista2.sort() # Orden ascendente\n# Mostrar el planeta \nprint(\"Planeta con menor per\u00edodo de rotaci\u00f3n:\", lista2[0][1])\n</code></pre>"},{"location":"diccionarios/series_tv/","title":"Series de TV","text":"<p>Para analizar datos de series de televisi\u00f3n se cuenta con la informacion de todas la series en una lista de listas en donde cada lista tiene la siguiente estructura: <code>[nombre, pais de origen, rating, generos]</code>. A su vez, generos es una lista con todos los generos a los cuales pertenece dicha serie. Por ejemplo:</p> <p><pre><code>series = [\n    ['Game of thrones','USA',9.4,['ficcion']],\n    ['24','USA',8.4,['accion','suspenso']],\n    ['La casa de papel','Espa\u00f1a',9.2,['accion','suspenso','drama']],\n    ['Orange is the new black', 'USA', 8.5, ['comedia','drama']],\n    ['Dark', 'Alemania', 9.2, ['ficcion','drama']],\n    ['Sherlock','UK',9.2,['policial','drama','suspenso']],\n    ['Merl\u0131\u0301','Espa\u00f1a',9.5,['drama']],\n    ['Whitecollar','USA',8.2,['comedia','drama','suspenso']],\n    ['Heroes','USA',7.7,['ficcion','accion']],\n    ['Mistfit','UK',8.4,['accion','drama','ficcion']]\n    # ...\n]\n</code></pre> Observe que la serie 24 es de USA, tiene un rating de 8.4 y est\u00e1 catalogada como de acci\u00f3n y suspenso.</p>"},{"location":"diccionarios/series_tv/#ejercicios","title":"Ejercicios","text":"<p>(a) Escriba la funci\u00f3n <code>series_por_genero(series)</code>, que recibe como par\u00e1metro la lista de series y retorna un diccionario en el que las llaves son los distintos g\u00e9neros y los valores son los nombres de las series asociadas a cada g\u00e9nero, ordenados alfab\u00e9ticamente.</p> <pre><code>&gt;&gt;&gt; print(series_por_genero(series))\n{\n    'accion', ['24', 'Heroes', 'La casa de papel', 'Mistfit'],\n    'comedia', ['Orange is the new black', 'Whitecollar'],\n    'drama', ['Dark', 'La casa de papel', 'Merl\u0131\u0301', 'Mistfit', 'Orange is the new black', 'Sherlock', 'Whitecollar'],\n    'ficcion', ['Dark', 'Game of thrones', 'Heroes', 'Mistfit'],\n    'policial', ['Sherlock'],\n    'suspenso', ['24', 'La casa de papel', 'Sherlock', 'Whitecollar']\n}\n</code></pre> <p>(b) Escriba la funci\u00f3n <code>paises_con_mas_series(series)</code>, que recibe como par\u00e1metro la lista de series y retorna una lista de <code>strings</code> con los nombres de los 3 pa\u0131\u0301ses que tienen m\u00e1s series producidas, ordenada de mayor a menor de acuerdo al n\u00famero de series. Puede suponer que siempre habr\u00e1 suficientes pa\u0131\u0301ses, y que no habr\u00e1 empates entre los pa\u0131\u0301ses en la cantidad de series. Utilice un diccionario para completar la tarea de contar.</p> <pre><code>&gt;&gt;&gt; print(paises_con_mas_series(series))\n['USA', 'UK', 'Espa\u00f1a']\n</code></pre> Soluci\u00f3n <pre><code># Pregunta a)\ndef series_por_genero(series):\n    d = {}\n    for serie in series: # Recorrer series\n        # Extraer informaci\u00f3n que ocuparemos\n        titulo = serie[0]\n        generos = serie[3]\n        for genero in generos: # Recorrer generos\n            # Uso de patr\u00f3n de clasificaci\u00f3n\n            if genero not in d:\n                d[genero] = []\n            d[genero].append(titulo)\n            d[genero].sort() # Ordenar las series por t\u00edtulo\n    return d\n\n# Pregunta b)\ndef paises_con_mas_series(series):\n    d = {}\n    # Utilizamos el patr\u00f3n para contar\n    for serie in series:\n        pais = serie[1]\n        if pais not in d:\n            d[pais] = 0\n        d[pais] += 1\n    lista = [] # Lista para ordenar los pa\u00edses con m\u00e1s series\n    for pais in d:\n        lista.append([d[pais], pais]) # Se crea la estructura [[cantidad de series, pais], ...]\n        # Se crea de forma conveniente para ordenar por cantidad de series\n    lista.sort() # Orden ascendente\n    lista.reverse() # Orden descendente\n    resultado = [] # Lista para guardar solo los pa\u00edses\n    for info in lista[:3]:\n        resultado.append(info[1]) # Solo guardar el nombre del pa\u00eds\n    return resultado\n\nseries = [\n    ['Game of thrones','USA',9.4,['ficcion']],\n    ['24','USA',8.4,['accion','suspenso']],\n    ['La casa de papel','Espa\u00f1a',9.2,['accion','suspenso','drama']],\n    ['Orange is the new black', 'USA', 8.5, ['comedia','drama']],\n    ['Dark', 'Alemania', 9.2, ['ficcion','drama']],\n    ['Sherlock','UK',9.2,['policial','drama','suspenso']],\n    ['Merl\u00ed','Espa\u00f1a',9.5,['drama']],\n    ['Whitecollar','USA',8.2,['comedia','drama','suspenso']],\n    ['Heroes','USA',7.7,['ficcion','accion']],\n    ['Mistfit','UK',8.4,['accion','drama','ficcion']]\n    # ...\n]\n\n# Pruebas\nprint(series_por_genero(series)) # Pregunta a)\nprint(paises_con_mas_series(series)) # Pregunta b)\n</code></pre>"},{"location":"diccionarios/sinonimos/","title":"Sin\u00f3nimos","text":"<p>Se cuenta con un diccionario que asocia palabras con sin\u00f3nimos</p> Diccionario <pre><code>sinonimos = {\n    'abundante': 'mucho',\n    'acabar': 'terminar',\n    'advertir': 'notar',\n    'alterado': 'nervioso',\n    'altura': 'elevaci\u00f3n',\n    'amplificar': 'agrandar',\n    'angustia': 'malestar',\n    'anteojos': 'gafas',\n    'apto': 'h\u00e1bil',\n    'armon\u00eda': 'calma',\n    'avaro': 'amarrete',\n    'barato': 'econ\u00f3mico',\n    'batalla': 'guerra',\n    'bobo': 'necio',\n    'boleto': 'billete',\n    'bonito': 'hermoso',\n    'cabello': 'pelo',\n    'c\u00e1lido': 'caliente',\n    'calmar': 'atenuar',\n    'cama': 'lecho',\n    'camino': 'sendero',\n    'cantina': 'bar',\n    'castigar': 'sancionar',\n    'cola': 'rabo',\n    'combate': 'contienda',\n    'c\u00f3modo': 'confortable',\n    'comprar': 'adquirir',\n    'comprender': 'entender',\n    'constituci\u00f3n': 'estatuto',\n    'crear': 'inventar',\n    'cumbre': 'cima',\n    'dadivoso': 'desprendido',\n    'danza0': 'baile',\n    'decir': 'pronunciar',\n    'defecto': 'imperfecci\u00f3n',\n    'demente': 'loco',\n    'desobediente': 'indisciplinado',\n    'destruir': 'eliminar',\n    'dicha': 'alegr\u00eda',\n    'ebrio': 'borracho',\n    'economizar': 'ahorrar',\n    'ed\u00e9n': 'para\u00edso',\n    'educar': 'ense\u00f1ar',\n    'elegir': 'escoger',\n    'elevar': 'subir',\n    'embrujar': 'hechizar',\n    'embuste': 'mentira',\n    'enfurecer': 'enojar',\n    'enigma': 'inc\u00f3gnita',\n    'ense\u00f1anza': 'educaci\u00f3n',\n    'entero': 'completo',\n    'escrito': 'nota',\n    'escuchar': 'atender',\n    'estudiante': 'alumno',\n    'expresar': 'exponer',\n    'extra\u00f1o': 'raro',\n    'f\u00e1cil': 'sencillo',\n    'fallecer': 'morir',\n    'famoso': 'c\u00e9lebre',\n    'fiel': 'leal',\n    'flaco': 'delgado',\n    'flecha': 'saeta',\n    'formaci\u00f3n': 'instrucci\u00f3n',\n    'fotograf\u00eda': 'retrato',\n    'fragmento': 'pedazo',\n    'frizar': 'congelar',\n    'garaje': 'cochera',\n    'generoso': 'dadivoso',\n    'gigante': 'enorme',\n    'gordo': 'obeso',\n    'humildad': 'modestia',\n    'humo': 'humareda',\n    'id\u00e9ntico': 'igual',\n    'idioma': 'lengua',\n    'iluminar': 'alumbrar',\n    'importe': 'valor',\n    'incre\u00edble': 'impresionante',\n    'indicio': 'pista',\n    'insolencia': 'arrogancia',\n    'insulto': 'agravio',\n    'inteligencia': 'sabidur\u00eda',\n    'invariabilidad': 'uniformidad',\n    'junta': 'delegaci\u00f3n',\n    'labor': 'trabajo',\n    'lanzar': 'arrojar',\n    'llano': 'plano',\n    'lucha': 'pelea',\n    'maestro': 'profesor',\n    'magnate': 'poderoso',\n    'magn\u00edfico': 'espl\u00e9ndido',\n    'matar': 'asesinar',\n    'matrimonio': 'boda',\n    'miedo': 'p\u00e1nico',\n    'misericordia': 'piedad',\n    'momento': 'instante',\n    'monarca': 'rey',\n    'montar': 'cabalgar',\n    'naipe': 'baraja',\n    'nombrar': 'designar',\n    'norma': 'regla',\n    'nunca': 'jam\u00e1s',\n    'oir': 'escuchar',\n    '\u00f3leo': 'aceite',\n    'orar': 'rezar',\n    'p\u00e1gina': 'hoja',\n    'parar': 'detener',\n    'partir': 'dividir',\n    'paz': 'tranquilidad',\n    'pedagog\u00eda': 'ense\u00f1anza',\n    'pelo': 'cabello',\n    'penumbra': 'tiniebla',\n    'plano': 'llano',\n    'poco': 'escaso',\n    'posible': 'factible',\n    'preocupaci\u00f3n': 'inquietud',\n    'previo': 'anterior',\n    'profundo': 'hondo',\n    'queja': 'lamento',\n    'querer': 'pretender',\n    'raro': 'extra\u00f1o',\n    'raz\u00f3n': 'motivo',\n    'reposo': 'quietud',\n    'robar': 'hurtar',\n    'rostro': 'cara',\n    'saber': 'conocer',\n    'sabio': 'erudito',\n    'sabroso': 'rico',\n    'sanar': 'curar',\n    'sano': 'saludable',\n    'satisfacer': 'saciar',\n    'silbar': 'pitar',\n    'silueta': 'contorno',\n    'soberbia': 'altaner\u00eda',\n    'sombra': 'oscuridad',\n    'sumar': 'agregar',\n    'taca\u00f1o': 'avaro',\n    'tal vez': 'quiz\u00e1s',\n    'tomar': 'beber',\n    'transcribir': 'manuscribir',\n    'triunfo': 'victoria',\n    'valiente': 'aventurado',\n    'valioso': 'preciado',\n    'veloz': 'r\u00e1pido',\n    'vereda': 'senda',\n    'vivir': 'habitar',\n    'volver': 'regresar'\n}\n</code></pre> <ol> <li>Escribir un programa que transforme un texto reemplazando las palabras que tienen sin\u00f3nimo y dejando sin cambios las que no tienen. Se puede suponer que no hay signos de puntuaci\u00f3n y que las palabras se separan con un \u00fanico espacio en blanco, excepto la \u00faltima que no tiene espacio al final. Puede utilizar el siguiente c\u00f3digo como base:</li> </ol> <p><pre><code>texto = 'En la penumbra vio su silueta con anteojos y un bonito cabello y sinti\u00f3 miedo y ganas de volver a su casa'\ntexto += ' '\npalabra = ''\ni = 0\nwhile i &lt; len(texto):\n    if texto[i] == ' ':\n        print(palabra) # Reemplazar esto con el procesamiento de la palabra\n        palabra = ''\n    else:\n        palabra += texto[i]\ni += 1\n</code></pre> 2. Construir un nuevo diccionario que incluya tambi\u00e9n los sin\u00f3nimos en el orden inverso.</p> Soluci\u00f3n <pre><code># Datos #\nsinonimos = {\n    'abundante': 'mucho',\n    'acabar': 'terminar',\n    'advertir': 'notar',\n    'alterado': 'nervioso',\n    'altura': 'elevaci\u00f3n',\n    'amplificar': 'agrandar',\n    'angustia': 'malestar',\n    'anteojos': 'gafas',\n    'apto': 'h\u00e1bil',\n    'armon\u00eda': 'calma',\n    'avaro': 'amarrete',\n    'barato': 'econ\u00f3mico',\n    'batalla': 'guerra',\n    'bobo': 'necio',\n    'boleto': 'billete',\n    'bonito': 'hermoso',\n    'cabello': 'pelo',\n    'c\u00e1lido': 'caliente',\n    'calmar': 'atenuar',\n    'cama': 'lecho',\n    'camino': 'sendero',\n    'cantina': 'bar',\n    'castigar': 'sancionar',\n    'cola': 'rabo',\n    'combate': 'contienda',\n    'c\u00f3modo': 'confortable',\n    'comprar': 'adquirir',\n    'comprender': 'entender',\n    'constituci\u00f3n': 'estatuto',\n    'crear': 'inventar',\n    'cumbre': 'cima',\n    'dadivoso': 'desprendido',\n    'danza0': 'baile',\n    'decir': 'pronunciar',\n    'defecto': 'imperfecci\u00f3n',\n    'demente': 'loco',\n    'desobediente': 'indisciplinado',\n    'destruir': 'eliminar',\n    'dicha': 'alegr\u00eda',\n    'ebrio': 'borracho',\n    'economizar': 'ahorrar',\n    'ed\u00e9n': 'para\u00edso',\n    'educar': 'ense\u00f1ar',\n    'elegir': 'escoger',\n    'elevar': 'subir',\n    'embrujar': 'hechizar',\n    'embuste': 'mentira',\n    'enfurecer': 'enojar',\n    'enigma': 'inc\u00f3gnita',\n    'ense\u00f1anza': 'educaci\u00f3n',\n    'entero': 'completo',\n    'escrito': 'nota',\n    'escuchar': 'atender',\n    'estudiante': 'alumno',\n    'expresar': 'exponer',\n    'extra\u00f1o': 'raro',\n    'f\u00e1cil': 'sencillo',\n    'fallecer': 'morir',\n    'famoso': 'c\u00e9lebre',\n    'fiel': 'leal',\n    'flaco': 'delgado',\n    'flecha': 'saeta',\n    'formaci\u00f3n': 'instrucci\u00f3n',\n    'fotograf\u00eda': 'retrato',\n    'fragmento': 'pedazo',\n    'frizar': 'congelar',\n    'garaje': 'cochera',\n    'generoso': 'dadivoso',\n    'gigante': 'enorme',\n    'gordo': 'obeso',\n    'humildad': 'modestia',\n    'humo': 'humareda',\n    'id\u00e9ntico': 'igual',\n    'idioma': 'lengua',\n    'iluminar': 'alumbrar',\n    'importe': 'valor',\n    'incre\u00edble': 'impresionante',\n    'indicio': 'pista',\n    'insolencia': 'arrogancia',\n    'insulto': 'agravio',\n    'inteligencia': 'sabidur\u00eda',\n    'invariabilidad': 'uniformidad',\n    'junta': 'delegaci\u00f3n',\n    'labor': 'trabajo',\n    'lanzar': 'arrojar',\n    'llano': 'plano',\n    'lucha': 'pelea',\n    'maestro': 'profesor',\n    'magnate': 'poderoso',\n    'magn\u00edfico': 'espl\u00e9ndido',\n    'matar': 'asesinar',\n    'matrimonio': 'boda',\n    'miedo': 'p\u00e1nico',\n    'misericordia': 'piedad',\n    'momento': 'instante',\n    'monarca': 'rey',\n    'montar': 'cabalgar',\n    'naipe': 'baraja',\n    'nombrar': 'designar',\n    'norma': 'regla',\n    'nunca': 'jam\u00e1s',\n    'oir': 'escuchar',\n    '\u00f3leo': 'aceite',\n    'orar': 'rezar',\n    'p\u00e1gina': 'hoja',\n    'parar': 'detener',\n    'partir': 'dividir',\n    'paz': 'tranquilidad',\n    'pedagog\u00eda': 'ense\u00f1anza',\n    'pelo': 'cabello',\n    'penumbra': 'tiniebla',\n    'plano': 'llano',\n    'poco': 'escaso',\n    'posible': 'factible',\n    'preocupaci\u00f3n': 'inquietud',\n    'previo': 'anterior',\n    'profundo': 'hondo',\n    'queja': 'lamento',\n    'querer': 'pretender',\n    'raro': 'extra\u00f1o',\n    'raz\u00f3n': 'motivo',\n    'reposo': 'quietud',\n    'robar': 'hurtar',\n    'rostro': 'cara',\n    'saber': 'conocer',\n    'sabio': 'erudito',\n    'sabroso': 'rico',\n    'sanar': 'curar',\n    'sano': 'saludable',\n    'satisfacer': 'saciar',\n    'silbar': 'pitar',\n    'silueta': 'contorno',\n    'soberbia': 'altaner\u00eda',\n    'sombra': 'oscuridad',\n    'sumar': 'agregar',\n    'taca\u00f1o': 'avaro',\n    'tal vez': 'quiz\u00e1s',\n    'tomar': 'beber',\n    'transcribir': 'manuscribir',\n    'triunfo': 'victoria',\n    'valiente': 'aventurado',\n    'valioso': 'preciado',\n    'veloz': 'r\u00e1pido',\n    'vereda': 'senda',\n    'vivir': 'habitar',\n    'volver': 'regresar'\n}\n\n# Preguntas #\n# 1\n# Texto de ejemplo\ntexto = 'En la penumbra vio su silueta con anteojos y un bonito cabello y sinti\u00f3 miedo y ganas de volver a su casa'\ntexto += ' ' # Se agrega un espacio extra para simplificar la busqueda de palabras\nmodificado = '' # Aca guardaremos el texto modificado\npalabra = '' # Aqui guardaremos las palabras para cambiar por su sinonimo\ni = 0\nwhile i &lt; len(texto): # Recorremos el texto por indice\n    if texto[i] == ' ': # Buscamos el espacio\n        # Cuando encontremos el espacio, ya tenemos una palabra para buscar su sinonimo\n        if palabra in sinonimos:  # Si la palabra tiene sinonimo\n            modificado += sinonimos[palabra] + ' ' # Reemplazamos el texto\n        else: # Si no tiene sinonimo\n            modificado += palabra + ' ' # Mantenemos el texto con la palabra tal cual estaba en un principio\n        palabra = ''\n    else: # Mientras no sea espacio, simplemente concatenamos los caracteres a palabra\n        palabra += texto[i]\n    i += 1 # Indice del texto\nprint(modificado)\n# 2\nsinonimos_2 = {} # Simplemente cambiamos la llave por el valor del primero diccionario\nfor palabra in sinonimos:\n    sinonimos_2[sinonimos[palabra]] = palabra\nprint(sinonimos_2)\n</code></pre>"},{"location":"diccionarios/viajes/","title":"Viajes","text":"<p>Considerando la siguiente estructura: <pre><code>viajes = {\n    # identificador_viaje: (origen, destino, minutos)\n    1323: ['santiago', 'lampa', 34],\n    7643: ['santiago', 'vitacura', 27],\n    9832: ['las condes', 'lampa', 45],\n    2221: ['renca', 'las condes', 38],\n    #...\n}\n</code></pre></p> <p>a) Desarrolle la funci\u00f3n <code>cuenta_minutos(viajes)</code> que reciba el diccionario con la duraci\u00f3n de cada viaje, y entregue una lista con las comunas destino y los minutos totales que se han demorado los viajes hacia ellas (en cualquier orden). <pre><code>&gt;&gt;&gt; cuenta_minutos(viajes)\n[['lampa', 79], ['vitacura', 27], ['las condes', 38]]\n</code></pre></p> Soluci\u00f3n <pre><code>def cuenta_minutos(viajes):\n    c = {}\n    for v in viajes:\n        if viajes[v][1] not in c:\n            c[viajes[v][1]] = 0\n        c[viajes[v][1]] += viajes[v][2]\n    final = []\n    for i in c:\n        final.append([i, c[i]])\n    return final\n\nviajes = {\n  # identificador_viaje: [origen, destino, minutos]\n  1323: ['santiago', 'lampa', 34],\n  7643: ['santiago', 'vitacura', 27],\n  9832: ['las condes', 'lampa', 45],\n  2221: ['renca', 'las condes', 38],\n  #...\n}\n\nprint(cuenta_minutos(viajes))\n</code></pre>"},{"location":"funciones/adn/","title":"ADN","text":"<p>Una cadena de ADN es v\u00e1lida si est\u00e1 compuesta \u00fanicamente por las bases Adenina (A), Citosina (C), Guanina (G) o Timina (T). Escriba una funci\u00f3n para validar una cadena de ADN, retornando <code>True</code> si es v\u00e1lida y <code>False</code> en caso contrario. Suponga que la cadena est\u00e1 compuesta por m\u00faltiples grupos de 4 letras separados por guiones. Adicionalmente escriba un programa que lea \\(n\\) cadenas, y vaya se\u00f1alando las que son v\u00e1lidas. Al finalizar debe decir cu\u00e1ntas fueron v\u00e1lidas y cu\u00e1ntas no.</p> Soluci\u00f3n <pre><code>def validaADN(cadena):\n    caracteres = \"ACGT\" # Caracteres validos\n    i = 0 # Contador utilizado para verificar el grupo de 4 letras\n    for c in cadena:\n        if c == \"-\" and i == 5: # Si encuentra un guion, verificar que sea el 5to caracter\n            i = 0 # Se reinicia el contador, para verificar el siguiente grupo\n        else: # En caso contrario hay mas o menos de 4 bases\n            return False\n        if c not in caracteres: # Verificar si es un grupo de las 4 bases\n            return False\n        i += 1 # Contador para las bases\n    return True\n# Programa principal\nn = int(input(\"Ingrese n: \"))\ni = 0 # Contador para las cadencas\ncv = 0 # Contador de validas\ncn = 0 # Contador no validas\nwhile i &lt; n:\n    # Entrada de cadena\n    cadena = input(\"Ingresar cadena: \")\n    # Verificacion de cadena\n    if validaADN(cadena):\n        cv += 1\n        print(\"Cadena valida\")\n    else:\n        cn += 1\n        print(\"Cadena no valida\")\n    i += 1\n# Contador de cadenas validas e invalidas\nprint(\"Cadenas validas: \", cv)\nprint(\"Cadenas no validas:\", cn)\n</code></pre>"},{"location":"funciones/collatz/","title":"Conjetura de Collatz o Ulam","text":"<p>La conjetura de Collatz o Ulam es un famoso problema matem\u00e1tico a\u00fan sin resolver que afirma lo siguiente: tomando cualquier n\u00famero entero positivo, si es par se lo divide entre 2, si es impar se lo multiplica por 3 y se le suma 1; repitiendo este proceso con el resultado, la secuencia siempre llegar\u00e1 eventualmente al n\u00famero 1, sin importar el n\u00famero inicial.</p> <p>El enunciado formal es el siguiente: Definido para \\(n\\in\\mathbb{N}\\),</p> \\[ f(n) = \\begin{cases} \\frac{n}{2} &amp; \\text{si } n \\text{ es par} \\\\ 3n + 1 &amp; \\text{si } n \\text{ es impar} \\end{cases} \\] \\[ a_{i} = \\begin{cases} n &amp; \\text{para } i = 0 \\\\ f(a_{i-1}) &amp; \\text{para } i &gt; 0 \\end{cases} \\] <p>Realizando iteraciones sucesivas, el proceso termina en 1 para cualquier entero positivo inicial (seg\u00fan la conjetura).</p> <p>Se solicita que realice un programa para implementar esta conjetura, con lo siguiente:</p> <ul> <li>Una funci\u00f3n que retorne verdadero si un n\u00famero es par y falso si no lo es.</li> <li>Una funci\u00f3n que aplique la operaci\u00f3n \\(n/2\\) para \\(n\\) par.</li> <li>Una funci\u00f3n que aplique la operaci\u00f3n \\(3n+1\\) si \\(n\\) es impar.</li> <li>Mostrar todos los valores de la secuencia hasta terminar en \\(1\\).</li> </ul> <p>Adem\u00e1s, el programa debe determinar:</p> <ol> <li>La cantidad de n\u00fameros pares que se generaron.</li> <li>La cantidad de n\u00fameros impartes que se generaron.</li> <li>El m\u00e1ximo valor obtenido.</li> </ol>"},{"location":"funciones/collatz/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese n: 10\n10\n5\n16\n8\n4\n2\n1\nM\u00e1ximo: 16\nCantidad de pares: 5\nCantidad de impares: 2\n</code></pre> <pre><code>Ingrese n: 100\n100\n50\n25\n76\n38\n19\n58\n29\n88\n44\n22\n11\n34\n17\n52\n26\n13\n40\n20\n10\n5\n16\n8\n4\n2\n1\nM\u00e1ximo: 88\nCantidad de pares: 18\nCantidad de impares: 8\n</code></pre> Soluci\u00f3n <pre><code>def par(n):\n    return n % 2 == 0\n\ndef f_par(n):\n    return n // 2\n\ndef f_impar(n):\n    return 3 * n + 1\n\nn = int(input(\"Ingrese n: \"))\nmaximo = 1\npares = 0\nimpares = 1 # Considerando el 1\nwhile n &gt; 1:\n    print(n)\n    if par(n):\n        n = f_par(n)\n        pares += 1\n    else:\n        n = f_impar(n)\n        impares += 1\n    if n &gt; maximo:\n        maximo = n\nprint(n) # Imprime el 1 final\nprint(\"M\u00e1ximo:\", maximo)\nprint(\"Cantidad de pares:\", pares)\nprint(\"Cantidad de impares:\", impares)\n</code></pre>"},{"location":"funciones/comentarios/","title":"Comentarios","text":""},{"location":"funciones/comentarios/#print-y-return","title":"<code>print</code> y <code>return</code>","text":"<p>La funci\u00f3n <code>print</code> muestra un valor num\u00e9rico, texto u otro por pantalla, mientras que <code>return</code> no muestra nada, solo retorna un valor donde la funci\u00f3n haya sido llamada.</p>"},{"location":"funciones/comentarios/#errores-comunes","title":"Errores comunes","text":"<p>Veamos el siguiente ejemplo:</p> <pre><code># Retorna el MCD de dos n\u00fameros mediante el algoritmo de Euclides\ndef euclides(a, b): # Definicion de parametros\n    a = input('a: ') # Sobreescribir parametros utilizando input\n    b = input('b: ') # Lo mismo que arriba\n    while b != 0:\n        resto = a % b\n        a = b\n        b = resto\n    print(a) # Deberiamos retornar en vez de solo mostrar\n</code></pre> <p>Comentarios:</p> <ul> <li>Es preferible evitar el uso de <code>input</code> al interior de una funci\u00f3n.</li> <li>Generalmente la funci\u00f3n finaliza con un <code>return</code> en vez de <code>print</code>. En algunos casos podr\u00edamos terminar sin retornar nada, pero no es tan com\u00fan y depende de la aplicaci\u00f3n.</li> </ul>"},{"location":"funciones/comentarios/#orden-de-parametros","title":"Orden de par\u00e1metros","text":"<p>Hay que tener presente el \u00f3rden en que se definen los par\u00e1metros de una funci\u00f3n y c\u00f3mo se utilizar\u00e1n posteriormente. Por ejemplo: </p> <pre><code>def ecuacion_segundo_grado(a, b, c):\n</code></pre> <p>En este ejemplo el orden de los par\u00e1metros es importante, pues corresponde a los coeficientes de la ecuaci\u00f3n. Si se entregan en otro orden, se trata de otra ecuaci\u00f3n.</p>"},{"location":"funciones/comentarios/#confusion-nombre-de-parametros","title":"Confusi\u00f3n nombre de par\u00e1metros","text":"<p>Al momento de llamar una funci\u00f3n, no importa el nombre de los \"par\u00e1metros\" sino que el \u00f3rden de definici\u00f3n. Por ejemplo:</p> <pre><code>euclides(num1, num2)\n</code></pre> <pre><code>euclides(b, a)\n</code></pre>"},{"location":"funciones/comentarios/#tipo-de-datos","title":"Tipo de datos","text":"<p>Aunque Python no restringe los par\u00e1metros por tipos, hay un contrato impl\u00edcito para poder usar una funci\u00f3n y eso incluye que los tipos deben corresponder.</p>"},{"location":"funciones/comentarios/#capturar-retorno","title":"Capturar retorno","text":"<p>Si se define una funci\u00f3n con retorno hay que asegurarse de capturar lo que se devuelva. Ejemplo:</p> <pre><code>euclides(9, 15)\n</code></pre> <p>deber\u00eda ser</p> <p><pre><code>m = euclides(9, 15)\n</code></pre> si utilizamos <code>return</code>.</p>"},{"location":"funciones/comentarios/#llamado-de-funcion","title":"Llamado de funci\u00f3n","text":"<p>Al llamar a una funci\u00f3n, el flujo del programa salta a la definici\u00f3n de la funci\u00f3n, ejecuta el c\u00f3digo al interior de esta, y luego viene el retorno una vez que la funci\u00f3n termina.</p>"},{"location":"funciones/comentarios/#return","title":"<code>return</code>","text":"<p>La siguiente funci\u00f3n entrega su resultado, pero tambi\u00e9n retorna al lugar donde fue llamada. Cualquier instrucci\u00f3n ubicada despu\u00e9s de <code>return</code> no se ejecutar\u00e1 nunca. Por eso funcionan c\u00f3digos como este sin <code>else</code>:</p> <pre><code>def es_par(n):\n    if n % 2 == 0:\n        return True\n    return False\n</code></pre>"},{"location":"funciones/comentarios/#ejemplo","title":"Ejemplo","text":"<p>Considere la siguiente funci\u00f3n:</p> <pre><code>def mayor(a, b, c):\n    if a &gt;= b and a &gt;= c:\n        return a\n    elif b &gt;= a and b &gt;= c:\n        return b\n    return c\n</code></pre> <ul> <li>Siga la ejecuci\u00f3n del llamado <code>mayor(1, 3, 2)</code> e indique lo que retorna</li> <li>Siga la ejecuci\u00f3n del llamado <code>mayor(1, 2, 3)</code> e indique lo que retorna</li> </ul>"},{"location":"funciones/comentarios/#secuencia-de-collatz","title":"Secuencia de Collatz","text":"<p>El siguiente programa imprime en la pantalla la secuencia de Collatz desde un t\u00e9rmino inicial recibido como entrada. Estudie la implementaci\u00f3n y muestre los valores que se imprimen si se ingresa \\(15\\) como entrada. Preste atenci\u00f3n al mecanismo de llamada y retorno de las funciones.</p> <pre><code>def es_par(n):\n    return n % 2 == 0\n\ndef termino_par(n):\n    return n // 2\n\ndef termino_impar(n):\n    return 3 * n + 1\n\nt = int(input('t: '))\nwhile t != 1:\n    print(t)\n    if es_par(t):\n        t = termino_par(t)\n    else:\n        t = termino_impar(t)\nprint(t)\n</code></pre>"},{"location":"funciones/comentarios/#coeficiente-binomial","title":"Coeficiente binomial","text":"<p>Hacer ruteo de programa que calcula, usando funciones, el coeficiente binomial:</p> \\[\\begin{equation}     {n \\choose k} = \\dfrac{n!}{k!(n-k)!} \\end{equation}\\] <pre><code>def factorial(n):\n    f = 1\n    i = 2\n    while i &lt;= n:\n        f *= i\n        i += 1\n    return f\n\ndef coeficiente_binomial(n, k):\n    a = factorial(n)\n    b = factorial(k)\n    c = factorial(n-k)\n    return a / (b * c)\n\ncoef = coeficiente_binomial(3, 2)\nprint(coef)\n</code></pre>"},{"location":"funciones/eliminar/","title":"Eliminar","text":"<p>Escribir la funci\u00f3n <code>eliminar(texto, palabra)</code> que retorna un <code>string</code> del que se han eliminado todas las ocurrencias de palabra dentro de texto.</p> Soluci\u00f3n <pre><code>def eliminar(texto, palabra):\n    # Podemos simplemente retornar el resultado de un replace de la palabra por texto vacio\n    # Se concatena un espacio a la palabra para borrar el espacio extra\n    return texto.replace(palabra + \" \", \"\")\n# Entrada de datos\ntexto = input(\"Ingresar texto: \")\npalabra = input(\"Ingresar palabra a eliminar: \")\n# Salida\nprint(\"Nuevo texto:\", eliminar(texto, palabra))\n</code></pre>"},{"location":"funciones/exponencial/","title":"Aproximaci\u00f3n exponencial","text":"<p>Realice un programa que aproxime la funci\u00f3n \\(e^x\\) utilizando Serie de Taylor:</p> \\[\\begin{equation}     e^x \\approx \\sum_{n=0}^N \\dfrac{x^n}{n!}, \\quad \\forall x\\in \\mathbb{R}, n \\in \\mathbb{N}_0, \\end{equation}\\] <p>donde \\(x\\) y \\(N\\) son entradas del programa. Utilice funciones.</p>"},{"location":"funciones/exponencial/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese N: 10\nIngrese x: 1\nValor aproximacion: 2.7182818011463845\n</code></pre> <pre><code>Ingrese N: 100\nIngrese x: 1\nValor aproximacion: 2.7182818284590455\n</code></pre> <pre><code>Ingrese N: 100\nIngrese x: 2\nValor aproximacion: 7.389056098930649\n</code></pre> Soluci\u00f3n <pre><code># Calculo factorial\ndef factorial(n):\n    prod = 1\n    i = 1\n    while i &lt;= n:\n        prod *= i\n        i += 1\n    return prod\n\n# Funci\u00f3n para calcular la aproximaci\u00f3n\ndef aproximacion(N, x):\n    n = 0\n    exp = 0\n    while n &lt;= N:\n        exp += (x ** n) / factorial(n)\n        n += 1\n    return exp\n\n# Entrada de datos\nN = int(input(\"Ingrese N: \"))\nx = float(input(\"Ingrese x: \"))\n\n# C\u00e1lculo de aproximaci\u00f3n\nexp_aprox = aproximacion(N, x)\n\n# Salida con el resultado\nprint(\"Valor aproximacion:\", exp_aprox)\n</code></pre>"},{"location":"funciones/fechas/","title":"Fechas m\u00e1gicas","text":"<p>Una fecha m\u00e1gica es una fecha en la que el d\u00eda multiplicado por el mes es igual a los \u00faltimos dos d\u00edgitos del a\u00f1o. Por ejemplo, el 10 de junio de 1960 es una fecha m\u00e1gica, pues junio es el mes 6, y al multiplicarlo por 10 el resultado coincide con el a\u00f1o: 60. Escriba una funci\u00f3n que determine si una fecha es m\u00e1gica o no, retornando True o False seg\u00fan corresponda. La fecha que recibe la funci\u00f3n es un string en formato \"mes dia, a\u00f1o\", con un espacio separando el mes y el d\u00eda, y una coma y un espacio separando el a\u00f1o. Por ejemplo, \u201cJunio 10, 1960\u201d. Puede utilizarse, una funci\u00f3n que convierte un mes escrito en palabras a su equivalente en n\u00famero entero.</p> Soluci\u00f3n <pre><code># Transforma un mes de tipo string a entero\ndef numero_mes(mes):\n    # Para simplificar la comparacion se transforma a minuscula\n    mes = mes.lower() \n    # Se hace la comparacion mes a mes\n    if mes == \"enero\": \n        return 1\n    elif mes == \"febrero\": \n        return 2\n    elif mes == \"marzo\": \n        return 3\n    elif mes == \"abril\":\n        return 4\n    elif mes == \"mayo\":\n        return 5\n    elif mes == \"junio\":\n        return 6\n    elif mes == \"julio\":\n        return 7\n    elif mes == \"agosto\":\n        return 8\n    elif mes == \"septiembre\":\n        return 9\n    elif mes == \"octubre\":\n        return 10\n    elif mes == \"noviembre\":\n        return 11\n    elif mes == \"diciembre\":\n        return 12\n\ndef fechas_magicas(fecha):\n    # Extraccion de dia, mes y a\u00f1o utilizando subtrings\n    i1 = fecha.index(\" \") # Buscamos el primer espacio\n    i2 = fecha.index(\",\") # Buscamos la coma\n    mes = fecha[:i1] # Se extrae el substring del mes \n    mes = numero_mes(mes) # Luego se transforma con nuestra funcion a entero\n    dia = fecha[i1+1:i2] # Se extrae el dia\n    dia = int(dia) # Se transforma a entero\n    a\u00f1o = fecha[-2:] # Para el a\u00f1o solo obtenemos los ultimos valores\n    a\u00f1o = int(a\u00f1o) # Se transforma en entero\n    return dia * mes == a\u00f1o\n\n# Entrada de fecha\nfecha = input(\"Ingrese fecha: \")\n# Salida\nif fechas_magicas(fecha):\n    print(\"Es fecha magica\")\nelse:\n    print(\"No es fecha magica\")\n</code></pre>"},{"location":"funciones/gravitacional/","title":"Fuerza gravitacional","text":"<p>La fuerza de atracci\u00f3n gravitacional entre dos planetas de masas \\(m_1\\) y \\(m_2\\) separados por una distancia de \\(r\\) kil\u00f3metros est\u00e1 dada por la f\u00f3rmula:</p> \\[\\begin{equation}     F = \\dfrac{G\\,m_1\\,m_2}{r^2}, \\end{equation}\\] <p>donde \\(G = 6.67428 \\times 10^{\u221211}\\) \\([\\text{m}^3 \\text{kg}^{\u22121} \\text{s}^{\u22122}]\\) es la constante de gravitaci\u00f3n universal.</p> <p>Escriba un programa que pregunte las masas de los planetas y su distancia, y entregue la fuerza de atracci\u00f3n entre ellos.</p> Soluci\u00f3n <pre><code># Definici\u00f3n de funci\u00f3n\ndef cgu(masa1, masa2, radio):\n    G = 6.67428e-11\n    # Aplicar la f\u00f3rmula\n    fuerza = G * masa1 * masa2 / (radio ** 2) \n    return fuerza\n\n# Entrada de datos\nm1 = float(input('m1: '))\nm2 = float(input('m2: '))\nr = float(input('Distancia: '))\n\n# Salida de datos llamando directamente la funci\u00f3n dentro del print\nprint('La fuerza de atraccion es', cgu(m1, m2, r))\n</code></pre>"},{"location":"funciones/hipoteca/","title":"Cr\u00e9dito Hipotecario","text":"<p>La cuota mensual \\(m\\) que se debe pagar en un cr\u00e9dito hipotecario por un capital inicial \\(h\\) a un plazo de \\(n\\) a\u00f1os, utilizando un inter\u00e9s compuesto de \\(i\\%\\) anual est\u00e1 dada por:</p> \\[\\begin{equation}     m = \\dfrac{h\\,r}{1-(1+r)^{-12n}}, \\end{equation}\\] <p>donde</p> \\[\\begin{equation}     r = \\dfrac{i}{100\\cdot 12} \\end{equation}\\] <ol> <li>Escriba la funci\u00f3n <code>cuota_mensual</code> que calcula la cuota mensual para un capital inicial, un plazo y una tasa de inter\u00e9s dados, redondeado a \\(2\\) decimales. Ej: para \\(\\$50.000.000\\), \\(15\\) a\u00f1os y \\(4,75\\%\\), debe entregar \\(\\$388.915,96\\) (todo como n\u00fameros, sin \\(\\$\\) ni \\(\\%\\)).</li> <li>Escriba la funci\u00f3n <code>monto_total</code> que calcula el monto total que se pagar\u00e1 en el total en el cr\u00e9dito. Para el ejemplo ser\u00eda: \\(\\$70.004.872,8\\)</li> <li>Escriba la funci\u00f3n <code>intereses_pagados</code> que calcula el monto total por intereses que se pagar\u00e1 en todo el cr\u00e9dito. Para el ejemplo ser\u00eda: \\(\\$20.004.872,8\\)</li> <li>Escriba la funci\u00f3n <code>porcentaje_intereses</code> que calcula el porcentaje del capital inicial que se pagar\u00e1 en intereses en todo el cr\u00e9dito. Para el ejemplo ser\u00eda: \\(40,01\\%\\)</li> <li>Escriba un programa que para un capital inicial y una tasa de inter\u00e9s dados, muestre los valores de cuota mensual, monto total a pagar y porcentaje que se pagar\u00e1 en intereses, para un rango de plazos (a\u00f1os). Por ejemplo de \\(10\\) a \\(25\\):     <pre><code>10 524238.72 62908646.4 25.82 \n11 487057.28 64291560.96 28.58 \n12 456199.58 65692739.52 31.39 \n...\n25 285058.68 85517604.0 71.04\n</code></pre></li> </ol> Soluci\u00f3n <pre><code>def cuota(h, n, i):\n   r = i / (1200)\n   m = h * r / (1 - (1 + r)**(-12 * n))\n   return round(m, 2)\n\ndef monto_total(h, n, i):\n   return round(n * 12 * cuota(h, n, i), 2)\n\ndef intereses_pagados(h, n, i):\n   return round(monto_total(h,n,i) - h, 2)\n\ndef porcentaje_intereses(h,n,i):\n   return round(100 * intereses_pagados(h,n,i) / h, 2)\n\n# Datos\nh = 50000000\nn = 15\ni = 4.75\n\n# Preguntas 1-4\nprint(cuota(h,n,i))\nprint(monto_total(h,n,i))\nprint(intereses_pagados(h,n,i))\nprint(porcentaje_intereses(h,n,i))\n\n# Pregunta 5\nn = 10\nwhile n &lt;= 25:\n   print(n, cuota(h,n,i), monto_total(h,n,i), porcentaje_intereses(h,n,i))\n   n += 1\n</code></pre>"},{"location":"funciones/invertir/","title":"Invertir n\u00famero","text":"<p>Realice un programa que dado un \\(n\\) de entrada haga lo siguiente:</p> <ul> <li>Cuente el n\u00famero de d\u00edgitos</li> <li>Muestre el n\u00famero invertido</li> <li>Indique si el n\u00famero es capic\u00faa, es decir, se lee igual de izquierda a derecha que de derecha a izquierda.</li> </ul>"},{"location":"funciones/invertir/#ejemplos","title":"Ejemplos","text":"<pre><code>n: 0\nD\u00edgitos: 1\nInvertido: 0\nEs capicua\n</code></pre> <pre><code>n: 1234\nD\u00edgitos: 4\nInvertido: 4321\nNo es capicua\n</code></pre> <pre><code>n: 123454321\nD\u00edgitos: 9\nInvertido: 123454321\nEs capicua\n</code></pre> Soluci\u00f3n <pre><code># Funcion para contar\ndef contar(n):\n    # Si n es 0 hay un digito\n    if n == 0: \n        return 1\n    else: # En otro caso\n        i = 0\n         # Dividimos por 10 mientras n &gt; 0\n        while n &gt; 0:\n            n //= 10\n            i += 1 # Conteo de digitols\n        return i\n\n# Funcion para invertir \ndef invertir(n):\n    m = 0 # Variable a retornar\n    while n &gt; 0: # Repetimos mientras n sea mayor a 0 (podamos obtener resto distinto de 0)\n        m = m * 10 + n % 10 # Generamos el con el digito de la derecha de n + 10 veces el m anterior \n        n //= 10 # Removemos el valor de la derecha\n    return m\n\n# Funcion capicua\ndef capicua(n):\n    return n == invertir(n)\n\n# Entrada\nn = int(input(\"n: \")) \n# Salida\nprint(\"D\u00edgitos:\", contar(n))\nprint(\"Invertido:\", invertir(n)) \nif capicua(n):\n    print(\"Es capicua\")\nelse:\n    print(\"No es capicua\")\n</code></pre>"},{"location":"funciones/larga/","title":"Palabra m\u00e1s larga","text":"<p>Escribir la funci\u00f3n <code>palabra_mas_larga</code> que retorna un <code>string</code> con la palabra de mayor longitud de un texto cuyas palabras se separan por un \u00fanico espacio y no hay espacio al final.</p> Soluci\u00f3n <pre><code>def palabra_mas_larga(texto):\n    larga = \"\" # Variable donde guardaremos la palabra mas larga\n    i = 0 # Indice para recorrer el texto\n    j = 0 # Indice para guardar las posiciones de los espacios\n    # Recorremos el texto utilizando el indice i\n    while i &lt; len(texto):\n        if texto[i] == \" \": # Si encontramos un espacio\n            # Utilizamos el substring que contiene la palabra a verificar\n            if len(texto[j:i]) &gt; len(larga): # Comparamos si la longitud es la mayor\n                larga = texto[j:i] # La guardamos\n            j = i + 1 # j guardara la posicion del ultimo espacio + 1 (para no contar el mismo espacio)\n        i += 1\n    # El ciclo anterior solo analizara las palabras cuando encuentre un espacio en el texto\n    # Para verificar la ultima palabra utilizamos el siguiente condicional\n    # j contiene la posicion del ultimo espacio + 1, y obtenemos hasta el final del substring\n    if len(texto[j:]) &gt; len(larga): \n        larga = texto[j:]\n    return larga\n# Entrada de texto\ntexto = input(\"Ingrese texto: \")\n# Salida de respuesta\nprint(\"La palabra mas larga es:\", palabra_mas_larga(texto))\n</code></pre>"},{"location":"funciones/newton/","title":"M\u00e9todo de Newton","text":"<p>El m\u00e9todo de Newton es un algoritmo para encontrar aproximaciones de los ceros o ra\u00edces de una funci\u00f3n real.</p> \\[\\begin{equation}     x_{n+1} = x_n - \\dfrac{f(x_n)}{f'(x_n)} \\end{equation}\\] <p>Calcule \\(\\sqrt{2}\\), sabiendo que \\(f(x)=x^2\u22122\\), \\(f'(x)=2x\\). El n\u00famero m\u00e1ximo de iteraciones \\(N\\) y \\(x_0\\) son entradas del programa.</p> Soluci\u00f3n <pre><code># Funci\u00f3n\ndef f(x):\n    return x ** 2 - 2\n\n# Derivada de funci\u00f3n\ndef df(x):\n    return 2 * x\n\n# M\u00e9todo de Newton\ndef metodo_newton(x_0, N):\n    n = 1 # Para controlar el n\u00famero de iteraciones\n    x = x_0 # Valor inicial\n    while n &lt;= N:\n        x = x - f(x) / df(x)\n        n += 1\n    return x\n\n# Entrada de datos\nx_0 = float(input(\"Ingrese valor inicial: \"))\nN = int(input(\"Ingrese numero de iteraciones: \"))\n\n# Aproximaci\u00f3n\nsol = metodo_newton(x_0, N)\n\n# Salida de datos\nprint(\"La raiz de 2 es aproximadamente:\", sol)\n</code></pre>"},{"location":"funciones/password/","title":"Contrase\u00f1a","text":"<p>Escriba una funci\u00f3n que retorne <code>True</code> si una contrase\u00f1a particular es suficientemente segura y <code>False</code> en caso contrario. Una contrase\u00f1a se considera suficientemente segura si contiene al menos una letra may\u00fascula, al menos una min\u00fascula, al menos un d\u00edgito, al menos un caracter de puntuaci\u00f3n (punto, coma, punto y coma o dos puntos), y debe tener al menos longitud \\(8\\).</p> Soluci\u00f3n <pre><code># Para verificar si tiene una mayuscula o minuscula, o si corresponde a un digito,\n# utilizamos la funcion ord(string) que nos entrega el codigo ASCII respectivo. \n\ndef letra_mayuscula(caracter):\n    # 65 corresponde a \"A\" y 90 a \"Z\". Se incluye la \"\u00d1\"\n    return (ord(caracter) &gt;= 65 and ord(caracter) &lt;= 90) or caracter == \"\u00d1\"\n\ndef letra_minuscula(caracter):\n    # 97 corresponde a \"a\" y 122 a \"z\". Se inlcuye la \"\u00f1\"\n    return (ord(caracter) &gt;= 97 and ord(caracter) &lt;= 122) or caracter == '\u00f1'\n\ndef digito(caracter):\n    # 48 corresponde a \"0\" y 57 a \"9\"\n    return ord(caracter) &gt;= 48 and ord(caracter) &lt;= 57 \n\ndef puntuacion(caracter):\n    # Simplemente verificamos si se encuentra dentro del string con los caracteres de puntuacion\n    return caracter in \",.;:\"\n\ndef segura(password):\n    # Esta propuesta analiza caracter por caracter y revisa si cumple los requisitos\n    # Podemos revisar inmediatamente el largo, para evitar recorrer el string\n    if len(password) &lt; 8:\n        return False\n    else: # Si la contrase\u00f1a es de al menos 8 caracteres, continuamos...\n        # Inicializamos con variables falsas\n        mayu = False\n        minu = False\n        digi = False\n        punt = False\n        # Recorremos los caracteres de la contrase\u00f1a\n        for c in password:\n            # Aplicamos OR para saber si es que posee o no el criterio correspondiente\n            mayu = mayu or letra_mayuscula(c)\n            minu = minu or letra_minuscula(c)\n            digi = digi or digito(c)\n            punt = punt or puntuacion(c)\n        # Luego de revisar todos los criterios, aplicamos AND a nuestras variables\n        return mayu and minu and digi and punt\n# Entrada\ncontra = input(\"Ingrese su contrase\u00f1a: \")\n# Salida\nif segura(contra):\n    print(\"Su contrase\u00f1a es segura\")\nelse:\n    print(\"Su contrase\u00f1a no es segura\")\n</code></pre> <p>Modifique la funci\u00f3n anterior para que reciba como par\u00e1metro adicional la contrase\u00f1a anterior. Agregue como condici\u00f3n para ser una contrase\u00f1a segura que la nueva contrase\u00f1a no debe ser similar a la anterior con \\(3\\) o menos caracteres de tolerancia.</p>"},{"location":"funciones/patentes/","title":"Patentes","text":"<p>La polic\u00eda de Pythonia le ha encargado construir un programa para cursar multas a quienes no respeten la restricci\u00f3n vehicular, la que se define a partir de las patentes de los autos. Existen patentes con dos formatos distintos:</p> <ul> <li>4 letras, un espacio y 2 d\u00edgitos (Ejemplo:<code>'CRTJ 32'</code>).</li> <li>2 letras, un gui\u00f3n y 4 d\u00edgitos (Ejemplo: <code>'RX-2134'</code>).</li> </ul> <p>Para definir la restricci\u00f3n de los catal\u00edticos se analiza la \u00faltima letra de la patente, es decir, la letra que est\u00e1 m\u00e1s a la derecha:</p> <ul> <li>Lunes: patentes cuya \u00faltima letra sea menor o igual a <code>'G'</code>.</li> <li>Mi\u00e9rcoles: patentes cuya \u00faltima letra sea mayor que <code>'G'</code> pero menor o igual a <code>'N'</code>.</li> <li>Viernes: patentes cuya \u00faltima letra sea mayor que <code>'N'</code>.</li> </ul> <p>Para el caso de los no catal\u00edticos la restricci\u00f3n se decide en base al \u00faltimo d\u00edgito:</p> <ul> <li>Lunes: Patentes terminadas en 0, 1, 2 o 3.</li> <li>Mi\u00e9rcoles: Patentes terminadas en 4, 5 o 6.</li> <li>Viernes: Patentes terminadas en 7, 8 o 9.</li> </ul> <p>El resto de los d\u00edas no hay veh\u00edculos con restricci\u00f3n, de ning\u00fan tipo. </p> <p>Tome en cuenta que el formato de la patente no tiene relaci\u00f3n alguna con el tipo de auto: catal\u00edtico o no catal\u00edtico. Escriba la funci\u00f3n <code>tiene_restriccion(patente, catalitico, dia)</code> que recibe como par\u00e1metros la patente de un veh\u00edculo particular, un valor booleano que es <code>True</code> si el auto es catal\u00edtico y <code>False</code> si no lo es, y el d\u00eda de la semana en que el veh\u00edculo transit\u00f3 (todo en may\u00fascula). La funci\u00f3n debe retornar <code>True</code> si se le debe cursar un parte al veh\u00edculo o <code>False</code> en caso contrario. Puede suponer que todos los datos son correctos y se apegan a los formatos especificados.</p>"},{"location":"funciones/patentes/#ejemplo","title":"Ejemplo","text":"<pre><code>&gt;&gt;&gt; tiene_restriccion('CRTJ 32', True, 'LUNES') \nFalse\n&gt;&gt;&gt; tiene_restriccion('ZZ\u22129999', True, 'VIERNES') \nTrue\n&gt;&gt;&gt; tiene_restriccion('RX\u22122134', False , 'MIERCOLES') \nTrue\n</code></pre> Soluci\u00f3n <pre><code># Retorna la ultima letra, segun los formatos de las patentes\ndef f(p):\n    if '-' in p:\n        x = p[1] \n    else:\n        x = p[3] \n    return x\n\ndef tiene_restriccion(patente, catalitico, dia):\n    if catalitico: # Si el auto es catalitico\n        ultimo = f(patente) # Obtenemos la ultima letra\n        # Realizamos el filtro segun lo solicitado\n        if ultimo &lt;= \"G\":\n            if dia == \"LUNES\":\n                return True\n        elif ultimo &lt;= \"N\":\n            if dia == \"MIERCOLES\":\n                return True\n        elif ultimo &gt; \"N\":\n            if dia == \"VIERNES\":\n                return True\n    else: # Si no es catalitico\n        ultimo = patente[-1] # Obtenemos el ultimo digito\n        # Realizamos el frilto segun las condiciones indicadas\n        # Como ultimo es un string, podemos usar el 'in' para evitar condicionales extras.\n        if dia == \"LUNES\" and ultimo in \"0123\":\n            return True\n        elif dia == \"MIERCOLES\" and ultimo in \"456\":\n            return True\n        elif dia == \"VIERNES\" and ultimo in \"789\":\n            return True\n    return False # Para cualquier otro caso no tiene restriccion\n\nprint(tiene_restriccion('CRTJ 32', True, 'LUNES'))\nprint(tiene_restriccion('ZZ-9999', False, 'VIERNES'))\nprint(tiene_restriccion('RX\u22122134', False , 'MIERCOLES'))\n</code></pre>"},{"location":"funciones/salario/","title":"Salario","text":"<p>El salario imponible de una persona se determina a partir del monto que percibe por las horas trabajadas, descontando el aporte previsional para su pensi\u00f3n y la cotizaci\u00f3n de salud. Al monto resultante se le aplica la siguiente tabla para calcular el Impuesto \u00danico de Segunda Categor\u00eda que debe pagar:</p> Hasta Tasa Descontar \\(\\$680.022\\) Exento \\(\\$1.511.160\\) \\(4\\%\\) \\(\\$27.200,88\\) \\(\\$2.518.600\\) \\(8\\%\\) \\(\\$87.647,28\\) \\(\\$3.526.040\\) \\(13.5\\%\\) \\(\\$226.170,28\\) \\(\\$4.533.480\\) \\(23\\%\\) \\(\\$561.144,08\\) \\(\\$6.044.640\\) \\(30.4\\%\\) \\(\\$896.621,60\\) \\(\\$15.615.320\\) \\(35\\%\\) \\(\\$1.174.675,04\\) y m\u00e1s \\(40\\%\\) \\(\\$1.955.441,04\\) <p>El descuento de la Isapre corresponde a un \\(7\\%\\) del salario base, mientras que el descuento que hace la AFP corresponde a un \\(10\\%\\) para el ahorro y un \\(1,27\\%\\) para comisi\u00f3n.</p> <p>El salario base se calcula a partir de las horas trabajadas en el mes. Cada empleado tiene un monto por hora que recibe. Las horas extra (por sobre \\(44\\)) se le pagan a \\(1,5\\) veces el monto por hora regular. No se pagan m\u00e1s de \\(40\\) horas extra mensuales.</p> <p>Aplique descomposici\u00f3n de problemas para implementar un programa que calcule el salario que recibir\u00e1 un empleado al t\u00e9rmino de un mes, indicando el detalle de lo ganado y lo descontado.</p>"},{"location":"funciones/salario/#ejemplo","title":"Ejemplo","text":"<pre><code>Monto por hora: $20000\nHoras trabajadas: 50\nImponible: $ 1060000\nDescuentos legales: $ 193662.0\nBase tributaria: $ 866338.0\nImpuestos: $ 7453\nSueldo: $ 858885\n</code></pre> Soluci\u00f3n <pre><code># Calcular base considerando horas extra\ndef calcular_base(hrs, monto):\n   if hrs &gt; 44:\n      normales = 44\n      extra = hrs - 44\n      if extra &gt; 40:\n         extra = 40\n   else:\n      normales = hrs\n      extra = 0\n   return monto * (normales + extra * 1.5)\n\n# Tabla de impuestos\ndef calcular_monto_impuestos(imponible):\n   if imponible &lt;= 680022:\n      return 0\n   elif imponible &lt;= 1511160:\n      return imponible * 4 / 100 - 27200.88\n   elif imponible &lt;= 2518600:\n      return imponible * 8 / 100 - 87647.28\n   elif imponible &lt;= 3526040:\n      return imponible * 13.5 / 100 - 226170.28\n   elif imponible &lt;= 4533480:\n      return imponible * 23/100 - 561144.08\n   elif imponible &lt; 6044640:\n      return imponible * 30.4 / 100 - 896621.60\n   elif imponible &lt; 15615320:\n      return imponible * 35 / 100 - 1174675.04\n   return imponible * 40 / 100 - 1955441.04\n\n# Salud y AFP\ndef salud(monto):\n   return monto * 0.07\n\ndef afp(monto):\n   return monto * (0.1 + 0.0127)\n\n# Entrada\nmonto_por_hora = int(input('Monto por hora: $'))\nhrs_trabajadas = int(input('Horas trabajadas: '))\n\n# Calculos\nimponible = int(round(calcular_base(hrs_trabajadas, monto_por_hora)))\ndescuentos_legales = salud(imponible) + afp(imponible)\nbase_tributable = imponible - descuentos_legales\nimpuestos = int(round(calcular_monto_impuestos(base_tributable)))\nsueldo = int(round(base_tributable - impuestos))\n\n# Salida\nprint(\"Imponible: $\", imponible)\nprint(\"Descuentos legales: $\", descuentos_legales)\nprint(\"Base tributaria: $\", base_tributable)\nprint(\"Impuestos: $\", impuestos)\nprint(\"Sueldo: $\", sueldo)\n</code></pre>"},{"location":"funciones/veces/","title":"Veces","text":"<p>Escribir la funci\u00f3n <code>veces(chico, grande)</code> que retorna la cantidad de veces que aparece el string chico dentro del <code>string</code> grande.</p> Soluci\u00f3n <pre><code>def veces(chico, grande):\n    cont = 0 # Contador para las repeticiones\n    i = 0 # Indice para recorrer el string\n    # Recorremos el string grande, utilizando indices, sin contar la ultima parte (tama\u00f1o del string chico)\n    # La idea es comparar el string peque\u00f1o con el substring del grande entre los indices [i:i+len(chico)]\n    while i &lt;= (len(grande) - len(chico)): \n        # Comparamos el string chico con el substring del grande\n        if chico == grande[i: i+len(chico)]: \n            cont += 1 # Contador de repeticiones\n        i += 1 \n    return cont\n# Entrada de strings\ngrande = input(\"Ingrese string grande: \")\nchico = input(\"Ingrese string chico: \")\n# Salida\nprint(\"Las palabra\", chico, \"aparece\", veces(chico, grande), \"veces en\", grande)\n</code></pre>"},{"location":"listas/busqueda_binaria/","title":"B\u00fasqueda binaria","text":"<p>La b\u00fasqueda binaria encuentra la posici\u00f3n de un elemento en una lista ordenada, comparando el elemento con el valor de al medio de la lista, si no son iguales, la mitad en la cual el valor no puede estar es eliminada y la b\u00fasqueda contin\u00faa en la mitad restante hasta que el valor se encuentre.</p> <p>Por ejemplo, se desea encontrar el \\(10\\) en la siguiente lista:</p> 4 6 10 12 17 25 29 <p>Comparar el elemento buscado con el valor central: \\(10 &lt; 12\\), es menor, entonces descartar el lado derecho.</p> 4 6 10 <p>Comparar el elemento buscado con el valor central: \\(10 &gt; 6\\), es mayor, entonces descartar el lado izquierdo.</p> 6 <p>Comparar el elemento buscado con el valor central: \\(10 = 10\\), es igual, entonces se encontr\u00f3.</p> <p>Si hubiesen sido distintos, como no quedan m\u00e1s elementos, el valor buscado no est\u00e1 en la lista.</p> <p>Escriba la funci\u00f3n <code>busqueda_binaria(lista, elemento)</code>que recibe una lista ordenada y un elemento que se desea encontrar. La funci\u00f3n debe retornar <code>True</code> si encuentra el <code>elemento</code> en la <code>lista</code> utilizando una b\u00fasqueda binaria. Si no se encuentra retornar <code>False</code>.</p>"},{"location":"listas/busqueda_binaria/#ejemplos","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; b\u00fasqueda_binaria([0, 1, 3, 8, 14, 18, 19, 34, 52], 3)\nTrue\n&gt;&gt;&gt; b\u00fasqueda_binaria([0, 1, 3, 8, 14, 18, 19, 34, 52], 17)\nFalse\n</code></pre> Soluci\u00f3n <pre><code>def busqueda_binaria(lista, elemento):\n    i = 0 # Indice izquierdo de la lista\n    d = len(lista) - 1 # Indice derecho de la lista\n    while i &lt;= d: # Buscamos mientras no se crucen los indices\n        m = (d + i) // 2 # Punto medio\n        if lista[m] == elemento: # Si encuentra el elemento\n            return True # Retorna verdadero\n        elif lista[m] &gt; elemento: # Si el valor del elemento es menor \n            # Nos quedamos con la parte izquierda del arreglo, es decir, el indice derecho es el punto medio - 1\n            d = m - 1  \n        elif lista[m] &lt; elemento: # Si el valor del elemento es mayor\n            # Nos quedamos con la parte derecha del arreglo, es decir, el indice izquierdo es el punto medio + 1\n            i = m + 1\n    return False # No encontramos el elemento\n# Pruebas\nprint(busqueda_binaria([0, 1, 3, 8, 14, 18, 19, 34, 52], 3))\nprint(busqueda_binaria([0, 1, 3, 8, 14, 18, 19, 34, 52], 17))\n</code></pre>"},{"location":"listas/busqueda_lineal/","title":"B\u00fasqueda secuencial","text":"<p>La b\u00fasqueda secuencial (o lineal) es un m\u00e9todo para encontrar un valor en una lista desordenada verificando cada elemento secuencialmente desde el primero hasta que el elemento buscado se encuentra o se llega al final de la lista.</p> <p>Escriba la funci\u00f3n <code>b\u00fasqueda_secuencial(lista, elemento)</code> que recibe una lista desordenada y un elemento que se desea encontrar. La funci\u00f3n debe retornar la posici\u00f3n del <code>elemento</code> en la <code>lista</code> utilizando una b\u00fasqueda secuencial. Si no se encuentra retornar <code>False</code>.</p>"},{"location":"listas/busqueda_lineal/#ejemplos","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; b\u00fasqueda_secuencial([11,23,58,31,56,77,43,12,65,19], 31)\n3\n&gt;&gt;&gt; b\u00fasqueda_secuencial([11,23,58,31,56,77,43,12,65,19], 13)\nFalse\n</code></pre> Soluci\u00f3n <pre><code>def busqueda_secuencial(lista, elemento):\n    # Recorremos el arreglo utilizando indices\n    for i in range(len(lista)):\n        if elemento == lista[i]: # Si encontramos el elemento\n            return i # Retornamos la posici\u00f3n\n    return False # Si no lo encontramos, se retorna falso\n# Pruebas\nprint(busqueda_secuencial([11,23,58,31,56,77,43,12,65,19], 31))\nprint(busqueda_secuencial([11,23,58,31,56,77,43,12,65,19], 13))\n</code></pre>"},{"location":"listas/cine/","title":"Cine","text":"<p>Usted desea ir al cine a ver la pr\u00f3xima pel\u00edcula del estudio Marvel lo antes posible para evitar los molestos spoilers. Para ello la p\u00e1gina del cine le muestra la lista sala con la disponibilidad de asientos. La sala del cine siempre ser\u00e1 representada por una lista con \\(n\\) listas, cada una de ellas con \\(n\\) strings. Cada string puede tener los valores <code>'O'</code> que indica que el asiento est\u00e1 disponible o <code>'X'</code> que indica que est\u00e1 ocupado.  El siguiente es un ejemplo para \\(n=5\\). Nota: el valor de \\(n\\) no deber\u00eda ser importante.</p> <pre><code>sala = [\n    [\"X\",\"X\",\"X\",\"O\",\"O\"],\n    [\"X\",\"X\",\"X\",\"X\",\"O\"],\n    [\"X\",\"O\",\"X\",\"O\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\",\"O\"],\n    [\"O\",\"O\",\"X\",\"O\",\"O\"],\n]\n</code></pre>"},{"location":"listas/cine/#ejercicios","title":"Ejercicios","text":""},{"location":"listas/cine/#asientos-disponibles","title":"Asientos disponibles","text":"<p>Escriba la funci\u00f3n <code>asientos_disponibles(sala)</code> que indique si la sala del cine tiene asientos disponibles. La funci\u00f3n debe retornar <code>True</code> si la sala tiene asientos disponibles y <code>False</code> en caso contrario.</p> <pre><code>&gt;&gt;&gt; asientos_disponibles(sala)\nTrue\n</code></pre> Soluci\u00f3n <pre><code>def asientos_disponibles(sala):\n    for fila in sala:\n        for asiento in fila:\n            if asiento == 'O':\n                return True #encontramos algun asiento disponible\n    return False #nunca encontramos un asiento disponible\n</code></pre>"},{"location":"listas/cine/#disponible","title":"Disponible","text":"<p>Escriba la funci\u00f3n <code>disponible(fila,columna,sala)</code> que reciba una sala del cine. La funci\u00f3n debe retornar <code>True</code> si el asiento de la fila y columna ingresados est\u00e1 disponible y <code>False</code> en caso contrario. Si ingresa una fila o columna que no existan tambi\u00e9n deber\u00e1 retornar <code>False</code>.</p> Soluci\u00f3n <pre><code>def disponible(fila, columna, sala):\n    if fila &gt;= 0 and fila &lt; len(sala):\n        if columna &gt;= 0 and columna &lt; len(sala[0]): \n            return sala[fila][columna] == \"O\"\n        else:\n            return False\n    else:\n        return False\n</code></pre> <pre><code>&gt;&gt;&gt; disponible(2, 4, sala)\nFalse\n&gt;&gt;&gt; disponible(10, 4, sala)\nFalse\n&gt;&gt;&gt; disponible(0, 3, sala)\nTrue\n</code></pre>"},{"location":"listas/cine/#porcentaje-disponible","title":"Porcentaje Disponible","text":"<p>Escriba la funci\u00f3n <code>porcentaje_disponible(sala)</code> que indique porcentualmente la disponibilidad de una sala de cine.</p> <pre><code>&gt;&gt;&gt; porcentaje_disponible(sala)\n0.2\n</code></pre> Soluci\u00f3n <pre><code>def porcentaje_disponible(sala):\n    cantidad_asientos = 0\n    cantidad_disponible = 0\n    for fila in sala:\n        for asiento in fila:\n            if asiento == 'O':\n                cantidad_disponible+=1\n            cantidad_asientos+=1\n    return round(cantidad_disponible/cantidad_asientos,1)\n</code></pre>"},{"location":"listas/cine/#espacio-suficiente","title":"Espacio suficiente","text":"<p>Usted desea ir con sus \\(m\\) amigos a ver la pel\u00edcula y todos quieren ir a ver la pel\u00edcula en la misma sala de cine. Debido al gr\u00e1n \u00e9xito en la pre-venta es posible que no queden muchos asientos. Escriba la funci\u00f3n <code>hay_espacio_suficiente(m,sala)</code> que reciba un entero \\(m\\) con la cantidad de amigos (usted incluido) que quieren ir a ver la pel\u00edcula y la sala del cine. La funci\u00f3n debe retornar <code>True</code> si hay espacio suficiente para que todos puedan ver la pel\u00edcula en la sala de cine o <code>False</code> en caso contrario :(</p> <pre><code>&gt;&gt;&gt; hay_espacio_suficiente(12, sala)\nFalse\n&gt;&gt;&gt; hay_espacio_suficiente(3, sala)\nTrue\n</code></pre> Soluci\u00f3n <pre><code>def hay_espacio_suficiente(m,sala):\n    cantidad_disponible = 0\n    for fila in sala:\n        for asiento in fila:\n            if asiento == 'O':\n                cantidad_disponible+=1\n    if m &lt;= cantidad_disponible:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"listas/derivadas/","title":"Aproximaci\u00f3n de derivadas","text":"<p>Podemos aproximar la derivada de una funci\u00f3n utilizando el m\u00e9todo denominado Diferencias Finitas. Este m\u00e9todo se puede obtener utilizando una expansi\u00f3n en Series de Taylor de una funci\u00f3n \\(f\\) respecto a un punto cercano. Considerando una discretizaci\u00f3n de \\(N\\) puntos sobre la variable \\(x\\in[x_{\\text{min}}, x_{\\text{max}}]\\), definimos</p> \\[ x_i = x_{\\text{min}} + i \\Delta x, \\quad i=0, 1, \\dots, N-1, \\quad  \\Delta x = \\dfrac{x_{\\text{max}} - x_{\\text{min}}}{N - 1}. \\] <p>Ahora, definiremos \\(f_i\\) como la aproximaci\u00f3n de la funci\u00f3n \\(f\\) en el punto \\(x=x_i\\), es decir, \\(f_i = f(x_i)\\).</p> <p>Podemos aproximar la derivada de la funci\u00f3n \\(f\\) en el punto \\(x_i\\), o sea \\(f'_i=f'(x_i)\\), de las siguientes \\(3\\) maneras:</p> <ul> <li>Diferencia finita adelantada</li> </ul> \\[f'_i \\approx \\dfrac{f_{i+1} - f_i}{\\Delta x}\\] <ul> <li>Diferencia finita atrasada</li> </ul> \\[f'_i \\approx \\dfrac{f_{i} - f_{i-1}}{\\Delta x}\\] <ul> <li>Diferencia finita central</li> </ul> \\[f'_i \\approx \\dfrac{f_{i+1} - f_{i-1}}{2\\Delta x} \\] <p>Realice un programa que solicite:</p> <ol> <li>El dominio de \\(x\\), es decir, \\(x_{\\text{min}}\\) y \\(x_{\\text{max}}\\). </li> <li>La cantidad de puntos de discretizaci\u00f3n \\(N\\).</li> <li>El tipo de aproximaci\u00f3n, o sea, si es adelantada, atrasada o central.</li> </ol> <p>Y calcule la derivada de la funci\u00f3n. El programa debe mostrar el error entre la derivada real y su aproximaci\u00f3n. Para esto utilizaremos la norma \\(L-2\\) o distancia euclideana de la siguiente forma:</p> \\[ \\text{Error} = \\sqrt{\\sum_{i=inicio}^{fin}(f_i-f'_i)^2}, \\] <p>donde \\(inicio\\) y \\(fin\\) depender\u00e1 de el tipo de aproximaci\u00f3n que est\u00e9 utilizando.</p> <p>La funci\u00f3n de prueba que utilizaremos ser\u00e1: \\(f(x) = x \\sin (x)\\).</p>"},{"location":"listas/derivadas/#ejemplos","title":"Ejemplos","text":"<p><pre><code>x min: 0\nx max: 5\nN: 32\nTipo: atrasada\nError: 1.1242595459725062\n</code></pre> <pre><code>x min: 0\nx max: 5\nN: 32\nTipo: central\nError: 0.07297275585321655\n</code></pre> <pre><code>x min: 0\nx max: 5\nN: 64\nTipo: adelantada\nError: 0.7766862915195681\n</code></pre> <pre><code>x min: 0\nx max: 5\nN: 64\nTipo: central\nError: 0.025254054492286914\n</code></pre></p> Soluci\u00f3n <pre><code>from math import sin, cos\n\n# Funcion a derivar\ndef f(x):\n    return x * sin(x)\n\n# Derivada de la funcion\ndef fp(x):\n    return sin(x) + x * cos(x)\n\n# Evaluar la funcion en una lista de valores\ndef evaluar_f(x):\n    fx = list()\n    for i in range(len(x)):\n        fx.append(f(x[i]))\n    return fx\n\n# Evaluar la derivada en una lista de valores\ndef evaluar_fp(x):\n    fpx = list()\n    for i in range(len(x)):\n        fpx.append(fp(x[i]))\n    return fpx\n\n# Cacular Diferencias finitas\ndef diferencias_finitas(x, dx, tipo):\n    fd = list()\n    N = len(x)\n    fe = evaluar_f(x)\n    # Calcular seg\u00fan el tipo de diferencias finitas\n    if tipo == \"adelantada\":\n        for i in range(N-1):\n            fw = (fe[i+1] - fe[i]) / dx\n            fd.append(fw)    \n    elif tipo == \"atrasada\":\n        for i in range(1, N):\n            bw = (fe[i] - fe[i-1]) / dx\n            fd.append(bw)\n    elif tipo == \"central\":\n        for i in range(1, N-1):\n            cd = (fe[i+1] - fe[i-1]) / (2 * dx)\n            fd.append(cd)\n    return fd\n\n# Calcular el error\ndef error(real, approx):\n    err = 0\n    for i in range(len(approx)):\n        err += (real[i] - approx[i]) ** 2\n    return err ** 0.5\n\n# Solicitar datos\nx_min = float(input(\"x min: \"))\nx_max = float(input(\"x max: \"))\nN = int(input(\"N: \"))\ntipo = input(\"Tipo: \")\n\n# Crear lista de valores de x\nx = list()\ndx = (x_max - x_min) / (N - 1)\nfor i in range(N):\n    x.append(x_min + i * dx)\n\n# Calcular diferencias finitas y derivada exacta\nfd = diferencias_finitas(x, dx, tipo)\nfpe = evaluar_fp(x)\n\n# Obtener valores de inicio y fin para el error\n# Considerar que el error se calcula en los puntos interiores seg\u00fan el tipo de diferencias finitas\nif tipo == \"adelantada\":\n    i = 0\n    f = N - 1\nelif tipo == \"atrasada\":\n    i = 1\n    f = N\nelif tipo == \"central\":\n    i = 1\n    f = N - 1\n\n# Calcular error\nerror = error(fpe[i:f], fd)\nprint(\"Error:\", error)\n</code></pre>"},{"location":"listas/desviacion/","title":"Desviaci\u00f3n est\u00e1ndar","text":"<p>La desviaci\u00f3n est\u00e1ndar es una medida que se usa para cuantificar la variaci\u00f3n o dispersi\u00f3n de un conjunto de datos num\u00e9ricos.</p> \\[\\begin{equation}     s = \\sqrt{\\dfrac{1}{n-1}\\sum_{i=1}^n (x_i-\\mu)^2} \\end{equation}\\] <p>Donde \\(n\\) es la cantidad de datos, \\(\\mu\\) es el promedio y los \\(x_i\\) son cada uno de los datos. Esto significa que hay que hacerlo siguiendo estos pasos:</p> <ul> <li>Calcular el promedio de los valores;</li> <li>a cada valor hay que restarle el promedio, y el resultado elevarlo al cuadrado;</li> <li>sumar todos los valores obtenidos;</li> <li>dividir la suma por la cantidad de valores; y</li> <li>sacar la ra\u00edz cuadrada del resultado.</li> </ul> <p>Desarrolle la funci\u00f3n <code>desviacion_estandar(valores)</code> cuyo par\u00e1metro <code>valores</code> sea una lista de n\u00fameros reales. La funci\u00f3n debe retornar la desviaci\u00f3n est\u00e1ndar de los valores.</p>"},{"location":"listas/desviacion/#ejemplos","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; desviacion_estandar([1.3, 1.3, 1.3])\n0.0\n&gt;&gt;&gt; desviacion_estandar([4.0, 1.0, 11.0, 13.0, 2.0, 7.0])\n4.88535225615\n&gt;&gt;&gt; desviacion_estandar([1.5, 9.5])\n5.65685424949\n</code></pre> Soluci\u00f3n <pre><code>def desviacion_estandar(valores):\n    # Numero de elementos\n    n = len(valores) \n    # Calculo del promedio\n    promedio = sum(valores) / n\n    lista = [] # Lista para guardar las diferencias al cuadrado\n    for val in valores: # Se recorren los valores\n        lista.append((val - promedio) ** 2) # Se agregan las diferencias al cuadrado\n    desv = (sum(lista) / (n - 1)) ** 0.5 # Calculo de la desviacion\n    return desv\n# Pruebas\nprint(desviacion_estandar([1.3, 1.3, 1.3]))\nprint(desviacion_estandar([4.0, 1.0, 11.0, 13.0, 2.0, 7.0]))\nprint(desviacion_estandar([1.5, 9.5]))\n</code></pre>"},{"location":"listas/ejemplos/","title":"Ejercicios","text":""},{"location":"listas/ejemplos/#inicial","title":"Inicial","text":"<p>Construya un programa que realice lo siguiente:</p> <ul> <li>Construir y ordenar de mayor a menor una lista con valores ingresados del teclado</li> <li>Recorrer la lista y contamos cu\u00e1ntos n\u00fameros pares y cu\u00e1ntos impares hay, con <code>while</code> y con <code>for</code></li> <li>Usar <code>range</code> para generar los \u00edndices de una lista</li> </ul> Soluci\u00f3n <pre><code>N = int(input(\"Ingrese N: \")) # Numero de elementos a guardar\nlista = [] # Lista para guardar los valores\ni = 0 # Contador para controlar los elementos\nwhile i &lt; N:\n    # Entrada de valores\n    n = int(input(\"Ingrese valor: \")) \n    lista.append(n) # Se agregan a la lista\n    i += 1\n\n# Ordenar lista\nlista.sort() \nprint(lista)\n\n# Contar pares/impares con while\ni = 0\nn_pares = 0 # Contador de pares\nn_impares = 0 # Contador de impares\nwhile i &lt; len(lista):\n    if lista[i] % 2 == 0:\n        n_pares += 1\n    else:\n        n_impares += 1\n    i += 1\n# Mostrar resultado\nprint(\"Pares:\", n_pares)\nprint(\"Impares:\", n_impares)\n\n# Contar pares/impares con for 1\nn_pares = 0 # Contador de pares\nn_impares = 0 # Contador de impares\nfor valor in lista:\n    if valor % 2 == 0:\n        n_pares += 1\n    else:\n        n_impares += 1\n    i += 1\n# Mostrar resultado\nprint(\"Pares:\", n_pares)\nprint(\"Impares:\", n_impares)\n\n# Contar pares/impares con for 2\nn_pares = 0 # Contador de pares\nn_impares = 0 # Contador de impares\nfor i in range(len(lista)):\n    if lista[i] % 2 == 0:\n        n_pares += 1\n    else:\n        n_impares += 1\n    i += 1\n# Mostrar resultado\nprint(\"Pares:\", n_pares)\nprint(\"Impares:\", n_impares)\n</code></pre>"},{"location":"listas/ejemplos/#paresimpares","title":"Pares/impares","text":"<p>De una lista de n\u00fameros generar dos listas, una con los pares y otra con los impares</p> Soluci\u00f3n <pre><code>from random import choice, randint\n# Creacion de lista \nlista = list(range(randint(20, 50)))\n# Estructuras para guardar los valores\npares = []\nimpares = []\n# Se recorre la lista\nfor valor in lista:\n    # Verificamos si el valor es para o impar y lo guardamos en la lista correspondiente\n    if valor % 2 == 0:\n        pares.append(valor)\n    else:\n        impares.append(valor)\n# Mostrar los valores\nprint(\"Pares:\", pares)\nprint(\"Impares:\", impares)\n</code></pre>"},{"location":"listas/ejemplos/#palabras","title":"Palabras","text":"<p>De una lista de palabras, encontrar la m\u00e1s larga</p> Soluci\u00f3n <pre><code>def palabra_mas_larga(palabras):\n    # Consideramos un string vacio como la palabra mas larga\n    max_pal = \"\"\n    # Recorremos la lista\n    for palabra in palabras:\n        # Comparamos los largos de palabra\n        if len(palabra) &gt; len(max_pal):\n            max_pal = palabra # Asignamos la palabra mas larga que encontremos\n    return max_pal\n\npalabras = [\"murcielago\", \"hola\", \"chao\", \"paralelepipedo\", \"perro\", \"gato\", \"elefante\"] # Lista de ejemplo\nprint(\"Palabra mas larga:\", palabra_mas_larga(palabras)) # Resultado\n</code></pre>"},{"location":"listas/ejemplos/#repetidos","title":"Repetidos","text":"<p>Escribir una funci\u00f3n que, dada una lista de n\u00fameros enteros entregada como par\u00e1metro, retorne una nueva  lista que mantenga el orden de la lista original pero no tenga repetidos.</p> Soluci\u00f3n <pre><code>def sin_repetidos(lista):\n    nueva = [] # Lista a retornar\n    for val in lista: # Recorremos la lista original\n        if val not in nueva: # Si no encontramos el valor en la que retornaremos\n            nueva.append(val) # Agregamos el elemento\n    return nueva \n\nlista = [1, 2, 2, 1, 4, 6, 2, 3, 4, 4, 1]\nprint(\"Lista original:\", lista)\nprint(\"Sin repetidos:\", sin_repetidos(lista))\n</code></pre>"},{"location":"listas/ejemplos/#puntos","title":"Puntos","text":"<p>De una lista de puntos: <code>[ [x0,y0], [x1,y1], ..., [xn,yn] ]</code> encontrar el que est\u00e1 m\u00e1s lejos del origen.</p> Soluci\u00f3n <pre><code>def distancia_origen(x, y):\n    return (x ** 2 + y ** 2) ** 0.5\n\ndef mas_lejano(puntos):\n    # Utilizamos el patron para buscar un maximo\n    max_dist = -1 \n    max_punto = []\n    # Recorremos el arreglo\n    for punto in puntos:\n        # Calculamos la distancia al origen\n        d = distancia_origen(punto[0], punto[1])\n        if d &gt; max_dist: # Guardamos la informacion del punto mas lejano \n            max_punto = punto\n            max_dist = d\n    return max_punto\n\n# Puntos de ejemplo\npuntos = [[0, 1], [1, 1.1], [2, 1], [0.4, 5]]\npunto = mas_lejano(puntos)\nprint(\"Punto mas lejano:\", punto)\n</code></pre> <p>Desaf\u00edo: Ordenar la lista desde el punto m\u00e1s cercano al m\u00e1s lejano del origen</p> Soluci\u00f3n <pre><code>def distancia_origen(x, y):\n    return (x ** 2 + y ** 2) ** 0.5\n\ndef mas_lejano(puntos):\n    # Utilizamos el patron para buscar un maximo\n    max_dist = -1 \n    max_punto = []\n    # Recorremos el arreglo\n    for punto in puntos:\n        # Calculamos la distancia al origen\n        d = distancia_origen(punto[0], punto[1])\n        if d &gt; max_dist: # Guardamos la informacion del punto mas lejano \n            max_punto = punto\n            max_dist = d\n    return max_punto\n\ndef orden(puntos):\n    # Creamos una lista donde guardaremos los puntos de manera \"descendente\"\n    orden = [] \n    # Calcularemos el punto mas lejano y lo removeremos de la lista\n    # Recorremos la lista de puntos mientras existan\n    while len(puntos) &gt; 0: \n        lejano = mas_lejano(puntos) # Obtenemos el punto mas lejano\n        orden.append(lejano) # Lo agregamos a nuestra lista\n        puntos.remove(lejano) # Lo removemos de los puntos\n    orden.reverse() # Como agregamos los puntos en orden descendente, invertimos la lista\n    return orden\n\n# Puntos de ejemplo\npuntos = [[0, 1], [-1, 1], [-10, 10], [2.3, 0.1], [1, 1.1], [2, 1], [0.4, 5]]\nordenado = orden(puntos) # Ordenamiento\nprint(ordenado) # Salida\n</code></pre>"},{"location":"listas/merge/","title":"Merge","text":"<p>Escribir la funci\u00f3n <code>merge(lista1, lista2)</code> que recibe como par\u00e1metros dos listas de n\u00fameros que se encuentran ordenadas ascendentemente. La funci\u00f3n debe retornar una nueva lista ordenada que contiene la mezcla de las dos listas pasadas como par\u00e1metro. La idea es aprovechar el orden de las listas de entrada, es decir, no basta con concatenarlas y ordenar el resultado. Esto se puede pensar como la mezcla de dos barajas de cartas que ya est\u00e1n ordenadas. Claramente preferiremos aprovechar el orden antes que simplemente juntarlas y ordenarlas de nuevo.</p>"},{"location":"listas/merge/#ejemplo","title":"Ejemplo","text":"<pre><code>&gt;&gt;&gt; l1 = [1, 1, 2, 3, 5, 6, 10, 12]\n&gt;&gt;&gt; l2 = [0, 2, 5, 5, 7, 8]\n&gt;&gt;&gt; merge(l1, l2)\n[0, 1, 1, 2, 2, 3, 5, 5, 5, 6, 7, 8, 10, 12]\n</code></pre> Soluci\u00f3n <pre><code>def merge(lista1, lista2):\n    # Nueva lista para guardar elementos\n    nueva = list() \n    # Vamos extraer los primeros elementos de cada lista y compararlos mientras se pueda\n    while len(lista1) &gt; 0 and len(lista2) &gt; 0:\n        # Si el primer elemento de la primera lista es menor o igual que el de la segunda\n        if lista1[0] &lt;= lista2[0]:\n            # Lo agregamos a nuesta nueva lista\n            nueva.append(lista1[0]) \n            # Removemos el primer elemento de la primera lista\n            lista1 = lista1[1:]\n        else: # Si el primer elemento de la segunda lista es menor\n            # Se agrega a la nueva lista\n            nueva.append(lista2[0]) \n            # Removemos el primer elemento de la segunda lista\n            lista2 = lista2[1:]\n    # Notar que en algun momento una de las dos listas quedara vacia antes que la otra\n    # Con los ciclos que siguen vamos a agregar los elementos sobrantes a nuesta nueva lista\n    # Solo uno de los siguientes dos ciclos se ejecutara\n    for v1 in lista1:\n        nueva.append(v1)\n    for v2 in lista2:\n        nueva.append(v2)\n    return nueva\n# Prueba\nl1 = [1, 1, 2, 3, 5, 6, 10, 12]\nl2 = [0, 2, 5, 5, 7, 8]\nprint(merge(l1, l2))\n</code></pre>"},{"location":"listas/notas/","title":"Notas","text":"<p>El profesor de una asignatura de la USM registra las notas de sus alumnos en una lista como la siguiente:</p> <pre><code>alumnos = [\n    ['Alberto Gonzalez', 40, 30, 70], \n    ['Francisca Almonacid', 100, 40],\n    ['Pedro Reyes', 30, 50],\n    ['Juan Campos', 30, 60, 30, 70],\n    ['Andrea Zamora', 30],\n    #...\n]\n</code></pre> <p>Los datos que se almacenan, para cada alumno, son el nombre y una cantidad variable de notas. Como se ve en el ejemplo, la cantidad de notas puede variar de un alumno a otro.</p> <p>Se le pide que escriba las siguientes funciones:</p> <ol> <li>La funci\u00f3n <code>calcular_promedio(alumnos)</code> que recibe la lista alumnos con la estructura que se indic\u00f3, y retorna una nueva lista que contiene el nombre y el promedio de cada alumno.</li> <li>La funcion <code>mejor_promedio(alumnos)</code> que entrega el nombre del alumno con mejor promedio. Si hay varios alumnos empatados con el mejor promedio, la funci\u00f3n retorna alguno de ellos, sin importar cu\u00e1l.</li> </ol>"},{"location":"listas/notas/#ejemplos","title":"Ejemplos:","text":"<p>Pregunta 1.</p> <pre><code>&gt;&gt;&gt; calcular_promedio(alumnos)\n[ ['Alberto Gonzalez', 47], ['Francisca Almonacid', 70],\n    ['Pedro Reyes', 40], ['Juan Campos', 48], ['Andrea Zamora', 30]\n]\n</code></pre> <p>Pregunta 2. <pre><code>&gt;&gt;&gt; mejor_promedio(alumnos)\n'Francisca Almonacid'\n</code></pre></p> Soluci\u00f3n <pre><code>def calcular_promedio(alumnos):\n    resultado = []\n    for alumno in alumnos:\n        nombre = alumno[0]\n        notas = alumno[1:]  # Todas las notas (desde \u00edndice 1 en adelante)\n        promedio = round(sum(notas) / len(notas))  # Promedio redondeado al entero m\u00e1s cercano\n        # Agregar [nombre, promedio] a la lista resultado\n        resultado.append([nombre, promedio])\n    return resultado\n\n\ndef mejor_promedio(alumnos):\n    # Primero calculamos los promedios\n    promedios = calcular_promedio(alumnos)\n    # Inicializamos con el primer alumno\n    mejor_nombre = promedios[0][0]\n    mejor_prom = promedios[0][1]\n    # Buscamos el mejor promedio\n    for alumno_promedio in promedios:\n        nombre = alumno_promedio[0]\n        promedio = alumno_promedio[1]\n        if promedio &gt; mejor_prom:\n            mejor_prom = promedio\n            mejor_nombre = nombre\n    return mejor_nombre\n\n\n# Lista de alumnos con sus notas\nalumnos = [\n    ['Alberto Gonzalez', 40, 30, 70],\n    ['Francisca Almonacid', 100, 40],\n    ['Pedro Reyes', 30, 50],\n    ['Juan Campos', 30, 60, 30, 70],\n    ['Andrea Zamora', 30]\n]\n\n# Prueba de calcular_promedio\npromedios = calcular_promedio(alumnos)\nprint(\"Promedios de alumnos:\", promedios)\n\n# Prueba de mejor_promedio\nmejor = mejor_promedio(alumnos)\nprint(\"Alumno con mejor promedio:\", mejor)\n</code></pre>"},{"location":"listas/producto_interno/","title":"Producto Interno","text":"<p>Sean \\(\\mathbf{u}, \\mathbf{v} \\in \\mathbb{R}^n\\) dos vectores definidos como:</p> \\[ \\mathbf{u} = \\left(u_1, u_2, \\dots, u_n\\right)^{\\top}, \\quad \\mathbf{v} = \\left(v_1, v_2, \\dots, v_n\\right)^{\\top}. \\] <p>El producto interno, escalar o punto se calcula de la siguiente forma:</p> \\[ \\mathbf{u}\\cdot\\mathbf{v} = u_1\\,v_1 + u_2\\,v_2 + \\cdots + u_n\\,v_n =  \\sum_{i=1}^nu_i\\,v_i. \\] <p>Desarrolle la funci\u00f3n <code>producto_interno(u, v)</code> que recibe dos listas que representan los vectores \\(\\mathbf{u}\\) y \\(\\mathbf{v}\\), y calcule el producto interno.</p>"},{"location":"listas/producto_interno/#ejemplos","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; producto_interno([1, 0], [0, 1])\n0\n&gt;&gt;&gt; producto_interno([1, 2, 3], [4, 5, 6])\n32\n&gt;&gt;&gt; producto_interno([0, -1, 2.3, 4, 99], [-1, 0, 0, 2, 2])\n206.0\n</code></pre> Soluci\u00f3n <pre><code>def producto_interno(u, v):\n    n = len(u) # u y v tienen el mismo tama\u00f1o\n    productos = [] # Lista para guardar los productos\n    for i in range(n): # Recorremos los elementos de u y v\n        productos.append(u[i] * v[i]) # Guardamos el producto\n    return sum(productos) # Sumamos los productos\n</code></pre>"},{"location":"listas/producto_matriz/","title":"Producto matriz-vector","text":"<p>Sea \\(A\\in\\mathbb{R}^{n\\times n}\\) una matriz y \\(\\mathbf{b}\\in\\mathbb{R}^n\\) un vector, definidos como:</p> \\[ A =  \\begin{pmatrix}     a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1, n} \\\\     a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     a_{n,1} &amp; a_{n,2} &amp; \\cdots &amp; a_{n, n} \\\\ \\end{pmatrix} \\quad \\text{y} \\quad \\mathbf{b} =  \\begin{pmatrix}     b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_n \\end{pmatrix}. \\] <p>El producto matriz-vector se calcula de la siguiente manera:</p> \\[ A\\,\\mathbf{b} =  \\begin{pmatrix}     a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1, n} \\\\     a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     a_{n,1} &amp; a_{n,2} &amp; \\cdots &amp; a_{n, n} \\\\ \\end{pmatrix} \\begin{pmatrix}     b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_n \\end{pmatrix} =  \\begin{pmatrix}     a_{1, 1}\\,b_{1} + a_{1, 2}\\,b_{2} + \\dots + a_{1, n}\\,b_{n} \\\\     a_{2, 1}\\,b_{1} + a_{2, 2}\\,b_{2} + \\dots + a_{2, n}\\,b_{n} \\\\     \\vdots \\\\     a_{n, 1}\\,b_{1} + a_{n, 2}\\,b_{2} + \\dots + a_{n, n}\\,b_{n}  \\end{pmatrix} \\] <p>o escrito de forma compacta</p> \\[ A\\,\\mathbf{b} =  \\begin{pmatrix} \\sum_{i=1}^n a_{1, i}\\,b_i \\\\ \\sum_{i=1}^n a_{2, i}\\,b_i \\\\ \\vdots \\\\ \\sum_{i=1}^n a_{n, i}\\,b_i \\\\ \\end{pmatrix}. \\] <p>Desarrolle un programa que calcule el producto matriz-vector para un valor de \\(n\\) ingresado por usuario. El programa debe mostrar la matriz y el vector y finalmente el producto.</p> <p>Puede generar la matriz \\(A\\) y el vector \\(\\mathbf{b}\\) con valores aleatorios utilizando el siguiente c\u00f3digo:</p> <p>Example</p> <pre><code>from random import random\n\ndef crear_vector(n):\n    v = []\n    for i in range(n):\n        v.append(random())\n    return v\n\ndef crear_matriz(n):\n    m = []\n    for i in range(n):\n        m.append(crear_vector(n))\n    return m\n</code></pre>"},{"location":"listas/producto_matriz/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese n: 4\nA: \n0.29897956887511123 0.4854449886464737 0.6208100585958172 0.09177889843579046 \n0.9185016249163171 0.9914276017940338 0.11848324268473831 0.6943613227580757 \n0.5430249582511094 0.16139741654489315 0.5672829232809159 0.5307077861481704 \n0.39333373239457714 0.6079569057108376 0.023416842116470327 0.012533574907011902 \n\nb: \n0.13577465224021967\n0.32505790640569954\n0.272909157229402\n0.4923975548377869\n\nAb: \n0.41300803374191936\n0.8212175987039882\n0.5423284519216363\n0.2635881219700423\n</code></pre> Soluci\u00f3n <pre><code>from random import random\n\n# Funci\u00f3n para crear un vector de n elementos con valores aleatorios\ndef crear_vector(n):\n    v = []\n    for i in range(n):\n        v.append(random())\n    return v\n\n# Funci\u00f3n para crear una matriz de n x n elementos con valores aleatorios\ndef crear_matriz(n):\n    m = []\n    for i in range(n):\n        m.append(crear_vector(n))\n    return m\n\n# Funci\u00f3n para mostrar un vector\ndef mostrar_vector(v):\n    for e in v:\n        print(e)\n\n# Funci\u00f3n para mostrar una matriz\ndef mostrar_matriz(m):\n    for fila in m:\n        f = \"\" # Se crea un string vacio para visualizar la fila\n        for e in fila:\n            f += str(e) + \" \" # Se agrega un espacio para visualizar\n        print(f)\n\n# Funci\u00f3n para calcular el producto matriz-vector\ndef producto_matriz_vector(A, b):\n    n = len(b)\n    Ab = [] # Se crea un vector vac\u00edo para guardar el producto\n    for i in range(n): # Se recorre cada fila i\n        c = 0 # Se crea una variable para guardar el elemento c_i\n        for j in range(n): # Se recorre cada elemento j de la fila i\n            c += A[i][j] * b[j] # Se calcula el elemento c_i\n        Ab.append(c) # Se agrega el elemento c_i al vector\n    return Ab # Se retorna el vector\n\n\n# Solicitar n\nn = int(input(\"Ingrese n: \"))\n\n# Crear matriz y vector\nA = crear_matriz(n)\nb = crear_vector(n)\n\n# Mostrar matriz\nprint(\"A: \")\nmostrar_matriz(A)\nprint()\n\n# Mostrar vector\nprint(\"b: \")\nmostrar_vector(b)\nprint()\n\n# Producto matriz-vector\nAb = producto_matriz_vector(A, b)\n\n# Mostrar producto\nprint(\"Ab: \")\nmostrar_vector(Ab)\n</code></pre>"},{"location":"listas/producto_matriz/#producto-matriz-matriz","title":"Producto matriz-matriz","text":"<p>Sean \\(A, B\\in\\mathbb{R}^{n\\times n}\\)  matrices definidas como:</p> \\[ A =  \\begin{pmatrix}     a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1, n} \\\\     a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     a_{n,1} &amp; a_{n,2} &amp; \\cdots &amp; a_{n, n} \\\\ \\end{pmatrix} \\quad \\text{y} \\quad B =  \\begin{pmatrix}     b_{1,1} &amp; b_{1,2} &amp; \\cdots &amp; b_{1, n} \\\\     b_{2,1} &amp; b_{2,2} &amp; \\cdots &amp; b_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     b_{n,1} &amp; b_{n,2} &amp; \\cdots &amp; b_{n, n} \\\\ \\end{pmatrix}. \\] <p>El producto de matrices se calcula de la siguiente manera:</p> \\[ \\begin{split}  A\\,B &amp;= \\begin{pmatrix}     a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1, n} \\\\     a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     a_{n,1} &amp; a_{n,2} &amp; \\cdots &amp; a_{n, n} \\\\ \\end{pmatrix} \\begin{pmatrix}     b_{1,1} &amp; b_{1,2} &amp; \\cdots &amp; b_{1, n} \\\\     b_{2,1} &amp; b_{2,2} &amp; \\cdots &amp; b_{2, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     b_{n,1} &amp; b_{n,2} &amp; \\cdots &amp; b_{n, n} \\\\ \\end{pmatrix} \\\\[1em] &amp;=  \\begin{pmatrix}     \\sum_{i=1}^n a_{1, i}\\,b_{i, 1} &amp; \\sum_{i=1}^n a_{1, i}\\,b_{i, 2} &amp; \\dots &amp; \\sum_{i=1}^n a_{1, i}\\,b_{i, n} \\\\     \\sum_{i=1}^n a_{2, i}\\,b_{i, 1} &amp; \\sum_{i=1}^n a_{2, i}\\,b_{i, 2} &amp; \\dots &amp; \\sum_{i=1}^n a_{2, i}\\,b_{i, n} \\\\     \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\     \\sum_{i=1}^n a_{n, i}\\,b_{i, 1} &amp; \\sum_{i=1}^n a_{n, i}\\,b_{i, 2} &amp; \\dots &amp; \\sum_{i=1}^n a_{n, i}\\,b_{i, n} \\end{pmatrix}. \\end{split} \\] <p>Extienda su programa anterior o desarrolle uno nuevo para calcular el producto de matrices.  El programa debe solicitar el valor de \\(n\\), mostrar las matrices y luego el resultado. Puede generar las matrices con valores aleatorios utilizando el c\u00f3digo de la secci\u00f3n anterior.</p>"},{"location":"listas/producto_matriz/#ejemplo_1","title":"Ejemplo","text":"<pre><code>Ingrese n: 3\nA: \n0.7579130713983545 0.7051866951144764 0.7093682532601882 \n0.6835898432342268 0.5076784751826147 0.7544466570278985 \n0.2875664351545816 0.10466389947529275 0.8882499269287549 \n\nB: \n0.8871720889936138 0.06174559217119968 0.9311381318484788 \n0.3335438666265823 0.11681278877449985 0.8556315217419117 \n0.3278333631933946 0.34297234504926755 0.26754793936057886 \n\nAB: \n1.1401646000190586 0.37246630919492857 1.4988917408659321 \n1.0231276557758922 0.36026633733502067 1.272752924301118 \n0.5812288776290825 0.33462720223749903 0.5949672423786242 \n</code></pre> Soluci\u00f3n <pre><code>from random import random\n\n# Funci\u00f3n para crear un vector de n elementos con valores aleatorios\ndef crear_vector(n):\n    v = []\n    for i in range(n):\n        v.append(random())\n    return v\n\n# Funci\u00f3n para crear una matriz de n x n elementos con valores aleatorios\ndef crear_matriz(n):\n    m = []\n    for i in range(n):\n        m.append(crear_vector(n))\n    return m\n\n# Funci\u00f3n para mostrar una matriz\ndef mostrar_matriz(m):\n    for fila in m:\n        f = \"\" # Se crea un string vacio para visualizar la fila\n        for e in fila:\n            f += str(e) + \" \" # Se agrega un espacio para visualizar\n        print(f)\n\n# Funci\u00f3n para calcular el producto matriz-matriz\ndef producto_matriz_matriz(A, B):\n    n = len(A) # Se asume que A y B son matrices cuadradas\n    C = [] # Se crea una \"matriz\" vac\u00eda para guardar el producto \n    for i in range(n): # Se recorre cada fila i\n        fila = [] # Se crea una fila vacia para guardar los elementos de la fila i\n        for j in range(n): # Se recorre cada columna j\n            c = 0 # Se crea una variable para guardar el elemento c_ij\n            for k in range(n): # Se recorre cada elemento k de la fila i y columna j\n                c += A[i][k] * B[k][j]\n            fila.append(c) # Se agrega el elemento c_ij a la fila\n        C.append(fila) # Se agrega la fila a la matriz\n    return C\n\n\n# Solicitar n\nn = int(input(\"Ingrese n: \"))\n\n# Crear vector y matriz\nA = crear_matriz(n)\nB = crear_matriz(n)\n\n# Mostrar matrices\nprint(\"A: \")\nmostrar_matriz(A)\nprint()\nprint(\"B: \")\nmostrar_matriz(B)\nprint()\n\n# Producto matriz-vector\nprint(\"AB: \")\nAB = producto_matriz_matriz(A, B)\n\n# Mostrar producto\nmostrar_matriz(AB)\n</code></pre>"},{"location":"listas/productos/","title":"Productos","text":"<p>El personal encargado de reponer productos en un supermercado actualiza una lista de productos de acuerdo a lo que va encontrando en su recorrido por los pasillos. Se tiene una lista de productos como la siguiente: <pre><code>productos = [ ['fideos', 'carozzi', 30, 1], ['arroz', 'tucapel', 23, 2], ...]\n</code></pre> Los productos son almacenados de acuerdo a su categor\u00eda, marca, n\u00famero de unidades y pasillo en el que se encuentra.</p>"},{"location":"listas/productos/#ejercicios","title":"Ejercicios","text":"<p>a. Cree la funci\u00f3n <code>actualizar_unidades_a(categor\u00eda, marca, unidades, productos)</code> que recibe una categor\u00eda, una marca, el nuevo n\u00famero de unidades de ese producto y la lista productos. El programa debe retornar la lista productos con el nuevo n\u00famero de unidades. Considere que los productos y marcas a actualizar ya est\u00e1n incluidos en la lista productos.</p> <p><pre><code>&gt;&gt;&gt; productos = actualizar_unidades_a('fideos', 'carozzi', 15, productos)\n&gt;&gt;&gt; print(productos)\n[['fideos', 'carozzi', 15, 1], ['arroz', 'tucapel', 23, 2]]\n</code></pre> b. Modifique el programa anterior para que cuando se quiera actualizar un producto no incluido en la lista productos original, se cree un nuevo registro. Cuando se quiera actualizar un producto que no se encuentra en productos, el programa debe solicitar al usuario el ingreso del pasillo en el cual el producto se encuentra. La funci\u00f3n debe retornar la lista productos ordenada de menor a mayor seg\u00fan el n\u00famero de pasillo. <pre><code>&gt;&gt;&gt; productos = actualizar_unidades_b('az\u00facar', 'ianza', 12, productos)\nEl producto: az\u00facar (ianza) no es encuentra en los registros.\n&gt;&gt;&gt; Indique n\u00famero de pasillo: 1\n&gt;&gt;&gt; print(productos)\n[['az\u00facar', 'ianza', 12, 1], ['fideos', 'carozzi', 15, 1], ['arroz',\n'tucapel', 23, 2]]\n</code></pre></p> <p>c. Cree la funci\u00f3n <code>borrar_productos(lista_productos, productos)</code> que permita eliminar los productos contenidos en lista_productos de la lista productos. Considere el siguiente ejemplo: <pre><code>&gt;&gt;&gt; lista_productos = [['az\u00facar', 'ianza'], ['fideos', 'carozzi']]\n&gt;&gt;&gt; productos = borrar_productos(lista_productos, productos)\n&gt;&gt;&gt; print(productos)\n[['arroz', 'tucapel', 23, 2]]\n</code></pre></p> Soluci\u00f3n <pre><code>def actualizar_unidades_a(categoria, marca, unidades, productos):\n    for i in range(len(productos)):\n        if categoria == productos[i][0] and marca == productos[i][1]:\n            productos[i][2] = unidades\n    return productos\n\ndef actualizar_unidades_b(categoria, marca, unidades, productos):\n    agregar = True\n    for i in range(len(productos)):\n        if categoria == productos[i][0] and marca == productos[i][1]:\n            productos[i][2] = unidades\n            agregar = False\n    if agregar:\n        print(\"El producto: \" + categoria + \" (\" + marca + \") no es encuentra en los registros.\")\n        pasillo = int(input(\"Indique pasillo: \"))\n        nuevo_producto = [categoria, marca, unidades, pasillo]\n        productos.append(nuevo_producto)\n    tmp = []\n    for producto in productos:\n        tmp.append([producto[-1], producto])\n    tmp.sort()\n    productos = []\n    for producto in tmp:\n        productos.append(producto[1])\n    return productos\n\ndef borrar_productos(lista_productos, productos):\n    eliminar = [] # Guardar el \u00edndice de los productos a eliminar\n    for i in range(len(productos)):\n        for p in lista_productos:\n            cat = p[0]\n            mar = p[1]\n            if productos[i][0] == cat and productos[i][1] == mar:\n                eliminar.append(i)\n    eliminar.sort()\n    eliminar.reverse() # Debemos eliminar de atr\u00e1s hacia adelante para no alterar los \u00edndices\n    for e in eliminar:\n        del productos[e]\n    return productos    \n\ndef borrar_productos(lista_productos, productos):\n    borrar = [] # Guardar los productos a borrar\n    for p in lista_productos:\n        for producto in productos:\n            if p[0] == producto[0] and p[1] == producto[1]:\n                if producto not in borrar:\n                    borrar.append(producto)\n    for b in borrar:\n        productos.remove(b)\n    return productos\n\nproductos = [\n    ['fideos', 'carozzi', 30, 1],\n    ['arroz', 'tucapel', 23, 2]\n    # ...\n]\n\nprint(productos)\nproductos = actualizar_unidades_a('fideos', 'carozzi', 15, productos)\nprint(productos)\nlista_productos = [['az\u00facar', 'ianza'], ['fideos', 'carozzi']]\nproductos = borrar_productos(lista_productos, productos)\nprint(productos)\n</code></pre>"},{"location":"listas/pycornershop/","title":"PyCornerShop","text":"<p>La empresa PyCornerShop dispone de una aplicaci\u00f3n que permite a sus usuarios conseguir productos del supermercado desde la comodidad del hogar usando sus tel\u00e9fonos m\u00f3viles. La informaci\u00f3n de los repartidores y usuarios se encuentra almacenada en dos listas llamadas <code>repartidores</code> y <code>usuarios</code>, respectivamente.</p> <p>La lista <code>usuarios</code> contiene listas de 2 elementos: C\u00f3digo del usuario y ubicaci\u00f3n del domicilio. Esta \u00faltima corresponde a una lista que representa las coordenadas x, y. La lista <code>repartidores</code> contiene listas de 4 elementos: El nombre del repartidor, su ubicaci\u00f3n actual (lista con coordenadas), disponibilidad (valor booleano) y lista de visitas a usuarios. Esta lista contiene listas con el c\u00f3digo del usuario y la cantidad de veces que ha sido visitado por el repartidor. Si un repartidor nunca ha visitado a un usuario, no aparecer\u00e1 en la lista ni una tupla ni un c\u00f3digo de ese usuario.</p> <p>Para que PyCornerShop pueda funcionar de manera eficiente, le solicita a Ud. que implemente una funci\u00f3n llamada <code>buscar_repartidor(usuarios, repartidores, codigo)</code> que reciba como par\u00e1metros las listas antes mencionadas y un c\u00f3digo de usuario. La funci\u00f3n debe retornar una lista de repartidores disponibles m\u00e1s cercanos, ordenados de manera descendente seg\u00fan el n\u00famero de visitas que haya realizado al usuario. Un repartidor se considera cercano si est\u00e1 ubicado a menos de 4 km del usuario, y para esto considere que las listas de ubicaci\u00f3n tienen valores enteros con unidades en km. Finalmente, si no hay repartidores cercanos, la funci\u00f3n debe retornar una lista vac\u00eda.</p>"},{"location":"listas/pycornershop/#ejemplos","title":"Ejemplos","text":"<pre><code>repartidores = [\n    ['rayo macuin', [10, 2], True, [[1221, 5], [441, 8], [587, 2]]],\n    ['reparti dhor', [9, 3], True, [[1221, 2], [441, 5], [587, 3]]],\n    ['eliseo al-azar', [5, 5], False, [[1221, 8], [441, 2]]]\n]\nusuarios = [[1221, [5, 2]], [441, [8, 2]], [587, [10, 1]]]\n\n&gt;&gt;&gt; buscar_repartidor(usuarios, repartidores, 1221)\n[] # No hay repartidos que cumplan lo solicitado\n</code></pre> <pre><code>repartidores = [\n    ['rayo macuin', [6, 3], True, [[1221, 5], [441, 8], [587, 2]]],\n    ['reparti dhor', [7, 2], True, [[1221, 2], [441, 5], [587, 3]]],\n    ['eliseo al-azar', [5, 4], True, [[1221, 8], [441, 2]]]\n]\nusuarios = [[1221, [5, 2]], [441, [8, 2]], [587, [10, 1]]]\n\n&gt;&gt;&gt; buscar_repartidor(usuarios, repartidores, 1221)\n['eliseo al-azar', 'rayo macuin', 'reparti dhor']\n</code></pre> Soluci\u00f3n <pre><code>\n</code></pre>"},{"location":"listas/rectas/","title":"Rectas","text":"<p>Una recta en el plano est\u00e1 descrita por la ecuaci\u00f3n:</p> \\[\\begin{equation}     y = mx+b, \\end{equation}\\] <p>donde \\(m\\) es la pendiente y \\(b\\) es el intercepto. Todos los puntos de la recta satisfacen esta ecuaci\u00f3n.</p> <p>En un programa, una recta puede ser representada como una tupla <code>(m, b)</code>.</p> <p>Los algoritmos para resolver los siguientes ejercicios seguramente usted los aprendi\u00f3 en el colegio.  Si no los recuerda, puede buscarlos en su libro de matem\u00e1ticas favorito o en internet.</p>"},{"location":"listas/rectas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escriba la funci\u00f3n <code>punto_en_recta(p, r)</code> que indique si el punto <code>p</code> est\u00e1 en la recta <code>r</code>:</p>"},{"location":"listas/rectas/#ejemplos","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; recta = (2, -1)     # esta es la recta y = 2x - 1\n&gt;&gt;&gt; punto_en_recta((2, 3), recta)\nTrue\n&gt;&gt;&gt; punto_en_recta((0, -1), recta)\nTrue\n&gt;&gt;&gt; punto_en_recta((1, 2), recta)\nFalse\n</code></pre>"},{"location":"listas/rectas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escriba la funci\u00f3n <code>son_paralelas(r1, r2)</code> que indique si las rectas <code>r1</code> y <code>r2</code> son paralelas, es decir, no se intersectan en ning\u00fan punto.</p>"},{"location":"listas/rectas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escriba la funci\u00f3n <code>recta_que_pasa_por(p1, p2)</code> que entregue la recta que pasa por los puntos <code>p1</code> y <code>p2</code>:</p>"},{"location":"listas/rectas/#ejemplos_1","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; recta_que_pasa_por((-2, 4), (4, 1))\n(-0.5, 3.0)\n</code></pre> <p>Puede comprobar que la funci\u00f3n est\u00e1 correcta verificando que ambos puntos est\u00e1n en la recta obtenida:</p> <pre><code>&gt;&gt;&gt; p1 = (-2, 4)\n&gt;&gt;&gt; p2 = (4, 1)\n&gt;&gt;&gt; r = recta_que_pasa_por(p1, p2)\n&gt;&gt;&gt; punto_en_recta(p1, r) and punto_en_recta(p2, r)\nTrue\n</code></pre>"},{"location":"listas/rectas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escriba la funci\u00f3n <code>punto_de_interseccion(r1, r2)</code> que entregue el punto donde las dos rectas se intersectan.  Si las rectas son paralelas, la funci\u00f3n debe retornar <code>None</code>.</p>"},{"location":"listas/rectas/#ejemplos_2","title":"Ejemplos","text":"<pre><code>&gt;&gt;&gt; r1 = (2, 1)\n&gt;&gt;&gt; r2 = (-1, 4)\n&gt;&gt;&gt; punto_de_interseccion(r1, r2)\n(1.0, 3.0)\n</code></pre> Soluci\u00f3n <pre><code>\n</code></pre>"},{"location":"listas/supermercado/","title":"Supermercado","text":"<p>Un supermercado utiliza tablas de datos para llevar la informaci\u00f3n de su inventario.</p> <p>En un programa, cada tabla de datos es una lista de tuplas.</p> <p>La lista <code>productos</code> tiene el c\u00f3digo, el nombre, el precio y la cantidad de unidades del producto en bodega:</p> <pre><code>productos = [\n    (41419, 'Fideos',        450, 210),\n    (70717, 'Cuaderno',      900, 119),\n    (78714, 'Jabon',         730, 708),\n    (30877, 'Desodorante',  2190,  79),\n    (47470, 'Yogur',          99, 832),\n    (50809, 'Palta',         500,  55),\n    (75466, 'Galletas',      235,   0),\n    (33692, 'Bebida',        700,  20),\n    (89148, 'Arroz',         900, 121),\n    (66194, 'Lapiz',         120, 900),\n    (15982, 'Vuvuzela',    12990,  40),\n    (41235, 'Chocolate',    3099,  48),\n]\n</code></pre> <p>La lista <code>clientes</code> tiene el rut y el nombre de los clientes del supermercado:</p> <pre><code>clientes = [\n    ('11652624-7', 'Perico Los Palotes'),\n    ( '8830268-0', 'Leonardo Farkas'),\n    ( '7547896-8', 'Fulanita de Tal'),\n]\n</code></pre> <p>La lista <code>ventas</code> contiene las ventas realizadas, representadas por el n\u00famero de boleta, la fecha de la venta y el rut del cliente:</p> <pre><code>ventas = [\n    (1, (2010,  9, 12),  '8830268-0'),\n    (2, (2010,  9, 19), '11652624-7'),\n    (3, (2010,  9, 30),  '7547896-8'),\n    (4, (2010, 10,  1),  '8830268-0'),\n    (5, (2010, 10, 13),  '7547896-8'),\n    (6, (2010, 11, 11), '11652624-7'),\n]\n</code></pre> <p>El detalle de cada venta se encuentra en la lista <code>itemes</code>. Cada \u00edtem tiene asociado un n\u00famero de boleta, un c\u00f3digo de producto y una cantidad:</p> <pre><code>itemes = [\n    (1, 89148,  3),\n    (2, 50809,  4),\n    (2, 33692,  2),\n    (2, 47470,  6),\n    (3, 30877,  1),\n    (4, 89148,  1),\n    (4, 75466,  2),\n    (5, 89148,  2),\n    (5, 47470, 10),\n    (6, 41419,  2),\n]\n</code></pre> <p>Por ejemplo, en la venta con boleta n\u00famero \\(2\\), fueron vendidas \\(4\\) paltas, \\(2\\) bebidas y \\(6\\) yogures.</p> <p>Escriba las siguienes funciones:</p> <pre><code>&gt;&gt;&gt; producto_mas_caro(productos)\n'Vuvuzela'\n&gt;&gt;&gt; valor_total_bodega(productos)\n1900570\n&gt;&gt;&gt; ingreso_total_por_ventas(itemes, productos)\n13944\n&gt;&gt;&gt; producto_con_mas_ingresos(itemes, productos)\n'Arroz'\n&gt;&gt;&gt; cliente_que_mas_pago(itemes, productos, clientes, ventas)\n'Fulanita de Tal'\n&gt;&gt;&gt; total_ventas_del_mes(2010, 10, itemes, productos, ventas)\n4160\n&gt;&gt;&gt; fecha_ultima_venta_producto(47470, itemes, ventas)\n(2010, 10, 13)\n</code></pre> Soluci\u00f3n <pre><code>def producto_mas_caro(productos):\n    # Variables para guardar el producto mas caro\n    max_precio = -1\n    producto = \"\"\n    # Recorremos la lista de tuplas y buscamos el producto de mayor precio\n    for codigo, nombre, precio, unidades in productos:\n        if precio &gt;= max_precio:\n            max_precio = precio\n            producto = nombre\n    return producto\n\ndef valor_total_bodega(productos):\n    total = 0 # Acumulador para guardar el valor total de la bodega\n    # Recorremos la estructura \n    for codigo, nombre, precio, unidades in productos:\n        total += precio * unidades # multiplicamos la cantidad de unidades por el precio\n    return total\n\ndef ingreso_total_por_ventas(itemes, productos):\n    total = 0 # Variable para guardar el ingreso total\n    for boleta, codigo, cantidad in itemes: # Recorremos la estructura itemes donde se mantiene cada transaccion\n        for cod, nombre, precio, unidades in productos: # Recorremos los productos para obtener la info de cada producto\n            if codigo == cod: # Si corresponde el codigo de producto\n                total += cantidad * precio # Calculamos el ingreso asociado a dicho producto\n    return total\n\ndef producto_con_mas_ingresos(itemes, productos):\n    nombres = [] # Creamos una lista para guardar los nombres de cada producto - [nombre_producto_1, nombre_producto_2, ... ]\n    ingreso = [] # Otra lista para guardar el ingreso de cada producto - [ingreso_por_producto_1, ingreso_por_producto_2, ...]\n    for boleta, codigo, cantidad in itemes: # Recorremos la estructura itemes donde se mantiene cada transaccion\n        for cod, nombre, precio, unidades in productos: # Recorremos los productos para obtener la info de cada producto\n            if codigo == cod: # Si corresponde el codigo de producto\n                # Guardaremos la informacion del nombre del producto y el ingreso respectivo (listas inicializadas)\n                if nombre not in nombres: # Si todavia no agregamos el nombre del producto\n                    nombres.append(nombre) # Se agrega\n                    ingreso.append(cantidad * precio) # Y se agrega tambien el ingreso asociado al producto\n                else: # Si el nombre del producto ya habia sido agregado\n                    pos = nombres.index(nombre) # Obtenemos la posici\u00f3n \n                    ingreso[pos] += cantidad * precio # Actualizamos el ingreso mediante la posicion \n    # Buscamos ahora el mayor precio\n    max_precio = max(ingreso) # Buscamos el maximo en la lista de ingresos\n    max_pos = ingreso.index(max_precio) # Encontramos la posicion de ese maximo\n    return nombres[max_pos] # Retornamos el nombre que se encuentra en la lista nombres utilizando la posicion respectiva\n\ndef cliente_que_mas_pago(itemes, productos, clientes, ventas):\n    # Primero obtenemos las boletas con sus respectivos gastos\n    boletas = [] # Id de la boleta -  [id_boleta_1, id_boleta_2, ... ]\n    totales = [] # Totales de cada boleta - [total_boleta_1, total_boleta_2, ... ]\n    for boleta, codigo, cantidad in itemes:\n        for cod, nombre, precio, unidades in productos:\n            if codigo == cod:\n                if boleta not in boletas:\n                    boletas.append(boleta)\n                    totales.append(cantidad * precio)\n                else:\n                    pos = boletas.index(boleta)\n                    totales[pos] += cantidad * precio\n    # Ahora buscamos los clientes asociados a cada boleta para saber quien ha pagado mas\n    nombres = [] # Para guardar los nombres de cada cliente - [nombre_cliente_1, nombre_cliente_2, ... ]\n    pagos = [] # Para guardar el total pagado por cada cliente - [pago_cliente_1, pago_cliente_2, ... ]\n    for boleta, fecha, rut in ventas:\n        for rut_cliente, nombre_cliente in clientes:\n            if rut == rut_cliente: # Filtramos por el rut respectivo\n                pos_boleta = boletas.index(boleta) # Recuperamos el indice de la boleta \n                if nombre_cliente not in nombres: # Si todavia no existe el nombre del cliente\n                    nombres.append(nombre_cliente) # Se agrega\n                    pagos.append(totales[pos_boleta]) # Se agrega el pago asociado a esa boleta\n                else: # Si ya existe el cliente\n                    pos_nombre = nombres.index(nombre_cliente) # Lo buscamos\n                    pagos[pos_nombre] += totales[pos_boleta] # Sumamos el gasto de otra boleta al que ya teniamos\n    # Buscamos dentro de los pagos el mayor\n    max_pago = max(pagos)\n    max_pos = pagos.index(max_pago)\n    return nombres[max_pos] # Retornamos el nombre asociado a esa posicion\n\ndef total_ventas_del_mes(year, month, itemes, productos, ventas):\n    total = 0 # Acumulador del total\n    for boleta, fecha, rut in ventas: # Recorremos las ventas\n        a\u00f1o, mes, dia = fecha # Desempaquetamos la fecha\n        if a\u00f1o == year and mes == month: # Filtramos por fecha\n            for bol, prod, cant in itemes: # Recorremos los itemes para encontrar las boletas de la fecha\n                if bol == boleta: # Filtramos por boleta\n                    for producto in productos: # buscamos la informacion del producto\n                        id_producto, _, precio, _ = producto \n                        if id_producto == prod: # Si el producto corresponde a la boleta analizada\n                            total += cant * precio # Sumamos\n    return total\n\ndef fecha_ultima_venta_producto(id_producto, itemes, ventas):\n    fechas = [] # Lista para guardar las fechas donde se vendio el id_producto\n    for numero_boleta, producto, _ in itemes: # Recorremos los detalles de ventas\n        if id_producto == producto: # Si encontramos el producto\n            for nb, fecha, _ in ventas: # Recorremos la informacion de ventas para recuperar la fecha\n                if nb == numero_boleta: # Filtramos por el numero de boleta\n                    fechas.append(fecha) # Agregamos la tupla con la fecha\n    return max(fechas) # Retornamos la mayor tupla que corresponde a la ultima fecha c:\n\n\n# Estructuras #\nproductos = [\n    (41419, 'Fideos',        450, 210),\n    (70717, 'Cuaderno',      900, 119),\n    (78714, 'Jabon',         730, 708),\n    (30877, 'Desodorante',  2190,  79),\n    (47470, 'Yogur',          99, 832),\n    (50809, 'Palta',         500,  55),\n    (75466, 'Galletas',      235,   0),\n    (33692, 'Bebida',        700,  20),\n    (89148, 'Arroz',         900, 121),\n    (66194, 'Lapiz',         120, 900),\n    (15982, 'Vuvuzela',    12990,  40),\n    (41235, 'Chocolate',    3099,  48),\n]\n\nclientes = [\n    ('11652624-7', 'Perico Los Palotes'),\n    ( '8830268-0', 'Leonardo Farkas'),\n    ( '7547896-8', 'Fulanita de Tal'),\n]\n\nventas = [\n    (1, (2010,  9, 12),  '8830268-0'),\n    (2, (2010,  9, 19), '11652624-7'),\n    (3, (2010,  9, 30),  '7547896-8'),\n    (4, (2010, 10,  1),  '8830268-0'),\n    (5, (2010, 10, 13),  '7547896-8'),\n    (6, (2010, 11, 11), '11652624-7'),\n]\n\nitemes = [\n    (1, 89148,  3),\n    (2, 50809,  4),\n    (2, 33692,  2),\n    (2, 47470,  6),\n    (3, 30877,  1),\n    (4, 89148,  1),\n    (4, 75466,  2),\n    (5, 89148,  2),\n    (5, 47470, 10),\n    (6, 41419,  2),\n]\n\n# Pruebas #\nprint(producto_mas_caro(productos))\nprint(valor_total_bodega(productos))\nprint(ingreso_total_por_ventas(itemes, productos))\nprint(producto_con_mas_ingresos(itemes, productos))\nprint(cliente_que_mas_pago(itemes, productos, clientes, ventas))\nprint(total_ventas_del_mes(2010, 10, itemes, productos, ventas))\nprint(fecha_ultima_venta_producto(47470, itemes, ventas))\n</code></pre>"},{"location":"listas/texto/","title":"Texto","text":"<p>Considere el siguiente texto sacado de una buena serie de televisi\u00f3n: <pre><code>texto = '\"Por qu\u00e9 ser\u00e1 que en cuanto un hombre construye un muro, su\nvecino inmediatamente quiere saber qu\u00e9 hay del otro lado\" (Tyrion\nLannister). \"Quien hace una pregunta debe ser capaz de soportar la\nrespuesta\" (Yoren)'\n</code></pre></p>"},{"location":"listas/texto/#ejercicios","title":"Ejercicios","text":"<p>a. Cree la funci\u00f3n <code>texto_a_lista(texto)</code> que reciba la variable texto y retorne una lista con las palabras que componen ese texto. Note que las letras en el resultado van en min\u00fascula y no debe considerar los s\u00edmbolos coma, punto, par\u00e9ntesis y doble comillas. <pre><code>&gt;&gt;&gt; palabras = texto_a_lista_a(texto)\n&gt;&gt;&gt; print( palabras )\n['por', 'qu\u00e9', 'ser\u00e1', 'que', 'en', 'cuanto', 'un', 'hombre',\n'construye', 'un', 'muro', 'su', 'vecino', 'inmediatamente', 'quiere',\n'saber', 'qu\u00e9', 'hay', 'del', 'otro', 'lado', 'tyrion', 'lannister',\n'quien', 'hace', 'una', 'pregunta', 'debe', 'ser', 'capaz', 'de',\n'soportar', 'la', 'respuesta', 'yoren']\n</code></pre></p> <p>b. Modifique la funci\u00f3n <code>texto_a_lista(texto)</code> para que ahora retorne la lista de palabras ordenadas de acuerdo a largo (de mayor a menor). <pre><code>&gt;&gt;&gt; palabras = texto_a_lista_b(texto)\n&gt;&gt;&gt; print( palabras )\n['inmediatamente', 'respuesta', 'lannister', 'construye', 'soportar',\n'pregunta', 'vecino', 'tyrion', 'quiere', 'hombre', 'cuanto', 'yoren', 'saber', 'quien', 'capaz', 'ser\u00e1', 'otro', 'muro', 'lado', 'hace', 'debe', 'una', 'ser', 'qu\u00e9', 'qu\u00e9', 'que', 'por', 'hay', 'del', 'un', 'un', 'su', 'la', 'en', 'de']\n</code></pre></p> <p>c. Modifique la funci\u00f3n <code>texto_a_lista(texto)</code> para que retorne la lista de palabras ordenadas seg\u00fan el n\u00famero de veces que aparecen (de mayor a menor). Considere el siguiente ejemplo de ejecuci\u00f3n del programa. Note que el resultado consta de la lista de palabras no repetidas que aparecen en el texto, indicando el n\u00famero de veces que \u00e9stas aparecen. <pre><code>&gt;&gt; palabras = texto_a_lista_c(texto)\n&gt;&gt; print( palabras )\n[[2, 'un'], [2, 'qu\u00e9'], [1, 'yoren'], [1, 'vecino'], [1, 'una'], [1, 'tyrion'], [1,'su'], [1, 'soportar'], [1, 'ser\u00e1'], [1, 'ser'], [1,'saber'], [1, 'respuesta'], [1, 'quiere'], [1, 'quien'], [1, 'que'], [1, 'pregunta'], [1, 'por'], [1, 'otro'], [1, 'muro'], [1, 'lannister'], [1, 'lado'], [1, 'la'], [1, 'inmediatamente'], [1, 'hombre'], [1, 'hay'], [1, 'hace'], [1, 'en'], [1, 'del'], [1, 'debe'], [1, 'de'], [1, 'cuanto'], [1, 'construye'], [1, 'capaz']]\n</code></pre></p> Soluci\u00f3n <pre><code>def texto_a_lista(texto):\n    # Agregar un espacio al final del texto\n    texto += ' '\n    lista = []\n    palabra = ''\n    # Recorrer el texto\n    for letra in texto:\n        if letra == ' ': # Si la letra es un espacio\n            lista.append(palabra.lower())\n            palabra = '' # Limpiar la palabra\n        else: # Si la letra no es un espacio\n            if letra not in ',.\"()': # Evitar caracteres especiales\n                palabra += letra\n    return lista\n\ndef texto_a_lista_b(texto):\n    palabras = texto_a_lista(texto)\n    lista = [] # Lista para agregar los largos de las palabras\n    for palabra in palabras:\n        tmp = [len(palabra), palabra]\n        lista.append(tmp)\n    lista.sort()\n    lista.reverse()\n    salida = []\n    for palabra in lista:\n        salida.append(palabra[1])\n    return salida\n\ndef texto_a_lista_c(texto):\n    palabras = texto_a_lista(texto)\n    sin_repetir = []\n    for palabra in palabras:\n        if palabra not in sin_repetir:\n            sin_repetir.append(palabra)\n    contador = []\n    for palabra in sin_repetir:\n        contador.append([palabras.count(palabra), palabra])\n    contador.sort()\n    contador.reverse()\n    return contador\n\ntexto = '\"Por qu\u00e9 ser\u00e1 que en cuanto un hombre construye un muro, su vecino inmediatamente quiere saber qu\u00e9 hay del otro lado\" (Tyrion Lannister). \"Quien hace una pregunta debe ser capaz de soportar la respuesta\" (Yoren)'\n\nprint(texto_a_lista(texto))\nprint(texto_a_lista_b(texto))\nprint(texto_a_lista_c(texto))\n</code></pre>"},{"location":"secuenciales/","title":"Ejercicios Secuenciales","text":""},{"location":"secuenciales/#objetivos-de-aprendizaje","title":"Objetivos de aprendizaje","text":"<ul> <li>Efectuar c\u00e1lculos aritm\u00e9ticos con variables y operandos literales, tanto enteros como reales, desde la consola de Python.</li> <li>Escribir programas de flujo secuencial  en Python que reciban entradas y generen salidas.</li> <li>Resolver problemas especificados en lenguaje natural mediante programas en Python que hagan c\u00e1lculos matem\u00e1ticos utilizando los operadores b\u00e1sicos y funciones predefinidas de biblioteca, almacenando operandos y resultados en variables, y aplicando conversi\u00f3n de tipos (casting) cuando es necesario.</li> </ul>"},{"location":"secuenciales/amigos/","title":"Amigos","text":"<p>Tres amigos compran y pagan de su bolsillo distintas cosas para juntarse a ver un partido. Despu\u00e9s, quieren repartirse los gastos y para ello necesitan de un programa que les calcule la cuota individual y cu\u00e1nto debe cada uno. La siguiente es una ejecuci\u00f3n de ejemplo del programa a desarrollar:</p>"},{"location":"secuenciales/amigos/#ejemplo","title":"Ejemplo","text":"<pre><code>Primer amigo: 4000\nSegundo amigo: 2000\nTercer amigo: 6000\nPrimer amigo debe: 0.0\nSegundo amigo debe: 2000.0\nTercer amigo debe: -2000.0\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\namigo1 = int(input(\"Primer amigo: \"))\namigo2 = int(input(\"Segundo amigo: \"))\namigo3 = int(input(\"Tercer amigo: \"))\n# Total. Redondeamos para que tenga sentido el resultado en precios\ntotal = round((amigo1 + amigo2 + amigo3) / 3)\n# Lo que debe cada amigo\ndebe1 = total - amigo1\ndebe2 = total - amigo2\ndebe3 = total - amigo3\n# Salida de datos\nprint(\"Primer amigo debe:\", debe1)\nprint(\"Segundo amigo debe:\", debe2)\nprint(\"Tercer amigo debe:\", debe3)\n</code></pre>"},{"location":"secuenciales/cilindro/","title":"Informaci\u00f3n Cilindro","text":"<p>Realice un programa que reciba como entrada el radio basal y altura, y calcule el:</p> <ul> <li>\u00c1rea de las bases</li> <li>\u00c1rea lateral</li> <li>\u00c1rea total  </li> <li>Volumen de un cilindro </li> </ul> Soluci\u00f3n <pre><code>from math import pi\n\n# Entradas\nradio = float(input('Radio: '))\naltura = float(input('Altura: '))\n\n# C\u00e1lculos\narea_base = pi * radio ** 2\nperimetro_base = 2 * pi * radio\nvolumen_cilindro = area_base * altura\narea_bases_cilindro = 2 * area_base\narea_lateral_cilindro = perimetro_base * altura\narea_total_cilindro = area_bases_cilindro + area_lateral_cilindro\n\n# Salidas \nprint('Area bases:', area_bases_cilindro)\nprint('Area lateral:', area_lateral_cilindro)\nprint('Area total:', area_total_cilindro)\nprint('Volumen:', volumen_cilindro)\n</code></pre>"},{"location":"secuenciales/distancia/","title":"Distancia","text":"<p>Escriba un programa que calcule la distancia entre dos puntos de los que conocemos sus coordenadas. Recuerde que la f\u00f3rmula para calcular la distancia entre \\((x_1,y_1)\\) y \\((x_2,y_2)\\) es:</p> \\[     \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} \\] Soluci\u00f3n <pre><code># Entrada de puntos\nx1 = float(input(\"Ingrese x1: \"))\ny1 = float(input(\"Ingrese y1: \"))\nx2 = float(input(\"Ingrese x2: \"))\ny2 = float(input(\"Ingrese y2: \"))\n# C\u00e1lculo de distancia\ndistancia = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n# Mostrar resultado\nprint(\"La distancia entre los puntos es:\", distancia)\n</code></pre>"},{"location":"secuenciales/edad/","title":"Edad","text":"<p>Dada la fecha actual (d2/m2/a2) y la fecha de nacimiento de una persona (d1/m1/a1), indicarle su edad en a\u00f1os, meses y d\u00edas.  Se puede suponer que todos los a\u00f1os tienen \\(365\\) d\u00edas y que todos los meses tienen \\(30\\) d\u00edas.</p> Soluci\u00f3n <pre><code># Entradas\n# Fecha actual\nprint(\"Ingrese la fecha actual: \")\nd2 = int(input(\"Ingrese d\u00eda: \"))\nm2 = int(input(\"Ingrese mes: \"))\na2 = int(input(\"Ingrese a\u00f1o: \"))\n# Fecha de nacimiento\nprint(\"Ingrese su fecha de nacimiento: \")\nd1 = int(input(\"Ingrese d\u00eda: \"))\nm1 = int(input(\"Ingrese mes: \"))\na1 = int(input(\"Ingrese a\u00f1o: \"))\n\n# Transformar fechas a dias\nf1 = a1 * 365 + m1 * 30 + d1\nf2 = a2 * 365 + m2 * 30 + d2\n# Calcular diferencia\ndif = f2 - f1\na = dif // 365 # Obtener cantidad de a\u00f1os\nm = (dif % 365) // 30 # Obtener cantidad de meses\nd = (dif % 365) % 30 # Obtener cantidad de d\u00edas\n\n# Salida\nprint(a, m, d)\n</code></pre>"},{"location":"secuenciales/imc/","title":"\u00cdndice de Masa Corporal (IMC)","text":"<p>El \u00cdndice de Masa Corporal (IMC) de una persona se calcula dividiendo la masa (peso) en kilogramos, entre la altura (en metros) elevada al cuadrado: \\(IMC = \\text{masa}/\\text{altura}^2 \\, [\\text{kg}/\\text{m}^2]\\). Queremos un programa para calcular el \\(IMC\\) de una persona a partir de su peso expresado en libras y su altura expresada como una combinaci\u00f3n de pies y pulgadas.</p> <ul> <li>\\(1 \\,[\\text{ft}] = 0.3048 \\, [\\text{m}]\\)</li> <li>\\(1 \\,[\\text{in}] = 0.0254 \\, [\\text{m}]\\)</li> <li>\\(1\\,[\\text{lb}] = 0.45359237 \\, [\\text{kg}]\\)</li> </ul> Soluci\u00f3n <pre><code># Entrada\npies = int(input('Altura [pies]: '))\npulgadas = int(input('Altura [pulgadas]: '))\nlb = int(input('Peso [lb]: '))\n\n# C\u00e1lculos\naltura = pies * 0.3048 + pulgadas * 0.0254 # Altura a [m]\nmasa = 0.45359237 * lb # Peso a [kg]\nimc = masa / altura ** 2 # IMC\n\n# Salida\nprint(imc,'[kg/m2]')\n</code></pre>"},{"location":"secuenciales/invertido/","title":"N\u00famero Invertido","text":"<p>Escriba un programa que pida al usuario un entero de tres d\u00edgitos, y entregue el n\u00famero con los d\u00edgitos en orden inverso:</p>"},{"location":"secuenciales/invertido/#ejemplos","title":"Ejemplos","text":"<pre><code>Ingrese numero: 345\n543\n</code></pre> <pre><code>Ingrese numero: 241\n142\n</code></pre> Soluci\u00f3n <pre><code>n = int(input(\"Ingrese n\u00famero: \")) # Entrada de datos\nd1 = n // 100 # Obtenci\u00f3n del primer d\u00edgito\nd2 = (n // 10) % 10 # Obtenci\u00f3n del segundo d\u00edgito\nd3 = n % 10 # Obtenci\u00f3n del tercer d\u00edgito\nn_inv = d3 * 100 + d2 * 10 + d1 # Se genera el n\u00famero invertido\nprint(n_inv) # Salida de datos\n</code></pre>"},{"location":"secuenciales/notas/","title":"\u00bfQu\u00e9 nota necesito?","text":"<p>Un alumno desea saber que nota necesita en el tercer certamen para aprobar un ramo. El promedio del ramo se calcula con la siguiente formula.</p> \\[\\begin{equation}     \\begin{split}         N_C &amp;= \\dfrac{(C_1 + C_2 + C _3)}{3} \\\\[.5em]         N_F &amp;= 0.7\\, N_C + 0.3\\,N_L     \\end{split}     \\nonumber \\end{equation}\\] <p>Donde \\(N_C\\) es el promedio de cert\u00e1menes, \\(N_L\\) el promedio de laboratorio y \\(N_F\\) la nota final.</p> <p>Escriba un programa que pregunte al usuario las notas de los dos primeros cert\u00e1menes y la nota de laboratorio, y muestre la nota que necesita el alumno para aprobar el ramo con nota final \\(60\\).</p>"},{"location":"secuenciales/notas/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese nota certamen 1: 45\nIngrese nota certamen 2: 55\nIngrese nota laboratorio: 65\nNecesita nota 72 en el certamen 3\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nc1 = int(input(\"Ingrese nota certamen 1: \"))\nc2 = int(input(\"Ingrese nota certamen 2: \"))\nnl = int(input(\"Ingrese nota laboratorio: \"))\n# Despejando la formula se obtien que c3 es\nnc = (59.5 - 0.3 * nl) / 0.7 # Se utiliza 59.5 como equivalente a 60 por el redondeo que se realiza\nc3 = 3 * nc - (c1 + c2) + 1 # Se a\u00f1ade + 1 para ajustar la parte decimal\n# Por ejemplo no se puede obtener nota 45.123123, se requerir\u00eda un 46\n#Salida de datos\nprint(\"Necesita nota\", int(round(c3)), \"en el certamen 3\")\n</code></pre>"},{"location":"secuenciales/pitagoras/","title":"Pit\u00e1goras","text":"<p>Escriba un programa que reciba como entrada las longitudes de los dos catetos \\(a\\) y \\(b\\) de un tri\u00e1ngulo rect\u00e1ngulo, y que entregue como salida el largo de la hipotenusa \\(c\\) del triangulo, dado por el teorema de Pit\u00e1goras: \\(c^2=a^2+b^2\\).</p> <pre><code>Ingrese cateto a: 7\nIngrese cateto b: 5\nLa hipotenusa es 8.6023252670426267\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\na = int(input(\"Ingrese cateto a: \"))\nb = int(input(\"Ingrese cateto b: \"))\nc = (a ** 2 + b ** 2) ** 0.5 # Pit\u00e1goras\n# Salida de datos\nprint(\"La hipotenusa es\", c)\n</code></pre>"},{"location":"secuenciales/segundos/","title":"Convertidor de segundos","text":"<p>Realice un programa que convierta segundos a horas, minutos y segundos.</p>"},{"location":"secuenciales/segundos/#ejemplos","title":"Ejemplos","text":"<pre><code>Cantidad de segundos: 423\n0 horas, 7 minutos y 3 segundos\n</code></pre> <pre><code>Cantidad de segundos: 3667\n1 horas, 1 minutos y 7 segundos\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nsegundos = int(input('Cantidad de segundos: '))\n\nhoras = segundos // 3600  # Cantidad de horas\nsegundos = segundos % 3600  # Segundos restantes\nminutos = segundos // 60  # Cantidad de minutos\nsegundos = segundos % 60  # Segundos restantes\n\n# Salida de datos \nprint(horas,'horas,', minutos, 'minutos y', segundos, 'segundos')\n</code></pre>"},{"location":"secuenciales/sushi/","title":"Sushi","text":"<p>Siempre que me junto con mis amigos y encargamos sushi tenemos el mismo problema. Pedimos una determinada cantidad de rolls y despu\u00e9s no sabemos cu\u00e1ntas piezas le tocan a cada uno. M\u00e1s a\u00fan, dependiendo de d\u00f3nde encargamos, los rolls tienen distinta cantidad de piezas. </p> <p>Escriba un programa para ayudar a repartir la comida. Las entradas deben ser la cantidad de amigos, la cantidad de piezas por roll y la cantidad de rolls que se compraron. La salida debe ser la cantidad de piezas que cada uno tiene derecho a comer. Este valor puede tener decimales.</p>"},{"location":"secuenciales/sushi/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese el n\u00famero de amigos: 8\nIngrese el n\u00famero de rolls: 6\nIngrese el n\u00famero de piezas por roll: 5\nEl n\u00famero total de piezas por persona es: 3.75\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nn_amigos = int(input(\"Ingrese el n\u00famero de amigos: \"))\nn_rolls = int(input(\"Ingrese el n\u00famero de rolls: \"))\nn_piezas = int(input(\"Ingrese el n\u00famero de piezas por roll: \"))\n# C\u00e1lculos\nn_total = n_rolls * n_piezas\nn_por_amigo = round(n_total / n_amigos, 2)\n# Salida de datos\nprint(\"El n\u00famero total de piezas por persona es:\", n_por_amigo)\n</code></pre>"},{"location":"secuenciales/triangulos/","title":"Tri\u00e1ngulos","text":""},{"location":"secuenciales/triangulos/#perimetro","title":"Per\u00edmetro","text":"<p>Tenemos un tri\u00e1ngulo del cual conocemos las coordenadas de sus 3 v\u00e9rtices. Escriba un programa que calcule su per\u00edmetro. Este problema es una extensi\u00f3n del ejercicio de distancia.</p>"},{"location":"secuenciales/triangulos/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese el valor de x1: 0\nIngrese el valor de y1: 0\nIngrese el valor de x2: 1\nIngrese el valor de y2: 0\nIngrese el valor de x3: 0\nIngrese el valor de y3: 1\nEl per\u00edmetro del tri\u00e1ngulo es: 3.414213562373095\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\nx1 = float(input(\"Ingrese el valor de x1: \"))\ny1 = float(input(\"Ingrese el valor de y1: \"))\nx2 = float(input(\"Ingrese el valor de x2: \"))\ny2 = float(input(\"Ingrese el valor de y2: \"))\nx3 = float(input(\"Ingrese el valor de x3: \"))\ny3 = float(input(\"Ingrese el valor de y3: \"))\n\n# C\u00e1lculos\nlado1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\nlado2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\nlado3 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\nperimetro = lado1 + lado2 + lado3\n\n# Salidas\nprint(\"El per\u00edmetro del tri\u00e1ngulo es:\", perimetro)\n</code></pre>"},{"location":"secuenciales/triangulos/#area-1","title":"\u00c1rea 1","text":"<p>Realice un programa que calcule el \u00e1rea de un tri\u00e1ngulo a partir de las longitudes de sus lados. Para calcularlo utilice la f\u00f3rmula de Her\u00f3n:</p> \\[     A = \\sqrt{s\\,(s-a)(s-b)(s-c)} \\] <p>donde \\(a\\), \\(b\\) y \\(c\\) son las longitudes de cada lado y \\(s=\\dfrac{a+b+c}{2}\\) es el semiper\u00edmetro.</p>"},{"location":"secuenciales/triangulos/#ejemplo_1","title":"Ejemplo","text":"<pre><code>Ingrese longitud del lado a: 3\nIngrese longitud del lado b: 4\nIngrese longitud del lado c: 5\nEl \u00e1rea del tri\u00e1ngulo es 6.0\n</code></pre> Soluci\u00f3n <pre><code># Entrada de datos\na = float(input(\"Ingrese longitud del lado a: \"))\nb = float(input(\"Ingrese longitud del lado b: \"))\nc = float(input(\"Ingrese longitud del lado c: \"))\n\n# C\u00e1lculos\ns = (a + b + c) / 2 # semiper\u00edmetro\nd1 = s - a # diferencia1\nd2 = s - b # diferencia2\nd3 = s - c # diferencia3\nprod = s * d1 * d2 * d3 # producto de diferencias y semiperimetro\narea= prod ** (1 / 2) # ra\u00edz cuadrada \u00bfc\u00f3mo se podr\u00eda hacer lo mismo utilizando math.sqrt()?\n\n# Salida de datos\nprint(\"El \u00e1rea del tri\u00e1ngulo es\", area)\n</code></pre>"},{"location":"secuenciales/triangulos/#area-2","title":"\u00c1rea 2","text":"<p>El \u00e1rea de un tri\u00e1ngulo se puede calcular a partir del valor de dos de sus lados, \\(a\\) y \\(b\\), y del \u00e1ngulo \\(\\theta\\) que estos forman entre s\u00ed con la f\u00f3rmula </p> \\[     A=\\frac12a\\,b\\sin(\\theta). \\] <p>Dise\u00f1e un programa que pida al usuario el valor de los dos lados (en metros), el \u00e1ngulo que estos forman (en grados), y muestre el valor del \u00e1rea.</p> <p></p> <p>Considere que la funci\u00f3n <code>sin</code> de Python trabaja en radianes, as\u00ed que el \u00e1ngulo que lea en grados debe convertirse a radianes. Utilice un redondeo de \\(2\\) decimales al c\u00e1lculo final del \u00e1rea.</p>"},{"location":"secuenciales/triangulos/#ejemplo_2","title":"Ejemplo","text":"<pre><code>Ingrese el valor del lado a (metros): 1\nIngrese el valor del lado b (metros): 2\nIngrese el valor del \u00e1ngulo theta (grados): 30\nEl \u00e1rea del tri\u00e1ngulo es: 0.5 metros cuadrados\n</code></pre> Soluci\u00f3n <pre><code>from math import sin, pi\n\n# Entradas\na = float(input(\"Ingrese el valor del lado a (metros): \"))\nb = float(input(\"Ingrese el valor del lado b (metros): \"))\ntheta = float(input(\"Ingrese el valor del \u00e1ngulo theta (grados): \"))\n\n# C\u00e1lculos\nangulo = theta * pi / 180\narea = round(a * b * sin(angulo) / 2, 2)\n\n# Salidas\nprint(\"El \u00e1rea del tri\u00e1ngulo es:\", area, \"metros cuadrados\")\n</code></pre>"},{"location":"secuenciales/viaje/","title":"Viaje","text":"<p>Dado un viaje circular que comienza en un punto (coordenadas), y visita dos puntos m\u00e1s antes de volver al inicio, determinar la distancia total recorrida.</p> Soluci\u00f3n <pre><code>from math import sqrt\n\n# Entrada de coordenadas\nx1 = float(input('x1: '))\ny1 = float(input('y1: '))\nx2 = float(input('x2: '))\ny2 = float(input('y2: '))\nx3 = float(input('x3: '))\ny3 = float(input('y3: '))\n\n# C\u00e1lculo de distancias\nd1 = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\nd2 = sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2)\nd3 = sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)\n\n# Salida de distancia total\nprint(d1 + d2 + d3)\n</code></pre>"},{"location":"secuenciales/zeller/","title":"Congruencia de Zeller","text":"<p>La Congruencia de Zeller es un algoritmo que permite calcular el d\u0131\u0301a de la semana de cualquier fecha del calendario. Para una fecha <code>dd/mm/aaaa</code>, aplicamos las siguientes f\u00f3rmulas, en donde todas las divisiones deben producir n\u00fameros enteros como resultado:</p> \\[ a = \\dfrac{14 \u2212 mm}{12} \\] \\[ y = aaaa \u2212 a \\] \\[ m = mm + (12 \\times a) - 2 \\] \\[ d = \\left(dd + y + \\dfrac{y}{4}-\\dfrac{y}{100}+\\dfrac{y}{400}+\\dfrac{31\\times m}{12}\\right)\\bmod 7 \\] <p>El d\u0131\u0301a resultante, \\(d\\), es un n\u00famero entre \\(0\\) y \\(6\\), donde \\(0\\) representa domingo.</p> <p>Desarrolle un programa que reciba el d\u00eda, mes y a\u00f1o y retorne el valor de \\(d\\).</p>"},{"location":"secuenciales/zeller/#ejemplo","title":"Ejemplo","text":"<pre><code>D\u00eda: 12\nMes: 08\nA\u00f1o: 2025\nd es: 2\n</code></pre> Soluci\u00f3n <pre><code>dd = int(input(\"Dia: \"))\nmm = int(input(\"Mes: \"))\naaaa = int(input(\"A\u00f1o: \"))\na = (14 - mm) // 12\ny = aaaa - a\nm = mm + (12 * a) - 2\nd = (dd + y + y // 4 - y // 100 + y // 400 + (31 * m) // 12) % 7\nprint(\"d es:\", d)\n</code></pre>"},{"location":"strings/asignaturas/","title":"Asignaturas","text":"<p>Dado un <code>string</code> con el siguiente formato, pero del que desconocemos la cantidad de asignaturas: <code>\"Progra=78;Mate=83;F\u00edsica=68;Qu\u00edmica=65\"</code>. Escriba un programa que lea el string como entrada y calcule el promedio de calificaciones, indicando adem\u00e1s la materia con mejor promedio. En caso de empate puede mostrar cualquiera de las que empatan.</p>"},{"location":"strings/asignaturas/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingrese string: Progra=78;Mate=83;F\u00edsica=68;Qu\u00edmica=65\nPromedio: 74\nMejor asignatura: Mate\n</code></pre> Soluci\u00f3n 1 <pre><code>texto = input(\"Ingrese string: \") # Para el string con las notas\ntexto += \";\" # Agregamos un punto y coma al final para que la \u00faltima asignatura sea contada\ninfo_asignatura = \"\" # Variable para guardar la informaci\u00f3n de la asignatura\nmejor_asignatura = \"\" # Variable para guardar el nombre de la mejor nota\nmejor_nota = -1 # Variable para guardar la mejor nota\nsuma = 0 # Variable para la sumatoria de notas \ncontador = 0 # Contador de notas \nfor c in texto: # Recorremos cada caracter del texto\n    if c != \";\": # Si no es un punto y coma, guardamos la informaci\u00f3n de la asignatura\n        info_asignatura += c \n    else: # Si es un punto y coma, procesamos la informaci\u00f3n de la asignatura\n        # Buscamos la posici\u00f3n del signo igual para separar el nombre de la asignatura de la nota\n        pos_igual = 0  # Variable para guardar la posici\u00f3n del signo igual\n        i = 0 # Variable para recorrer la informaci\u00f3n de la asignatura\n        while i &lt; len(info_asignatura): # Recorremos la informaci\u00f3n de la asignatura\n            if info_asignatura[i] == \"=\": # Si encontramos el signo igual\n                pos_igual = i # Guardamos la posici\u00f3n del signo igual\n                i = len(info_asignatura) # Salimos del ciclo para evitar seguir buscando\n            i += 1 # Aumentamos el contador para recorrer la informaci\u00f3n de la asignatura\n        # Obtenemos el nombre de la asignatura y la nota\n        nombre = info_asignatura[:pos_igual] \n        nota = int(info_asignatura[pos_igual+1:])\n        info_asignatura = \"\" # Reiniciamos la informaci\u00f3n de la asignatura\n        contador += 1 # Aumentamos el contador de notas\n        suma += nota # Sumamos la nota a la sumatoria\n        # Buscamos la mejor nota\n        if nota &gt; mejor_nota:\n            mejor_nota = nota\n            mejor_asignatura = nombre\n# Calculamos el promedio\npromedio = round(suma / contador)\n# Mostramos lo solicitado\nprint(\"Promedio:\", promedio)\nprint(\"Mejor asignatura:\", mejor_asignatura)\n</code></pre> Soluci\u00f3n 2 <pre><code>entrada = input(\"Ingrese string: \") # Para el string con las notas\nsuma = 0 # Variable para la sumatoria de notas\nmejor_materia = \"\" # Variable para guardar el nombre de la mejor nota\nmejor_nota = -1 # Mejor nota\nn_notas = 0 # Contador de notas\n# La logica del programa es obtener la materia y nota e ir removiendola de la entrada\n# Por lo tanto repetiremos el proceso hasta que se quiten todaslas materias y notas de la entrada\nwhile len(entrada) &gt; 0: \n    if \";\" in entrada: # Si hay ';' en nuestra entrada podemos utilizar el metodo index para localizarlo\n        i = entrada.index(\";\") # Indice para separar materia\n        materia_nota = entrada[:i] # Obtenemos la materia con su nota\n        # Removemos la materia y nota que ya procesamos. \n        # Se incluye el ';' para que no nos moleste en el procesamiento\n        entrada = entrada.replace(materia_nota + \";\", \"\")\n    else: # Cuando a entrada no le queden ';', estamos en la materia del final\n        materia_nota = entrada # La informacion de la materia se encuentra en la ultima parte de la entrada\n        entrada = entrada.replace(materia_nota, \"\") # Se remueve la informacion (aqui entrada deberia quedar vacia)\n    # Una vez tenemos el substring materia=nota, lo separamos utilizando '='\n    j = materia_nota.index(\"=\") # Indice para separar materia de la nota (utilizando el caracter '=')\n    materia = materia_nota[:j] # Obtenemos el nombre de la materia\n    nota = int(materia_nota[j+1:]) # Obtenemos la nota y la convertimos a entero. El +1 es para evitar el '='\n    suma += nota # Sumatoria de notas\n    n_notas += 1 # contador notas\n    # Buscamos la major nota\n    if nota &gt; mejor_nota:\n        mejor_materia = materia\n        mejor_nota = nota\n# Calculamos el promedio\npromedio = int(round(suma / n_notas)) \n# Mostramos lo solicitado \nprint(\"Promedio:\", promedio)\nprint(\"Mejor asignatura:\", mejor_materia)\n</code></pre>"},{"location":"strings/basquetbol/","title":"B\u00e1squetbol","text":"<p>En el b\u00e1squetbol existen tres diferentes tipos de anotaciones:</p> <ul> <li>el tiro libre (<code>L</code>), que vale un punto,</li> <li>el doble (<code>D</code>), que vale dos puntos, y</li> <li>el triple (<code>T</code> ) que vale tres puntos.</li> </ul> <p>Un partido de b\u00e1squetbol est\u00e1 dividido en varios per\u00edodos.</p> <p>Usted debe escribir un programa que reciba como entrada una \u00fanica l\u00ednea, que contenga todas las anotaciones realizadas por un equipo de b\u00e1squetbol durante un partido. Las anotaciones de per\u00edodos distintos deben ir separadas por un espacio. Como salida, debe mostrar la cantidad de puntos obtenidos en cada per\u00edodo y los puntos totales, siguiendo el formato del ejemplo.</p>"},{"location":"strings/basquetbol/#ejemplo","title":"Ejemplo","text":"<pre><code>Anotaciones: DDTDLLDD DDLDT TDTLLD DDDDD\n15 puntos en el periodo 1\n10 puntos en el periodo 2\n12 puntos en el periodo 3\n10 puntos en el periodo 4\nTotal: 47 puntos\n</code></pre> Soluci\u00f3n <pre><code>anotaciones = input(\"Anotaciones: \") # Anotaciones del partido\nanotaciones += \" \" # Agregamos un espacio al final para que el \u00faltimo periodo sea contado\ntotal = 0 # Puntos totales\npuntos = 0 # Puntos en el periodo actual\nperiodo = 1 # Periodo actual\n# Recorremos cada caracter de las anotaciones\nfor c in anotaciones:\n    if c == \" \": # Si encontramos un espacio, termina el periodo\n        print(puntos, \"puntos en el periodo\", periodo) # Imprimimos los puntos del periodo\n        total += puntos # Sumamos los puntos del periodo al total\n        periodo += 1 # Pasamos al siguiente periodo\n        puntos = 0 # Reseteamos los puntos del periodo\n    else: # Si no es un espacio, sumamos los puntos del periodo\n        # Dependiendo del caracter (o tipo de puntos), sumamos los puntos correspondientes\n        if c == \"L\": # Si es un tiro libre, sumamos 1 punto\n            puntos += 1\n        elif c == \"D\": # Si es un doble, sumamos 2 puntos\n            puntos += 2\n        elif c == \"T\": # Si es un triple, sumamos 3 puntos\n            puntos += 3\n# Al finalizar, imprimimos los puntos totales\nprint(\"Total:\", total, \"puntos\")\n</code></pre>"},{"location":"strings/censura/","title":"Censura","text":"<p>Construya un algoritmo que reciba un texto compuesto \u00fanicamente de palabras separadas por espacios, y reemplace cada aparici\u00f3n de una palabra dentro del texto por un n\u00famero de hashtags (#) igual al largo de la palabra censurada. La palabra no debe ser censurada cuando se encuentre dentro de otra (por ejemplo, \"pollo\" no debiese censurarse dentro de \"repollo\"). La censura no discrimina entre may\u00fasculas y min\u00fasculas. Su algoritmo debe mostrar el texto modificado.</p>"},{"location":"strings/censura/#ejemplos","title":"Ejemplos","text":"<p><pre><code>Ingrese un texto: Un dia vi un unicornio\nIngrese una palabra: perro\nUn dia vi un unicornio\n</code></pre> <pre><code>Ingrese un texto: Un dia vi un unicornio\nIngrese una palabra: UNICORNIO\nUn dia vi un #########\n</code></pre> <pre><code>Ingrese un texto: Un dia vi un unicornio\nIngrese una palabra: un\n## dia vi ## unicornio\n</code></pre></p> Soluci\u00f3n <pre><code>texto = input(\"Ingrese un texto: \") # Texto a censurar\npalabra = input(\"Ingrese una palabra: \") # Palabra a censurar\ntexto_censurado = \"\" # Variable para guardar el texto censurado\ntexto += \" \" # Agregamos un espacio al final para que la \u00faltima palabra sea censurada\ntmp = \"\" # Variable temporal para guardar las palabras\nfor letra in texto: # Recorremos cada letra del texto\n    if letra != \" \": # Si no es un espacio, guardamos la letra en la variable temporal\n        tmp += letra \n    else: # Si es un espacio, procesamos la palabra\n        if tmp.lower() == palabra.lower(): # Si la palabra es igual a la palabra a censurar\n            texto_censurado += \"#\" * len(palabra) # Agregamos tantos \"#\" como letras tenga la palabra\n        else: # Si la palabra no es igual a la palabra a censurar\n            texto_censurado += tmp # Agregamos la palabra tal cual\n        texto_censurado += \" \" # Agregamos un espacio al final de la palabra\n        tmp = \"\" # Reiniciamos la variable temporal\nprint(texto_censurado) # Mostramos el texto censurado\n</code></pre>"},{"location":"strings/coincidencia/","title":"Coincidencia","text":"<p>Escriba un programa que muestre un string con las letras que coinciden en dos strings de entrada. Por ejemplo, \"amorosos\" y \"amortiza\" coinciden en: \"amor\"; por otra parte, \"conformidad\" y \"contorno\" coinciden en \"conor\". Observe que los strings pueden tener distintos largos.</p>"},{"location":"strings/coincidencia/#ejemplos","title":"Ejemplos","text":"<pre><code>String 1: amorosos\nString 2: amortiza\nResultado: amor\n</code></pre> <pre><code>String 1: conformidad\nString 2: contorno\nResultado: conor\n</code></pre> Soluci\u00f3n <pre><code># Entrada\ns1 = input(\"String 1: \")\ns2 = input(\"String 2: \")\n# Encontrar la menor longitud\nlon = len(s1) # Suponer que el primer string es el mas corto\nif lon &gt; len(s2): # Verificar si se cumple el supuesto\n    lon = len(s2) # En el caso que el segundo string sea mas corto\n# Comparar letra a letra y guardar en una variable la coincidencia\ni = 0\ncoincidencia = ''\nwhile i &lt; lon: # Recorremos los indices\n    if s1[i] == s2[i]: # Son iguales los caracteres?\n        coincidencia += s1[i] # Concatenamos las letras similares\n    i += 1\n# Salida\nprint(\"Resultado:\", coincidencia)\n</code></pre>"},{"location":"strings/comparacion/","title":"Comparaci\u00f3n","text":"<p>Escriba un programa que reciba dos strings a comparar y un nivel de tolerancia que es un n\u00famero entero no negativo (cero o m\u00e1s). El programa debe mostrar si los strings son iguales ignorando diferencias hasta la cantidad de tolerancia indicada. Por ejemplo, \"perro\" y \"perXo\" son iguales para tolerancia 1, pero son distintos para tolerancia 0.</p>"},{"location":"strings/comparacion/#ejemplos","title":"Ejemplos","text":"<pre><code>String 1: perro\nString 2: perXo\nTolerancia: 1\nIguales con tolerancia = 1\n</code></pre> <pre><code>String 1: perro\nString 2: perXo\nTolerancia: 0\nDistintos con tolerancia = 0\n</code></pre> Soluci\u00f3n <pre><code># Entradas\ns1 = input(\"String 1: \")\ns2 = input(\"String 2: \")\ntol = int(input(\"Tolerancia: \"))\n# Algoritmo\ndif = 0 # Contador para los caracteres distintos\n# Obtencion de menor longitud\nlon = len(s1)\nif len(s2) &lt; lon:\n    lon = len(s2)\n# Recorrer cadenas\ni = 0\nwhile i &lt; lon:\n    if s1[i] != s2[i]: # Se cuentan los caracteres distintos\n        dif +=1  \n    i += 1 \n# Salida\nif dif &lt;= tol:\n    print(\"Iguales con tolerancia =\", tol)\nelse:\n    print(\"Distintos con tolerancia =\", tol)\n</code></pre>"},{"location":"strings/ejemplos/","title":"<code>Strings</code>","text":""},{"location":"strings/ejemplos/#general","title":"General","text":"<p>Considere <code>frase = 'Solo vuela el que se atreve a hacerlo'</code></p> <ol> <li>\u00bfCu\u00e1l es la longitud de este string?</li> <li>\u00bfCu\u00e1les son los \u00edndices v\u00e1lidos?</li> <li>\u00bfC\u00f3mo se expresa siempre el mayor \u00edndice en t\u00e9rminos de la longitud?</li> <li>\u00bfC\u00f3mo completar\u00eda el siguiente while para recorrer todos los \u00edndices del string?     <pre><code>i = 0\nwhile i &lt; ???:\n    i += 1\n</code></pre></li> </ol> Soluci\u00f3n <ol> <li>\\(37\\)</li> <li>De \\(0\\) a \\(36\\) o de \\(-37\\) a \\(-1\\)</li> <li><code>len(frase) - 1</code></li> <li> <pre><code>i = 0\nwhile i &lt; len(frase):\n    i += 1\n</code></pre> </li> </ol>"},{"location":"strings/ejemplos/#casting","title":"Casting","text":"<ol> <li>\u00bfPodemos convertir el string <code>\"23515\"</code> a un <code>int</code>? \u00bfc\u00f3mo?</li> <li>\u00bfPodemos hacer lo mismo con <code>\"veintitr\u00e9s mil quinientos quince\"</code>?</li> </ol> Soluci\u00f3n <ol> <li><code>int(\"23515\")</code></li> <li>No directamente.</li> </ol>"},{"location":"strings/ejemplos/#tabla-ascii-y-orden-lexicografico","title":"Tabla ASCII y orden lexicogr\u00e1fico","text":"<p>\u00bfCu\u00e1l es el resultado de estas comparaciones?. Considere la Tabla ASCII.</p> <ol> <li><code>'perro' &lt; 'gato'</code></li> <li><code>'perro' == 'Perro'</code></li> <li><code>'perro' &lt; 'Perro'</code> </li> </ol> Soluci\u00f3n <ol> <li><code>False</code>, <code>'p'</code> no est\u00e1 antes que <code>'g'</code>.</li> <li><code>False</code>, diferencia la may\u00fascula.</li> <li><code>False</code>, las may\u00fasculas van primero en ASCII.</li> </ol>"},{"location":"strings/ejemplos/#inmutabilidad","title":"Inmutabilidad","text":"<ol> <li>\u00bfQu\u00e9 imprime el siguiente programa?     <pre><code>nombre = 'Juan Carlos Bodoque'\nnombre.upper()\nprint(nombre)\n</code></pre></li> <li>\u00bfqu\u00e9 hace esto? <code>print(nombre[3])</code></li> <li>\u00bfy esto? <code>nombre[3] = 'A'</code></li> </ol> Soluci\u00f3n <ol> <li><code>Juan Carlos Bodoque</code>. Para que tenga efecto el m\u00e9todo utilizado hay que cambiar el c\u00f3digo a:     <pre><code>nombre = 'Juan Carlos Bodoque'\nnombre = nombre.upper()\nprint(nombre)\n</code></pre></li> <li><code>n</code></li> <li>Produce un error. Los <code>strings</code> son inmutables.</li> </ol>"},{"location":"strings/ejemplos/#pertenencia","title":"Pertenencia","text":"<p>\u00bfCu\u00e1l es el resultado en las siguientes instrucciones?</p> <ol> <li> <pre><code>vocales = 'aeiou'\n'e' in vocales\n</code></pre> </li> <li><code>'E' in 'perro'</code></li> <li><code>'pollo' in 'Vaca Pollo Cerdo Tomate Lechuga Repollo Zapallo'</code></li> </ol> Soluci\u00f3n <ol> <li><code>True</code></li> <li><code>False</code></li> <li><code>True</code></li> </ol>"},{"location":"strings/ejemplos/#recuperacion-de-elementos","title":"Recuperaci\u00f3n de elementos","text":"<p>Suponga <code>texto = 'gato grande, negro y gordo'</code></p> <ol> <li>\u00bfQu\u00e9 retorna <code>texto[4]</code>?</li> <li>\u00bf<code>len(texto[5:8])</code>?</li> <li>\u00bf<code>texto[:4]</code>?</li> <li>\u00bf<code>texto[-5:]</code>?</li> </ol> Soluci\u00f3n <ol> <li><code>' '</code></li> <li><code>3</code></li> <li><code>'gato'</code></li> <li><code>'gordo'</code></li> </ol>"},{"location":"strings/ejemplos/#recorrido-de-strings-for","title":"Recorrido de <code>strings</code>: <code>for</code>","text":"<ol> <li>\u00bfQu\u00e9 realiza el siguiente programa?     <pre><code>texto = 'gato grande, negro y gordo'\nfor x in texto:\n    if x in 'aeiou':\n        print(x)\n</code></pre></li> <li>\u00bfC\u00f3mo lo hacemos con <code>while</code> en vez de <code>for</code>?</li> </ol> Soluci\u00f3n <ol> <li>Muestra las vocales que hay en el texto.</li> <li> <pre><code>texto = 'gato grande, negro y gordo'\ni = 0\nwhile i &lt; len(texto):\n    if texto[i] in 'aeiou':\n        print(texto[i])\n    i += 1\n</code></pre> </li> </ol>"},{"location":"strings/ejemplos/#otros-metodos-para-strings","title":"Otros m\u00e9todos para <code>strings</code>","text":""},{"location":"strings/ejemplos/#replace","title":"<code>replace</code>","text":"<pre><code>texto.replace(buscado, nuevo)\n</code></pre> <p>Retorna un nuevo <code>string</code> a partir de <code>texto</code>, pero reemplazando todas las ocurrencias de <code>buscado</code> por <code>nuevo</code>. Si no existe, retorna el <code>string</code> original <code>texto</code>.</p>"},{"location":"strings/ejemplos/#ejemplo","title":"Ejemplo","text":"<pre><code>texto = 'hola'\ntexto = texto.replace('o', 'x')\nprint(texto) # hxla\n</code></pre>"},{"location":"strings/ejemplos/#index","title":"<code>index</code>","text":"<pre><code>texto.index(buscado)\n</code></pre> <p>Retorna el \u00edndice de la primera ocurrencia de <code>buscado</code> dentro de <code>texto</code>. Si no existe produce un error.</p>"},{"location":"strings/ejemplos/#ejemplo_1","title":"Ejemplo","text":"<pre><code>print('hola mundo'.index('o')) # 1\n</code></pre>"},{"location":"strings/ejemplos/#metodos-y-funciones","title":"M\u00e9todos y funciones","text":"<p>La caracter\u00edstica que diferencia a los m\u00e9todos de las funciones es la forma de llamarlos. En una funci\u00f3n aplicada a un <code>string</code>, como <code>len(s)</code>, se escribe el nombre de la funci\u00f3n y el <code>string</code> va dentro de los par\u00e9ntesis. En un m\u00e9todo aplicado a un <code>string</code>, se comienza con el <code>string</code>, seguido de un punto, seguido del nombre del m\u00e9todo y dentro de los par\u00e9ntesis se incluyen par\u00e1metros adicionales.</p>"},{"location":"strings/ejemplos/#ruteo","title":"Ruteo","text":"<p>Rutear el siguiente programa para el texto: <code>'En un lugar de La Mancha'</code>. Indicar adem\u00e1s, con pocas palabras, la tarea que lleva a cabo.</p> <pre><code>texto = input('Texto: ')\ninicio = True\nconvertido = ''\nfor c in texto:\n    if inicio:\n        convertido = convertido + c.upper()\n        inicio = False\n    elif c == ' ':\n        inicio = True\n    else:\n        convertido = convertido + c\nprint(convertido)\n</code></pre>"},{"location":"strings/eliminar_programa/","title":"Eliminar","text":"<p>Escribir un algoritmo que muestra un <code>string</code> del que se han eliminado todas las ocurrencias de palabra dentro de un texto. El texto, adem\u00e1s de las palabras, solo contiene espacios. No considere signos de puntuaci\u00f3n.</p>"},{"location":"strings/eliminar_programa/#ejemplo","title":"Ejemplo","text":"<pre><code>&gt;&gt;&gt; Ingresar texto: En un lugar de la Mancha de cuyo nombre no quiero acordarme no ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\n&gt;&gt;&gt; Ingresar palabra a eliminar: no\nEn un lugar de la Mancha de cuyo nombre quiero acordarme ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\n</code></pre>"},{"location":"strings/larga/","title":"Palabra m\u00e1s larga","text":"<p>Construya un algoritmo que muestre la palabra de mayor longitud de un texto cuyas palabras se separan por un \u00fanico espacio y no hay espacio al final. Considere que no hay signos de puntuaci\u00f3n en el texto.</p>"},{"location":"strings/larga/#ejemplo","title":"Ejemplo","text":"<pre><code>Ingresar texto: En un lugar de la Mancha de cuyo nombre no quiero acordarme no ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\nLa palabra mas larga es: acordarme\n</code></pre> Soluci\u00f3n <pre><code># Entrada de texto\ntexto = input(\"Ingrese texto: \")\n# Algoritmo\nlarga = \"\" # Variable donde guardaremos la palabra mas larga\ni = 0 # Indice para recorrer el texto\nj = 0 # Indice para guardar las posiciones de los espacios\n# Recorremos el texto utilizando el indice i\nwhile i &lt; len(texto):\n    if texto[i] == \" \": # Si encontramos un espacio\n        # Utilizamos el substring que contiene la palabra a verificar\n        if len(texto[j:i]) &gt; len(larga): # Comparamos si la longitud es la mayor\n            larga = texto[j:i] # La guardamos\n        j = i + 1 # j guardara la posicion del ultimo espacio + 1 (para no contar el mismo espacio)\n    i += 1\n# El ciclo anterior solo analizara las palabras cuando encuentre un espacio en el texto\n# Para verificar la ultima palabra utilizamos el siguiente condicional\n# j contiene la posicion del ultimo espacio + 1, y obtenemos hasta el final del substring\nif len(texto[j:]) &gt; len(larga): \n    larga = texto[j:]\n# Salida de respuesta\nprint(\"La palabra mas larga es:\", larga)\n</code></pre>"},{"location":"strings/stringones/","title":"Stringones","text":"<p>En el idioma de la tribu de los Stringones, la mayor\u00eda de las palabras tienen muchas letras que se repiten de manera consecutiva. El sabio de la tribu ide\u00f3 un sistema para escribir las palabras de manera abreviada: cada letra aparece antecedida de un n\u00famero, indicando cu\u00e1ntas veces est\u00e1 repetida.</p> <p>Por ejemplo, la palabra <code>pppprrrrrogggrraaa</code> se abrevia <code>4p5r1o3g2r3a</code>.</p> <p>Desarrolle un programa que reciba una palabra abreviada, y muestre la palabra original, antes de haber sido codificada. Suponga que ninguna letra aparece m\u00e1s de nueve veces seguidas.</p>"},{"location":"strings/stringones/#ejemplo","title":"Ejemplo","text":"<pre><code>Palabra abreviada: 4p5r1o3g2r3a\nPalabra original: pppprrrrrogggrraaa\n</code></pre> Soluci\u00f3n <pre><code># Entrada \nabreviada = input(\"Palabra abreviada: \")\noriginal = '' # Concatenaremos la palabra original\ni = 0 # Para los indices del string\nwhile i &lt; len(abreviada): # Recorremos los indices del string\n    n = int(abreviada[i]) # Obtenemos el numero de repeticiones\n    l = abreviada[i+1] # Obtenemos la letra\n    original += l * n  # Se concatena el texto con la repetici\u00f3n de cada letra\n    i += 2 # Nos saltamos 2 indices, dada la estructura de los textos abreviados\nprint(\"Palabra original:\", original)\n</code></pre>"},{"location":"strings/veces/","title":"Veces","text":"<p>Escribir un programa que cuente la cantidad de veces que aparece el <code>string</code> <code>palabra</code> dentro del <code>string</code> <code>oracion</code>. La oraci\u00f3n, adem\u00e1s de las palabras, solo contiene espacios. No considere signos de puntuaci\u00f3n.</p>"},{"location":"strings/veces/#ejemplo","title":"Ejemplo","text":"<p><pre><code>Ingrese una oraci\u00f3n: En un lugar de la Mancha de cuyo nombre no quiero acordarme no ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\nIngrese una palabra: de\nLa palabra de aparece 4 veces en la oraci\u00f3n.\n</code></pre> <pre><code>Ingrese una oraci\u00f3n: En un lugar de la Mancha de cuyo nombre no quiero acordarme no ha mucho tiempo que viv\u00eda un hidalgo de los de lanza en astillero\nIngrese una palabra: no\nLa palabra no aparece 2 veces en la oraci\u00f3n.\n</code></pre></p> Soluci\u00f3n <pre><code># Entrada de strings\noracion = input(\"Ingrese una oraci\u00f3n: \")\npalabra_buscar = input(\"Ingrese una palabra: \")\n# Algoritmo\npalabra = \"\"\noracion = oracion + \" \" # Agregar un espacio al final para facilitar la b\u00fasqueda\ncont = 0 # Contador para las repeticiones\ni = 0 # Indice para recorrer el string\nfor c in oracion:\n    if c != \" \": # Mientras no se encuentre un espacio, se sigue formando la palabra\n        palabra += c\n    else: # Si se encuentra un espacio, se compara la palabra formada con la buscada\n        if palabra == palabra_buscar:\n            cont += 1 # Si son iguales, se incrementa el contador\n        palabra = \"\" # Se reinicia la palabra para formar la siguiente\n# Salida\nprint(\"La palabra\", palabra_buscar, \"aparece\", cont, \"veces en la oraci\u00f3n.\")\n</code></pre>"}]}